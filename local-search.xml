<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Android全栈知识体系</title>
    <link href="/2024/03/10/Android%E5%85%A8%E6%A0%88%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <url>/2024/03/10/Android%E5%85%A8%E6%A0%88%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Launcher应用图标显示流程</title>
    <link href="/2024/03/10/Launcher%E5%BA%94%E7%94%A8%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/03/10/Launcher%E5%BA%94%E7%94%A8%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>时序图如下：</p><p><img src="https://s2.loli.net/2023/12/26/GkVW5ArpuEbXPt7.jpg"></p><ol><li>初始化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">packages/apps/Launcher3/src/com/android/launcher3/Launcher.java<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>    ...<br>    <span class="hljs-type">LauncherAppState</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> LauncherAppState.getInstance(<span class="hljs-built_in">this</span>);  <span class="hljs-comment">// 获取LauncherAppState的实例</span><br>    mModel = app.getModel();  <span class="hljs-comment">// 获取LauncherModel的实例</span><br>    ...    <br>    <span class="hljs-keyword">if</span> (!mModel.addCallbacksAndLoad(<span class="hljs-built_in">this</span>)) &#123;  <span class="hljs-comment">// 加载，CallBacks指向Launcher</span><br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>LauncherAppState的构造方法中初始化了一个InvariantDeviceProfile类，该类的构造方法中进行了一系列的配置，如：桌面的行、列、Hotseat（桌面底部固定的应用栏）的个数、Hotseat所有应用的位置、布局id、文件夹的行列、图标的大小等。此外，还会解析device_profiles.xml文件，加载默认页的资源文件。</li><li>mModel.addCallbacksAndLoad()会进行数据加载。</li></ul><ol start="2"><li>加载</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">packages/apps/Launcher3/src/com/android/launcher3/LauncherModel.java<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addCallbacksAndLoad</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> Callbacks callbacks)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (mLock) &#123;<br>        addCallbacks(callbacks);<br>        <span class="hljs-keyword">return</span> startLoader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callbacks</span>[] &#123; callbacks &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startLoader</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> Callbacks[] newCallbacks)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">synchronized</span> (mLock) &#123;<br>        ...<br>        <span class="hljs-keyword">if</span> (callbacksList.length &gt; <span class="hljs-number">0</span>) &#123;<br>            ...<br>            <span class="hljs-keyword">if</span> (bindDirectly) &#123;<br>                <span class="hljs-comment">// Divide the set of loaded items into those that we are binding synchronously,</span><br>                <span class="hljs-comment">// and everything else that is to be bound normally (asynchronously).</span><br>                launcherBinder.bindWorkspace(bindAllCallbacks, <span class="hljs-comment">/* isBindSync= */</span> <span class="hljs-literal">true</span>);<br><br>                <span class="hljs-comment">// For now, continue posting the binding of AllApps as there are other</span><br>                <span class="hljs-comment">// issues that arise from that.</span><br>                launcherBinder.bindAllApps();<br>                launcherBinder.bindDeepShortcuts();<br>                launcherBinder.bindWidgets();<br>                <span class="hljs-keyword">if</span> (FeatureFlags.CHANGE_MODEL_DELEGATE_LOADING_ORDER.get()) &#123;<br>                    mModelDelegate.bindAllModelExtras(callbacksList);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// Always post the loader task, instead of running directly</span><br>                <span class="hljs-comment">// (even on same thread) so that we exit any nested synchronized blocks</span><br>                MODEL_EXECUTOR.post(mLoaderTask);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>bindWorkspace()：创建CellLayout，并添加到WorkSpace容器中；</p><p>bindAllApps()：绑定所有icon图标到CellLayout对应的recyclerView中，即app图标加载；</p><p>bindDeepShortcuts()：加载快捷方式；</p><p>bindWidgets()：加载桌面widget。</p><ol start="3"><li>加载应用程序信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">packages/apps/Launcher3/src/com/android/launcher3/model/BaseLauncherBinder.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bindAllApps</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    executeCallbacksTask(c -&gt; c.bindAllApplications(apps, flags, packageUserKeytoUidMap),<br>            mUiExecutor);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用callbacks的bindAllApplications()，这个callbacks实际指向Launcher。</p><ol start="4"><li>加载应用图标</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">packages/apps/Launcher3/src/com/android/launcher3/Launcher.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bindAllApplications</span><span class="hljs-params">(AppInfo[] apps, <span class="hljs-type">int</span> flags,</span><br><span class="hljs-params">        Map&lt;PackageUserKey, Integer&gt; packageUserKeytoUidMap)</span> &#123;<br>    ...<br>    <span class="hljs-type">AllAppsStore</span> <span class="hljs-variable">appsStore</span> <span class="hljs-operator">=</span> mAppsView.getAppsStore();<br>    appsStore.setApps(apps, flags, packageUserKeytoUidMap);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>调用AllAppsStore的setApps()方法，并将包含应用信息的列表apps传进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">packages/apps/Launcher3/src/com/android/launcher3/allapps/AllAppsStore.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApps</span><span class="hljs-params">(AppInfo[] apps, <span class="hljs-type">int</span> flags, Map&lt;PackageUserKey, Integer&gt; map)</span> &#123;<br>    mApps = apps;<br>    mModelFlags = flags;<br>    notifyUpdate();<br>    mPackageUserKeytoUidMap = map;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyUpdate</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    <span class="hljs-keyword">for</span> (OnUpdateListener listener : mUpdateListeners) &#123;<br>        ...<br>        listener.onAppsUpdated();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>setApps()会将包含应用信息的列表apps设置给mApps，然后通知View刷新界面。</p><ol start="5"><li>刷新界面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">packages/apps/Launcher3/src/com/android/launcher3/allapps/AlphabeticalAppsList.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAppsUpdated</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (mAllAppsStore == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// Sort the list of apps</span><br>    mApps.clear();<br><br>    Stream&lt;AppInfo&gt; appSteam = Stream.of(mAllAppsStore.getApps());<br>    <span class="hljs-keyword">if</span> (!hasSearchResults() &amp;&amp; mItemFilter != <span class="hljs-literal">null</span>) &#123;<br>        appSteam = appSteam.filter(mItemFilter);<br>    &#125;<br>    appSteam = appSteam.sorted(mAppNameComparator);<br><br>    <span class="hljs-comment">// As a special case for some languages (currently only Simplified Chinese), we may need to</span><br>    <span class="hljs-comment">// coalesce sections</span><br>    <span class="hljs-type">Locale</span> <span class="hljs-variable">curLocale</span> <span class="hljs-operator">=</span> mActivityContext.getResources().getConfiguration().locale;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">localeRequiresSectionSorting</span> <span class="hljs-operator">=</span> curLocale.equals(Locale.SIMPLIFIED_CHINESE);<br>    <span class="hljs-keyword">if</span> (localeRequiresSectionSorting) &#123;<br>        <span class="hljs-comment">// Compute the section headers. We use a TreeMap with the section name comparator to</span><br>        <span class="hljs-comment">// ensure that the sections are ordered when we iterate over it later</span><br>        appSteam = appSteam.collect(Collectors.groupingBy(<br>                info -&gt; info.sectionName,<br>                () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LabelComparator</span>()),<br>                Collectors.toCollection(ArrayList::<span class="hljs-keyword">new</span>)))<br>                .values()<br>                .stream()<br>                .flatMap(ArrayList::stream);<br>    &#125;<br><br>    appSteam.forEachOrdered(mApps::add);<br>    <span class="hljs-comment">// Recompose the set of adapter items from the current set of apps</span><br>    <span class="hljs-keyword">if</span> (mSearchResults.isEmpty()) &#123;<br>        updateAdapterItems();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>AlphabeticalAppsList实现了OnUpdateListener接口。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>启动流程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNI原理</title>
    <link href="/2024/03/10/JNI%E5%8E%9F%E7%90%86/"/>
    <url>/2024/03/10/JNI%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><h4 id="JNI用途"><a href="#JNI用途" class="headerlink" title="JNI用途"></a>JNI用途</h4><p>JNI是Java Native Interface的缩写，译为Java本地接口，是Java与其他语言通信的桥梁。当出现一些用Java无法处理的任务时，开发人员就可以使用JNI技术来完成。一般来说主要有以下情况需要用到JNI技术。</p><ul><li>需要调用Java语言不支持的依赖于操作系统平台特性的一些功能。例如：需要调用当前的UNIX系统的某个功能，而Java不支持这个功能，就需要用到JNI技术来实现。</li><li>为了整合一些以前的非Java语言开发的系统。例如：需要用到早期实现的C&#x2F;C++语言开发的一些功能或系统，将这些功能整合到当前的系统或新的版本中。</li><li>为了节省程序的运行时间，必须采用其他语言（比如C&#x2F;C++语言）来提升运行效率。例如：游戏、音视频开发设计的音视频编解码和图像绘制需要更快的处理速度。</li></ul><p>JNI不只是应用于Android开发，它有着非常广泛的应用场景。JNI在Android中的应用场景也十分广泛，主要有音视频开发、热修复和插件化、逆向开发、系统源码调用等。为了更方便地使用JNI技术，Android还提供了NDK这个工具集合，NDK开发是基于JNI的，它和JNI开发本质上并没有区别。</p><p>Android系统按语言来划分的话由两个世界组成，分别是Java世界和Native世界。JNI就是将它们连接在一起的桥梁。</p><h4 id="MediaRecorder框架中的JNI"><a href="#MediaRecorder框架中的JNI" class="headerlink" title="MediaRecorder框架中的JNI"></a>MediaRecorder框架中的JNI</h4><p>MediaRecorder用于录音和录像。Java Framework层对应的是MediaRecorder.java，也就是我们在应用开发中直接调用的类。JNI层对应的是libmedia_jni.so，可以看到这个动态库的名称含有“_jni”，这说明它是一个JNI的动态库。Native层对应的是libmedia.so，这个动态库完成了实际调用的功能。</p><h5 id="Java-Framework层的MediaRecorder"><a href="#Java-Framework层的MediaRecorder" class="headerlink" title="Java Framework层的MediaRecorder"></a>Java Framework层的MediaRecorder</h5><p>和JNI有关的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/media/java/android/media/MediaRecorder.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MediaRecorder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AudioRouting</span>,<br>                                      AudioRecordingMonitor,<br>                                      AudioRecordingMonitorClient,<br>                                      MicrophoneDirection<br>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.loadLibrary(<span class="hljs-string">&quot;media_jni&quot;</span>);  <span class="hljs-comment">// 1</span><br>        native_init();  <span class="hljs-comment">// 2</span><br>    &#125;<br>    ...<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">native_init</span><span class="hljs-params">()</span>;  <span class="hljs-comment">// 3</span><br>    ...<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IllegalStateException;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在静态代码块中首先调用了注释1处的代码，用来加载名为media_jni的动态库，也就是libmedia_jni.so。接着调用注释2处的native_init方法，其内部会调用Native方法，用来完成JNI的注册。注释3处的native_init方法用native来修饰，说明它是一个native方法，表示由JNI来实现。MediaRecorder的start()方法同样也是一个native方法。对于Java Framework层来说，只需要加载对应的JNI库，接着声明native方法就可以了，剩下的工作由JNI层来完成。</p><h5 id="JNI层的MediaRecorder"><a href="#JNI层的MediaRecorder" class="headerlink" title="JNI层的MediaRecorder"></a>JNI层的MediaRecorder</h5><p>MediaRecorder的JNI层由android_media_recorder.cpp实现，native方法native_init()和start()的JNI层实现如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/media/jni/android_media_MediaRecorder.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span></span><br><span class="hljs-function"><span class="hljs-title">android_media_MediaRecorder_native_init</span><span class="hljs-params">(JNIEnv *env)</span></span><br><span class="hljs-function"></span>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span></span><br><span class="hljs-function"><span class="hljs-title">android_media_MediaRecorder_start</span><span class="hljs-params">(JNIEnv *env, jobject thiz)</span></span><br><span class="hljs-function"></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>android_media_MediaRecorder_native_init()方法是native_init()方法在JNI层的实现，android_media_MediaRecorder_start()方法则是start()方法在JNI层的实现。那么native_init()方法是如何找到对应的android_media_MediaRecorder_native_init()方法的呢？这就涉及到了JNI方法注册。</p><h5 id="Native方法注册"><a href="#Native方法注册" class="headerlink" title="Native方法注册"></a>Native方法注册</h5><p>Native方法注册分为静态注册和动态注册，其中静态注册多用于NDK开发，而动态注册多用于Framework开发。</p><ul><li>静态注册</li></ul><p>按照JNI规范书写函数名：java_包名_类名_方法名，包名也用下划线隔开。</p><p>静态注册使用简单，但是也有一些缺点：</p><ol><li>JNI层的函数名称过长；</li><li>声明Native方法的类需要用javah生成头文件；</li><li>初次调用Native方法时需要建立关联，影响效率。</li></ol><ul><li>动态注册</li></ul><p>JNI中有一种结构用来记录Java的Native方法和JNI方法的关联关系，它就是JNINativeMethod，它在jni.h中被定义。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs h"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name;  <span class="hljs-comment">// Java方法的名字</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* signature;  <span class="hljs-comment">// Java方法的签名信息</span><br>    <span class="hljs-type">void</span>*       fnPtr;  <span class="hljs-comment">// JNI中对应的方法指针</span><br>&#125; JNINativeMethod;<br></code></pre></td></tr></table></figure><p>系统的MediaRecorder采用的就是动态注册。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/media/jni/android_media_MediaRecorder.cpp<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> JNINativeMethod gMethods[] = &#123;<br>    ...<br>    &#123;<span class="hljs-string">&quot;start&quot;</span>,                <span class="hljs-string">&quot;()V&quot;</span>,                             (<span class="hljs-type">void</span> *)android_media_MediaRecorder_start&#125;,  <span class="hljs-comment">// 1</span><br>    &#123;<span class="hljs-string">&quot;stop&quot;</span>,                 <span class="hljs-string">&quot;()V&quot;</span>,                             (<span class="hljs-type">void</span> *)android_media_MediaRecorder_stop&#125;,<br>    &#123;<span class="hljs-string">&quot;pause&quot;</span>,                <span class="hljs-string">&quot;()V&quot;</span>,                             (<span class="hljs-type">void</span> *)android_media_MediaRecorder_pause&#125;,<br>    &#123;<span class="hljs-string">&quot;resume&quot;</span>,               <span class="hljs-string">&quot;()V&quot;</span>,                             (<span class="hljs-type">void</span> *)android_media_MediaRecorder_resume&#125;,<br>    &#123;<span class="hljs-string">&quot;native_reset&quot;</span>,         <span class="hljs-string">&quot;()V&quot;</span>,                             (<span class="hljs-type">void</span> *)android_media_MediaRecorder_native_reset&#125;,<br>    &#123;<span class="hljs-string">&quot;release&quot;</span>,              <span class="hljs-string">&quot;()V&quot;</span>,                             (<span class="hljs-type">void</span> *)android_media_MediaRecorder_release&#125;,<br>    &#123;<span class="hljs-string">&quot;native_init&quot;</span>,          <span class="hljs-string">&quot;()V&quot;</span>,                             (<span class="hljs-type">void</span> *)android_media_MediaRecorder_native_init&#125;,<br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>上面定义了一个JNINativeMethod类型的gMethods数组，里面存储的就是MediaRecorder的Native方法与JNI层函数的对应关系，其中注释1处“start()“是Java层的Native方法，它对应的JNI层的函数为android_media_MediaRecorder_start()。”()V“是start()方法的签名信息。只定义JNINativeMethod类型的数组是没有用的，还需要注册它，注册的函数为register_android_media_MediaRecorder()，这个函数在android_media_MediaPlayer的JNI_OnLoad()函数中调用。这个函数会在调用System.loadLibrary()函数后调用，因为多媒体框架中的很多框架都要进行JNINativeMethod数组注册，因此，注册函数就被统一定义在android_media_MediaPlayer.cpp的JNI_OnLoad()函数中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/media/jni/android_media_MediaPlayer.<span class="hljs-function">cpp</span><br><span class="hljs-function">jint <span class="hljs-title">JNI_OnLoad</span><span class="hljs-params">(JavaVM* vm, <span class="hljs-type">void</span>* <span class="hljs-comment">/* reserved */</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    JNIEnv* env = <span class="hljs-literal">NULL</span>;<br>    jint result = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (vm-&gt;<span class="hljs-built_in">GetEnv</span>((<span class="hljs-type">void</span>**) &amp;env, JNI_VERSION_1_4) != JNI_OK) &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;ERROR: GetEnv failed\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> bail;<br>    &#125;<br>    <span class="hljs-built_in">assert</span>(env != <span class="hljs-literal">NULL</span>);<br>    ...<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">register_android_media_MediaPlayer</span>(env) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;ERROR: MediaPlayer native registration failed\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> bail;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">register_android_media_MediaRecorder</span>(env) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;ERROR: MediaRecorder native registration failed\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> bail;<br>    &#125;<br>    ...<br>    <span class="hljs-comment">/* success -- return valid version number */</span><br>    result = JNI_VERSION_1_4;<br><br>bail:<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>在JNI_OnLoad()函数中调用了整个多媒体框架的注册JNINativeMethod数组的函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/media/jni/android_media_MediaRecorder.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">register_android_media_MediaRecorder</span><span class="hljs-params">(JNIEnv *env)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> AndroidRuntime::<span class="hljs-built_in">registerNativeMethods</span>(env,<br>                <span class="hljs-string">&quot;android/media/MediaRecorder&quot;</span>, gMethods, <span class="hljs-built_in">NELEM</span>(gMethods));<br>&#125;<br></code></pre></td></tr></table></figure><p>register_android_media_MediaRecorder()中返回了AndroidRuntime的registerNativeMethods()函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/core/jni/AndroidRuntime.cpp<br><span class="hljs-comment">/*static*/</span> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">AndroidRuntime::registerNativeMethods</span><span class="hljs-params">(JNIEnv* env,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* className, <span class="hljs-type">const</span> JNINativeMethod* gMethods, <span class="hljs-type">int</span> numMethods)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">jniRegisterNativeMethods</span>(env, className, gMethods, numMethods);<br>&#125;<br></code></pre></td></tr></table></figure><p>registerNativeMethods()函数中又返回了jniRegisterNativeMethods()，它被定义在JNI帮助类JNIHelp.c中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c">libnativehelper/JNIHelp.c<br><span class="hljs-type">int</span> <span class="hljs-title function_">jniRegisterNativeMethods</span><span class="hljs-params">(JNIEnv* env, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* className,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> JNINativeMethod* methods, <span class="hljs-type">int</span> numMethods)</span><br>&#123;<br>    ALOGV(<span class="hljs-string">&quot;Registering %s&#x27;s %d native methods...&quot;</span>, className, numMethods);<br>    jclass clazz = (*env)-&gt;FindClass(env, className);<br>    ALOG_ALWAYS_FATAL_IF(clazz == <span class="hljs-literal">NULL</span>,<br>                         <span class="hljs-string">&quot;Native registration unable to find class &#x27;%s&#x27;; aborting...&quot;</span>,<br>                         className);<br>    <span class="hljs-type">int</span> result = (*env)-&gt;RegisterNatives(env, clazz, methods, numMethods);  <span class="hljs-comment">// 1</span><br>    (*env)-&gt;DeleteLocalRef(env, clazz);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Failure to register natives is fatal. Try to report the corresponding exception,</span><br>    <span class="hljs-comment">// otherwise abort with generic failure message.</span><br>    jthrowable thrown = (*env)-&gt;ExceptionOccurred(env);<br>    <span class="hljs-keyword">if</span> (thrown != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ExpandableString</span> <span class="hljs-title">summary</span>;</span><br>        ExpandableStringInitialize(&amp;summary);<br>        <span class="hljs-keyword">if</span> (GetExceptionSummary(env, thrown, &amp;summary)) &#123;<br>            ALOGF(<span class="hljs-string">&quot;%s&quot;</span>, summary.data);<br>        &#125;<br>        ExpandableStringRelease(&amp;summary);<br>        (*env)-&gt;DeleteLocalRef(env, thrown);<br>    &#125;<br>    ALOGF(<span class="hljs-string">&quot;RegisterNatives failed for &#x27;%s&#x27;; aborting...&quot;</span>, className);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>从注释1处可以看出，最终通过调用的JNIEnv的RegisterNatives()函数来完成JNI的注册。</p><h4 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h4><p>JNI数据类型的转换的例子仍旧以MediaRecorder来举例。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/media/jni/android_media_MediaRecorder.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span></span><br><span class="hljs-function"><span class="hljs-title">android_media_MediaRecorder_start</span><span class="hljs-params">(JNIEnv *env, jobject thiz)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">ALOGV</span>(<span class="hljs-string">&quot;start&quot;</span>);<br>    sp&lt;MediaRecorder&gt; mr = <span class="hljs-built_in">getMediaRecorder</span>(env, thiz);<br>    <span class="hljs-keyword">if</span> (mr == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">jniThrowException</span>(env, <span class="hljs-string">&quot;java/lang/IllegalStateException&quot;</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">process_media_recorder_call</span>(env, mr-&gt;<span class="hljs-built_in">start</span>(), <span class="hljs-string">&quot;java/lang/RuntimeException&quot;</span>, <span class="hljs-string">&quot;start failed.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>android_media_MediaRecorder_start()函数的第二个参数为jobject类型，它是JNI层的数据类型，Java的数据类型到了JNI层就需要转换为JNI层的数据类型。Java的数据类型分为基本数据类型和引用数据类型，JNI层对于这两种类型也做了区分。</p><h5 id="基本数据类型的转换"><a href="#基本数据类型的转换" class="headerlink" title="基本数据类型的转换"></a>基本数据类型的转换</h5><p>除了void，其他的数据类型只需要在前面加上“j”就可以了。</p><table><thead><tr><th>Java</th><th>Native</th><th>Signature</th></tr></thead><tbody><tr><td>byte</td><td>jbyte</td><td>B</td></tr><tr><td>char</td><td>jchar</td><td>C</td></tr><tr><td>double</td><td>jdouble</td><td>D</td></tr><tr><td>float</td><td>jfloat</td><td>F</td></tr><tr><td>int</td><td>jint</td><td>I</td></tr><tr><td>short</td><td>jshort</td><td>S</td></tr><tr><td>long</td><td>jlong</td><td>J</td></tr><tr><td>boolean</td><td>jboolean</td><td>Z</td></tr><tr><td>void</td><td>void</td><td>V</td></tr></tbody></table><h5 id="引用数据类型的转换"><a href="#引用数据类型的转换" class="headerlink" title="引用数据类型的转换"></a>引用数据类型的转换</h5><p>数组的JNI层数据结构需要以“Array”结尾，签名格式的开头都会有“[”。需要注意有些数据类型的签名以“;”结尾，引用数据类型还具有继承关系。</p><table><thead><tr><th>Java</th><th>Native</th><th>Signature</th></tr></thead><tbody><tr><td>所有对象</td><td>jobject</td><td>L+classname+;</td></tr><tr><td>Class</td><td>jclass</td><td>Ljava&#x2F;lang&#x2F;Class;</td></tr><tr><td>String</td><td>jstring</td><td>Ljava&#x2F;lang&#x2F;String;</td></tr><tr><td>Throwable</td><td>jthrowable</td><td>Ljava&#x2F;lang&#x2F;Throwable;</td></tr><tr><td>Object[]</td><td>jobjectArray</td><td>[L+classname+;</td></tr><tr><td>byte[]</td><td>jbyteArray</td><td>[B</td></tr><tr><td>char[]</td><td>jcharArray</td><td>[C</td></tr><tr><td>double[]</td><td>jdoubleArray</td><td>[D</td></tr><tr><td>float[]</td><td>jfloatArray</td><td>[F</td></tr><tr><td>int[]</td><td>jshortArray</td><td>[I</td></tr><tr><td>short[]</td><td>jshortArray</td><td>[S</td></tr><tr><td>long[]</td><td>jlongArray</td><td>[J</td></tr><tr><td>boolean[]</td><td>jbooleanArray</td><td>[Z</td></tr></tbody></table><p>jclass、jstring、jarray和jthrowable都继承自jobject，而jobjectArray、jintArray和jlongArray等类型都继承自jarray。</p><h4 id="方法签名"><a href="#方法签名" class="headerlink" title="方法签名"></a>方法签名</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/media/jni/android_media_MediaRecorder.cpp<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> JNINativeMethod gMethods[] = &#123;<br>    ...<br>    &#123;<span class="hljs-string">&quot;native_init&quot;</span>,          <span class="hljs-string">&quot;()V&quot;</span>,                             (<span class="hljs-type">void</span> *)android_media_MediaRecorder_native_init&#125;,<br>    &#123;<span class="hljs-string">&quot;native_setup&quot;</span>,         <span class="hljs-string">&quot;(Ljava/lang/Object;Ljava/lang/String;Landroid/os/Parcel;)V&quot;</span>,<br>                                                                (<span class="hljs-type">void</span> *)android_media_MediaRecorder_native_setup&#125;,<br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>gMethods数组中存储的是MediaRecorder的Native方法与JNI层函数的对应关系，其中”()V””和”(Ljava&#x2F;lang&#x2F;Object;Ljava&#x2F;lang&#x2F;String;Landroid&#x2F;os&#x2F;Parcel;)V”就是方法签名。Java是有重载方法的，可以定义方法名相同，参数不同的方法，因此在JNI中仅仅通过方法名是无法找到Java中对应的具体方法的，JNI为了解决这一问题就将参数类型和返回值类型组合在一起作为方法签名。通过方法签名和方法名就可以找到对应的Java方法。JNI的方法签名的格式为：（参数签名格式…）返回值签名格式。</p><h4 id="解析JNIEnv"><a href="#解析JNIEnv" class="headerlink" title="解析JNIEnv"></a>解析JNIEnv</h4><p>JNIEnv是Native世界中Java环境的代表，通过JNIEnv *指针就可以在Native世界中访问Java世界的代码进行操作，它只在创建它的线程中有效，不能跨线程传递，因此不同线程的JNIEnv是彼此独立的，JNIEnv的主要作用有以下两点：</p><ul><li>调用Java的方法。</li><li>操作Java（操作Java中的变量和对象等）。</li></ul><p>先来看JNIEnv的定义，如下所示：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs h">libnativehelper/include_jni/jni.h<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(__cplusplus)</span><br><span class="hljs-keyword">typedef</span> _JNIEnv JNIEnv;  <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">typedef</span> _JavaVM JavaVM;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">JNINativeInterface</span>* <span class="hljs-title">JNIEnv</span>;</span>  <span class="hljs-comment">// 2</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">JNIInvokeInterface</span>* <span class="hljs-title">JavaVM</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>这里使用预定义宏<code>__cplusplus</code>来区分C和C++两种代码，如果定义了<code>__cplusplus</code>，就是C++代码中的定义，否则就是C代码中的定义。在这里我们也看到了JavaVM，它是虚拟机在JNI层的代表，在一个虚拟机进程中只有一个JavaVM，因此，该进程的所有线程都可以使用这个JavaVM。通过JavaVM的AttachCurrentThread()函数可以获取这个线程的JNIEnv，这样就可以在不同的线程中调用Java方法了。还要记得在使用AttachCurrentThread()函数的线程退出前，调用DetachCurrentThread()函数来释放资源。</p><p>从注释2处可以看出在C中，JNIEnv类型是<code>JNINativeInterface*</code>，从注释1处可以看出在C++中JNIEnv的类型是<code>_JNIEnv</code>，<code>_JNIEnv</code>是如何定义的呢？如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp">libnativehelper/include_jni/jni.h<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_JNIEnv</span> &#123;<br>    <span class="hljs-comment">/* do not rename this; it does not seem to be entirely opaque */</span><br>    <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNINativeInterface</span>* functions;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(__cplusplus)</span><br>    ...<br>    <span class="hljs-function">jclass <span class="hljs-title">FindClass</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-keyword">this</span>, name); &#125;<br>    ...<br>    <span class="hljs-function">jmethodID <span class="hljs-title">GetMethodID</span><span class="hljs-params">(jclass clazz, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* sig)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">GetMethodID</span>(<span class="hljs-keyword">this</span>, clazz, name, sig); &#125;<br>    ...<br>    <span class="hljs-function">jfieldID <span class="hljs-title">GetFieldID</span><span class="hljs-params">(jclass clazz, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* sig)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">GetFieldID</span>(<span class="hljs-keyword">this</span>, clazz, name, sig); &#125;<br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>_JNIEnv</code>是一个结构体，其内部又包含了JNINativeInterface。在<code>_JNIEnv</code>中又定义了很多函数，这里列举了三个比较常用的函数，FindClass()用来找到Java中指定名称的类，GetMethodID()用来得到Java中的方法，GetFieldID()用来得到Java中的成员变量，这里可以发现这三个函数都调用了JNINativeInterface中定义的函数，因此可以得出结论，无论是C还是C++，JNIEnv的类型都和JNINativeInterface结构有关，JNINativeInterface的定义如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">libnativehelper/include_jni/jni.h<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNINativeInterface</span> &#123;<br>    ...<br>    <span class="hljs-built_in">jclass</span>      (*FindClass)(JNIEnv*, <span class="hljs-type">const</span> <span class="hljs-type">char</span>*);<br>    ...<br>    <span class="hljs-built_in">jmethodID</span>   (*GetMethodID)(JNIEnv*, jclass, <span class="hljs-type">const</span> <span class="hljs-type">char</span>*, <span class="hljs-type">const</span> <span class="hljs-type">char</span>*);<br>    ...<br>    <span class="hljs-built_in">jfieldID</span>    (*GetFieldID)(JNIEnv*, jclass, <span class="hljs-type">const</span> <span class="hljs-type">char</span>*, <span class="hljs-type">const</span> <span class="hljs-type">char</span>*);<br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>在JNINativeInterface结构体中定义了很多和JNIEnv结构体对应的函数指针，这里只给出了上面JNIEnv结构体中对应的三个函数指针定义。通过这些函数指针的定义，就能够定位到虚拟机中的JNI函数表，从而实现了JNI层在虚拟机中的函数调用，这样JNI层就可以调用Java世界的方法了。</p><h5 id="jfiledID和jmethodID"><a href="#jfiledID和jmethodID" class="headerlink" title="jfiledID和jmethodID"></a>jfiledID和jmethodID</h5><p>在<code>_JNIEnv</code>结构体中定义了很多函数，这些函数都会有不同的返回值，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">libnativehelper/include_jni/jni.h<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_JNIEnv</span> &#123;<br>    <span class="hljs-comment">/* do not rename this; it does not seem to be entirely opaque */</span><br>    <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNINativeInterface</span>* functions;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(__cplusplus)</span><br>    ...<br>    <span class="hljs-function">jmethodID <span class="hljs-title">GetMethodID</span><span class="hljs-params">(jclass clazz, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* sig)</span>  <span class="hljs-comment">// 1</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">GetMethodID</span>(<span class="hljs-keyword">this</span>, clazz, name, sig); &#125;<br>    ...<br>    <span class="hljs-function">jfieldID <span class="hljs-title">GetFieldID</span><span class="hljs-params">(jclass clazz, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* sig)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">GetFieldID</span>(<span class="hljs-keyword">this</span>, clazz, name, sig); &#125;<br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里列举了两个函数，这两个函数的返回值分别为jmethodID和jfieldID。jfieldID和jmethodID分别用来代表Java类中的成员变量和方法。</p><p>注释1处jclass代表Java类，name代表成员方法或者成员变量的名字，sig为这个方法和变量的签名。我们来查看MediaRecorder框架的JNI层是如何使用GetMethodID()和GetFieldID()这两个方法的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/media/jni/android_media_MediaRecorder.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span></span><br><span class="hljs-function"><span class="hljs-title">android_media_MediaRecorder_native_init</span><span class="hljs-params">(JNIEnv *env)</span></span><br><span class="hljs-function"></span>&#123;<br>    jclass clazz;<br><br>    clazz = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;android/media/MediaRecorder&quot;</span>);  <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    fields.context = env-&gt;<span class="hljs-built_in">GetFieldID</span>(clazz, <span class="hljs-string">&quot;mNativeContext&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>);  <span class="hljs-comment">// 2</span><br>    <span class="hljs-keyword">if</span> (fields.context == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    fields.surface = env-&gt;<span class="hljs-built_in">GetFieldID</span>(clazz, <span class="hljs-string">&quot;mSurface&quot;</span>, <span class="hljs-string">&quot;Landroid/view/Surface;&quot;</span>);  <span class="hljs-comment">// 3</span><br>    <span class="hljs-keyword">if</span> (fields.surface == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    jclass surface = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;android/view/Surface&quot;</span>);<br>    <span class="hljs-keyword">if</span> (surface == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    fields.post_event = env-&gt;<span class="hljs-built_in">GetStaticMethodID</span>(clazz, <span class="hljs-string">&quot;postEventFromNative&quot;</span>,<br>                                               <span class="hljs-string">&quot;(Ljava/lang/Object;IIILjava/lang/Object;)V&quot;</span>);  <span class="hljs-comment">// 4</span><br>    <span class="hljs-keyword">if</span> (fields.post_event == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    clazz = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;java/util/ArrayList&quot;</span>);<br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    gArrayListFields.add = env-&gt;<span class="hljs-built_in">GetMethodID</span>(clazz, <span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-string">&quot;(Ljava/lang/Object;)Z&quot;</span>);<br>    gArrayListFields.classId = <span class="hljs-built_in">static_cast</span>&lt;jclass&gt;(env-&gt;<span class="hljs-built_in">NewGlobalRef</span>(clazz));<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处，通过FindClass()来找到Java层的MediaRecorder的Class对象，并赋值给jclass类型的clazz，因此，clazz就是Java层的MediaRecorder在JNI层的代表。</p><p>注释2、3处的代码分别用来找到Java层的MediaRecorder中名为mNativeContext和mSurface的成员变量，并分别赋值给context和surface。</p><p>注释4处获取Java层的MediaRecorder中名为postEventFromNative()的静态方法，并赋值给fields.post_event，其中fields的定义为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/media/jni/android_media_MediaRecorder.cpp<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fields_t</span> &#123;<br>    jfieldID    context;<br>    jfieldID    surface;<br><br>    jmethodID   post_event;<br>&#125;;<br><span class="hljs-type">static</span> <span class="hljs-type">fields_t</span> fields;<br></code></pre></td></tr></table></figure><p>将这些成员变量和方法赋值给jfieldID和jmethodID类型的变量有两个原因：第一是为了效率考虑，如果每次调用相关方法时都要查询方法和变量，显然会效率很低；第二是这些成员变量和方法都是本地引用，在android_media_MediaRecorder_native_init()函数返回时这些本地引用会被自动释放，因此用fields来进行保存，以便后续使用。结合上面两方面原因，在MediaRecorder框架JNI层的初始化方法android_media_MediaRecorder_native_init()中将这些jfieldID和jmethodID类型的变量保存起来，是为了更高效率地供后续使用。</p><h5 id="使用jfiledID和jmethodID"><a href="#使用jfiledID和jmethodID" class="headerlink" title="使用jfiledID和jmethodID"></a>使用jfiledID和jmethodID</h5><p>保存了jfiledID和jmethodID类型的变量，接着怎么使用它们呢？如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/media/jni/android_media_MediaRecorder.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">JNIMediaRecorderListener::notify</span><span class="hljs-params">(<span class="hljs-type">int</span> msg, <span class="hljs-type">int</span> ext1, <span class="hljs-type">int</span> ext2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">ALOGV</span>(<span class="hljs-string">&quot;JNIMediaRecorderListener::notify&quot;</span>);<br><br>    JNIEnv *env = AndroidRuntime::<span class="hljs-built_in">getJNIEnv</span>();<br>    env-&gt;<span class="hljs-built_in">CallStaticVoidMethod</span>(mClass, fields.post_event, mObject, msg, ext1, ext2, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处调用了JNIEnv的CallStaticVoidMethod()函数，其中就传入了fields.post_event，它保存了Java层MediaRecorder的静态方法postEventFromNative()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/media/java/android/media/MediaRecorder.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postEventFromNative</span><span class="hljs-params">(Object mediarecorder_ref,</span><br><span class="hljs-params">                                        <span class="hljs-type">int</span> what, <span class="hljs-type">int</span> arg1, <span class="hljs-type">int</span> arg2, Object obj)</span><br>&#123;<br>    <span class="hljs-type">MediaRecorder</span> <span class="hljs-variable">mr</span> <span class="hljs-operator">=</span> (MediaRecorder)((WeakReference)mediarecorder_ref).get();<br>    <span class="hljs-keyword">if</span> (mr == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (mr.mEventHandler != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> mr.mEventHandler.obtainMessage(what, arg1, arg2, obj);  <span class="hljs-comment">// 1</span><br>        mr.mEventHandler.sendMessage(m);  <span class="hljs-comment">// 2</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处会创建一个消息，注释2处将这个消息发送给MediaRecoder内部类mEventHandler来处理，这样做的目的是将代码逻辑运行在应用程序的主线程中。JNIEnv的CallStaticVoidMethod()函数会调用Java层MediaRecoder的静态方法postEventFromNative(0，也就是说JNIEnv的CallStaticVoidMethod()函数可以访问Java的静态方法，同理如果想要访问Java的方法则可以使用JNIEnv的CallStaticVoidMethod()函数。上面的例子是使用了jmethodID，接着来查看jfieldID是如何应用的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/media/jni/android_media_MediaRecorder.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span></span><br><span class="hljs-function"><span class="hljs-title">android_media_MediaRecorder_prepare</span><span class="hljs-params">(JNIEnv *env, jobject thiz)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">ALOGV</span>(<span class="hljs-string">&quot;prepare&quot;</span>);<br>    sp&lt;MediaRecorder&gt; mr = <span class="hljs-built_in">getMediaRecorder</span>(env, thiz);<br>    <span class="hljs-keyword">if</span> (mr == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">jniThrowException</span>(env, <span class="hljs-string">&quot;java/lang/IllegalStateException&quot;</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    jobject surface = env-&gt;<span class="hljs-built_in">GetObjectField</span>(thiz, fields.surface);  <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">if</span> (surface != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-type">const</span> sp&lt;Surface&gt; native_surface = <span class="hljs-built_in">get_surface</span>(env, surface);<br>        ...<br>    &#125;<br>    <span class="hljs-built_in">process_media_recorder_call</span>(env, mr-&gt;<span class="hljs-built_in">prepare</span>(), <span class="hljs-string">&quot;java/io/IOException&quot;</span>, <span class="hljs-string">&quot;prepare failed.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处调用了JNIEnv的GetObjectField()函数，参数中的fields.surface是jfieldID类型的变量，用来保存Java层MediaRecorder中的成员变量mSurface，mSurface的类型为Surface，这样通过GetObjectField()函数就得到了mSurface在JNI层中对应的jobject类型变量surface。</p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>和Java的引用类型一样，JNI也有引用类型，它们分别是本地引用（Local References）、全局引用（Global References）和弱全局引用（Weak Global References）。</p><h5 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h5><p>JNIEnv提供的函数所返回的引用基本上都是本地引用，因此本地引用也是JNI中最常见的引用类型。本地引用的特点主要有以下几点：</p><ul><li>当native函数返回时，这个本地引用就会被自动释放。</li><li>只在创建它的线程中有效，不能够跨线程使用。</li><li>局部引用是JVM负责的引用类型，受JVM管理。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/media/jni/android_media_MediaRecorder.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span></span><br><span class="hljs-function"><span class="hljs-title">android_media_MediaRecorder_native_init</span><span class="hljs-params">(JNIEnv *env)</span></span><br><span class="hljs-function"></span>&#123;<br>    jclass clazz;<br><br>    clazz = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;android/media/MediaRecorder&quot;</span>);  <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处的FindClass()会返回clazz，这个clazz就是本地引用，它会在android_media_MediaRecorder_native_init()函数调用返回后被自动释放。我们也可以使用JNIEnv的DeleteLocalRef()函数来手动删除本地引用，DeleteLocalRef()函数的使用场景主要是在native函数返回前占用了大量内存，需要调用DeleteLocalRef()函数立即删除本地引用。</p><h5 id="全局引用"><a href="#全局引用" class="headerlink" title="全局引用"></a>全局引用</h5><p>全局引用和本地引用几乎是相反的，它主要有以下特点：</p><ul><li>当native函数返回时不会被自动释放，因此全局引用需要手动来进行释放，并且不会被GC回收。</li><li>全局引用是可以跨线程使用的。</li><li>全局引用不受到JVM管理。</li></ul><p>JNIEnv的NewGlobalRef()函数用来创建全局引用，调用JNIEnv的DeleteGlobalRef()函数来释放全局引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/media/jni/android_media_MediaRecorder.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-title">JNIMediaRecorderListener::JNIMediaRecorderListener</span><span class="hljs-params">(JNIEnv* env, jobject thiz, jobject weak_thiz)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-comment">// Hold onto the MediaRecorder class for use in calling the static method</span><br>    <span class="hljs-comment">// that posts events to the application thread.</span><br>    jclass clazz = env-&gt;<span class="hljs-built_in">GetObjectClass</span>(thiz);  <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;Can&#x27;t find android/media/MediaRecorder&quot;</span>);<br>        <span class="hljs-built_in">jniThrowException</span>(env, <span class="hljs-string">&quot;java/lang/Exception&quot;</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    mClass = (jclass)env-&gt;<span class="hljs-built_in">NewGlobalRef</span>(clazz);  <span class="hljs-comment">// 2</span><br><br>    <span class="hljs-comment">// We use a weak reference so the MediaRecorder object can be garbage collected.</span><br>    <span class="hljs-comment">// The reference is only used as a proxy for callbacks.</span><br>    mObject  = env-&gt;<span class="hljs-built_in">NewGlobalRef</span>(weak_thiz);<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处返回的clazz是本地引用，并传入到注释2处，在注释2处调用JNIEnv的NewGlobalRef()函数将clazz转变为全局引用mClass。那什么时候将全局引用mClass释放呢？我们来查看JNIMediaRecorderListener的析构函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/media/jni/android_media_MediaRecorder.cpp<br>JNIMediaRecorderListener::~<span class="hljs-built_in">JNIMediaRecorderListener</span>()<br>&#123;<br>    <span class="hljs-comment">// remove global references</span><br>    JNIEnv *env = AndroidRuntime::<span class="hljs-built_in">getJNIEnv</span>();<br>    env-&gt;<span class="hljs-built_in">DeleteGlobalRef</span>(mObject);<br>    env-&gt;<span class="hljs-built_in">DeleteGlobalRef</span>(mClass);  <span class="hljs-comment">// 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的析构函数的注释就可以知道，这个析构函数用来释放全局引用，在注释1处释放了全局引用mClass。</p><h5 id="弱全局引用"><a href="#弱全局引用" class="headerlink" title="弱全局引用"></a>弱全局引用</h5><p>弱全局引用是一种特殊的全局引用，它和全局引用的特点相似，不同的是弱全局引用是可以被GC回收的，弱全局引用被GC回收之后会指向NULL。JNIEnv的NewWeakGlobalRef()函数用来创建弱全局引用，调用JNIEnv的DeleteWeakGlobalRef()函数来释放弱全局引用。由于弱全局引用可能被GC回收，因此在使用它之前要先判断它是否被回收了，方法就是使用JNIEnv的IsSameObject()函数来判断。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Launcher启动流程</title>
    <link href="/2024/03/10/Launcher%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/03/10/Launcher%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>SystemServer进程在启动的过程中会启动PackageManagerService，PackageManagerService启动后会将系统中的应用程序安装完成。先前已经启动的AMS会将Launcher启动起来。时序图如下：</p><p><img src="https://s2.loli.net/2023/12/26/tEvs8W5fZHDCV9F.jpg"></p><p>启动Launcher的入口为AMS的systemReady()方法，它在SystemServer的startOtherServices()方法中被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/services/java/com/android/server/SystemServer.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startOtherServices</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> TimingsTraceAndSlog t)</span> &#123;<br>    ...<br>    mActivityManagerService.systemReady(() -&gt; &#123;<br>        Slog.i(TAG, <span class="hljs-string">&quot;Making services ready&quot;</span>);<br>        t.traceBegin(<span class="hljs-string">&quot;StartActivityManagerReadyPhase&quot;</span>);<br>        mSystemServiceManager.startBootPhase(t, SystemService.PHASE_ACTIVITY_MANAGER_READY);<br>        t.traceEnd();<br>        ...<br>    &#125;, t);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ActivityManagerService-systemReady"><a href="#ActivityManagerService-systemReady" class="headerlink" title="ActivityManagerService#systemReady"></a>ActivityManagerService#systemReady</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">systemReady</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Runnable goingCallback, <span class="hljs-meta">@NonNull</span> TimingsTraceAndSlog t)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        ...<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isBootingSystemUser</span> <span class="hljs-operator">=</span> currentUserId == UserHandle.USER_SYSTEM;<br>        <span class="hljs-keyword">if</span> (isBootingSystemUser &amp;&amp; !UserManager.isHeadlessSystemUserMode()) &#123;<br>            t.traceBegin(<span class="hljs-string">&quot;startHomeOnAllDisplays&quot;</span>);<br>            mAtmInternal.startHomeOnAllDisplays(currentUserId, <span class="hljs-string">&quot;systemReady&quot;</span>);<br>            t.traceEnd();<br>        &#125;<br>        ...<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>mAtmInternal.startHomeOnAllDisplays最终调用了RootWindowContainer.startHomeOnAllDisplays()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/services/core/java/com/android/server/wm/RootWindowContainer.java<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">startHomeOnAllDisplays</span><span class="hljs-params">(<span class="hljs-type">int</span> userId, String reason)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">homeStarted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> getChildCount() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">displayId</span> <span class="hljs-operator">=</span> getChildAt(i).mDisplayId;<br>        homeStarted |= startHomeOnDisplay(userId, reason, displayId);<br>    &#125;<br>    <span class="hljs-keyword">return</span> homeStarted;<br>&#125;<br></code></pre></td></tr></table></figure><p>在每个display上显示对应的Home界面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/services/core/java/com/android/server/wm/RootWindowContainer.java<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">startHomeOnDisplay</span><span class="hljs-params">(<span class="hljs-type">int</span> userId, String reason, <span class="hljs-type">int</span> displayId)</span> &#123;<br>    <span class="hljs-keyword">return</span> startHomeOnDisplay(userId, reason, displayId, <span class="hljs-literal">false</span> <span class="hljs-comment">/* allowInstrumenting */</span>, <span class="hljs-literal">false</span> <span class="hljs-comment">/* fromHomeKey */</span>);<br>&#125;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">startHomeOnDisplay</span><span class="hljs-params">(<span class="hljs-type">int</span> userId, String reason, <span class="hljs-type">int</span> displayId, <span class="hljs-type">boolean</span> allowInstrumenting, <span class="hljs-type">boolean</span> fromHomeKey)</span> &#123;<br>    <span class="hljs-comment">// Fallback to top focused display or default display if the displayId is invalid.</span><br>    <span class="hljs-keyword">if</span> (displayId == INVALID_DISPLAY) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Task</span> <span class="hljs-variable">rootTask</span> <span class="hljs-operator">=</span> getTopDisplayFocusedRootTask();<br>        displayId = rootTask != <span class="hljs-literal">null</span> ? rootTask.getDisplayId() : DEFAULT_DISPLAY;<br>    &#125;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">DisplayContent</span> <span class="hljs-variable">display</span> <span class="hljs-operator">=</span> getDisplayContent(displayId);<br>    <span class="hljs-keyword">return</span> display.reduceOnAllTaskDisplayAreas((taskDisplayArea, result) -&gt;<br>                    result | startHomeOnTaskDisplayArea(userId, reason, taskDisplayArea, allowInstrumenting, fromHomeKey), <span class="hljs-literal">false</span> <span class="hljs-comment">/* initValue */</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用startHomeOnTaskDisplayArea()启动每个显示区域（DisplayArea）的Home界面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/services/core/java/com/android/server/wm/RootWindowContainer.java<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">startHomeOnTaskDisplayArea</span><span class="hljs-params">(<span class="hljs-type">int</span> userId, String reason, TaskDisplayArea taskDisplayArea, <span class="hljs-type">boolean</span> allowInstrumenting, <span class="hljs-type">boolean</span> fromHomeKey)</span> &#123;<br>    ...<br><br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">homeIntent</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ActivityInfo</span> <span class="hljs-variable">aInfo</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (taskDisplayArea == getDefaultTaskDisplayArea()<br>                || mWmService.shouldPlacePrimaryHomeOnDisplay(<br>                        taskDisplayArea.getDisplayId(), userId)) &#123;<br>        homeIntent = mService.getHomeIntent();<br>        aInfo = resolveHomeActivity(userId, homeIntent);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (shouldPlaceSecondaryHomeOnDisplayArea(taskDisplayArea)) &#123;<br>        Pair&lt;ActivityInfo, Intent&gt; info = resolveSecondaryHomeActivity(userId, taskDisplayArea);<br>        aInfo = info.first;<br>        homeIntent = info.second;<br>    &#125;<br>    ...<br>        <br>    mService.getActivityStartController().startHomeActivity(homeIntent, aInfo, myReason, taskDisplayArea);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断传入的TaskDisplayArea是否是默认的TaskDisplayArea。如果是，mService.getHomeIntent()获取对应的Intent，这就是传统的Launcher的启动意图。</p><p>在getHomeIntent()方法中创建了Intent，并将mTopAction和mTopData传入。mTopAction的值为Intent.ACTION_MAIN，并且如果系统运行模式不是低级工厂模式，则将Intent的Category设置为Intent.CATEGORY_HOME，最后返回该Intent。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这里主要是获取Launcher的Activity对应的Intent对象以及对应的ActivityInfo</span><br><span class="hljs-comment"> */</span><br>Intent <span class="hljs-title function_">getHomeIntent</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(mTopAction, mTopData != <span class="hljs-literal">null</span> ? Uri.parse(mTopData) : <span class="hljs-literal">null</span>);<br>    intent.setComponent(mTopComponent);<br>    intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);<br>    <span class="hljs-keyword">if</span> (mFactoryTest != FactoryTest.FACTORY_TEST_LOW_LEVEL) &#123;<br>        intent.addCategory(Intent.CATEGORY_HOME);<br>    &#125;<br>    <span class="hljs-keyword">return</span> intent;<br>&#125;<br><br>/frameworks/base/services/core/java/com/android/server/wm/ActivityStartController.java<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这里主要是进行了一通设置后，调用了ActivityStarter对象的execute方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">startHomeActivity</span><span class="hljs-params">(Intent intent, ActivityInfo aInfo, String reason,</span><br><span class="hljs-params">        TaskDisplayArea taskDisplayArea)</span> &#123;<br>    ...<br>    mLastHomeActivityStartResult = obtainStarter(intent, <span class="hljs-string">&quot;startHomeActivity: &quot;</span> + reason)<br>            .setOutActivity(tmpOutRecord)<br>            .setCallingUid(<span class="hljs-number">0</span>)<br>            .setActivityInfo(aInfo)<br>            .setActivityOptions(options.toBundle())<br>            .execute();<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>startHomeActivity()启动的应用程序就是Launcher，因为Launcher的AndroidManifest.xml文件中的intent-filter标签匹配了Action为Intent.ACTION_MAIN，Category为Intent.CATEGORY_HOME。</p><p>execute()处理Activity启动请求的接口，executeRequest()执行一系列权限检查，对于合法的请求才继续。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java<br><span class="hljs-type">int</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    res = executeRequest(mRequest);<br>&#125;<br></code></pre></td></tr></table></figure><p>后面的步骤和《根Activity的启动过程》相同。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>启动流程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Init启动流程</title>
    <link href="/2024/03/10/Init%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/03/10/Init%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="Init介绍"><a href="#Init介绍" class="headerlink" title="Init介绍"></a>Init介绍</h3><p>Init进程是Android系统中<strong>用户空间的第一个进程</strong>（pid&#x3D;1），它是<strong>用户进程的鼻祖</strong>，负责孵化各种属性服务、守护进程也包括Zygote。Init是由多个源文件共同组成的，这些文件位于&#x2F;system&#x2F;core&#x2F;init。</p><h3 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h3><p>Kernel启动找到Init进程后，进程入口为源码init目录下的main.cpp的main()。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp">/system/core/init/main.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>    ...<br>        <br>    <span class="hljs-comment">// init进程创建子进程ueventd，负责设备节点的创建、权限设定等</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(<span class="hljs-built_in">basename</span>(argv[<span class="hljs-number">0</span>]), <span class="hljs-string">&quot;ueventd&quot;</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">ueventd_main</span>(argc, argv);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (argc &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 初始化日志系统</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;subcontext&quot;</span>)) &#123;<br>            android::base::<span class="hljs-built_in">InitLogging</span>(argv, &amp;android::base::KernelLogger);<br>            <span class="hljs-type">const</span> BuiltinFunctionMap&amp; function_map = <span class="hljs-built_in">GetBuiltinFunctionMap</span>();<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">SubcontextMain</span>(argc, argv, &amp;function_map);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;selinux_setup&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">SetupSelinux</span>(argv);  <span class="hljs-comment">// Step2，对Selinux初始化</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;second_stage&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">SecondStageMain</span>(argc, argv);  <span class="hljs-comment">// Step3，解析init.rc文件、提供服务、创建epoll与处理子进程的终止等</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">FirstStageMain</span>(argc, argv);  <span class="hljs-comment">// Step1，挂载相关文件系统</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="FirstStageMain"><a href="#FirstStageMain" class="headerlink" title="FirstStageMain"></a>FirstStageMain</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs cpp">/system/core/init/first_stage_init.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">FirstStageMain</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>    <span class="hljs-comment">// 将各种信号量，如SIGABRT,SIGBUS等的行为设置为SA_RESTART，</span><br>    <span class="hljs-comment">// 一旦监听到这些信号，即执行重启系统</span><br>    <span class="hljs-keyword">if</span> (REBOOT_BOOTLOADER_ON_PANIC) &#123;<br>        <span class="hljs-comment">// 处理Init进程挂掉的情况，会重启bootloader</span><br>        <span class="hljs-built_in">InstallRebootSignalHandlers</span>();  <br>    &#125;<br>    <br>    ...<br>    <br>    <span class="hljs-comment">// Clear the umask.</span><br>    <span class="hljs-built_in">umask</span>(<span class="hljs-number">0</span>);    <br>    <br>    <span class="hljs-comment">// 设置环境变量地址</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">clearenv</span>());<br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">setenv</span>(<span class="hljs-string">&quot;PATH&quot;</span>, _PATH_DEFPATH, <span class="hljs-number">1</span>));<br>    <span class="hljs-comment">// Get the basic filesystem setup we need put together in the initramdisk</span><br>    <span class="hljs-comment">// on / and then we&#x27;ll let the rc file figure out the rest.</span><br>    <span class="hljs-comment">// 挂载tmpfs文件系统</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mount</span>(<span class="hljs-string">&quot;tmpfs&quot;</span>, <span class="hljs-string">&quot;/dev&quot;</span>, <span class="hljs-string">&quot;tmpfs&quot;</span>, MS_NOSUID, <span class="hljs-string">&quot;mode=0755&quot;</span>));<br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;/dev/pts&quot;</span>, <span class="hljs-number">0755</span>));<br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;/dev/socket&quot;</span>, <span class="hljs-number">0755</span>));<br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;/dev/dm-user&quot;</span>, <span class="hljs-number">0755</span>));<br>    <span class="hljs-comment">// 挂载devpts文件系统</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mount</span>(<span class="hljs-string">&quot;devpts&quot;</span>, <span class="hljs-string">&quot;/dev/pts&quot;</span>, <span class="hljs-string">&quot;devpts&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAKE_STR(x) __STRING(x)</span><br>    <span class="hljs-comment">// 挂载proc文件系统</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mount</span>(<span class="hljs-string">&quot;proc&quot;</span>, <span class="hljs-string">&quot;/proc&quot;</span>, <span class="hljs-string">&quot;proc&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;hidepid=2,gid=&quot;</span> <span class="hljs-built_in">MAKE_STR</span>(AID_READPROC)));<br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> MAKE_STR</span><br>    <span class="hljs-comment">// 不要将原始命令行公开给非特权进程,root也只有只读权限</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">chmod</span>(<span class="hljs-string">&quot;/proc/cmdline&quot;</span>, <span class="hljs-number">0440</span>));<br>    std::string cmdline;<br>    android::base::<span class="hljs-built_in">ReadFileToString</span>(<span class="hljs-string">&quot;/proc/cmdline&quot;</span>, &amp;cmdline);<br>    <span class="hljs-comment">// 不要将原始bootconfig公开给非特权进程</span><br>    <span class="hljs-built_in">chmod</span>(<span class="hljs-string">&quot;/proc/bootconfig&quot;</span>, <span class="hljs-number">0440</span>);<br>    std::string bootconfig;<br>    android::base::<span class="hljs-built_in">ReadFileToString</span>(<span class="hljs-string">&quot;/proc/bootconfig&quot;</span>, &amp;bootconfig);<br>    <span class="hljs-type">gid_t</span> groups[] = &#123;AID_READPROC&#125;;<br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">setgroups</span>(<span class="hljs-built_in">arraysize</span>(groups), groups));  <span class="hljs-comment">// 设置用户组</span><br>    <span class="hljs-comment">// 挂载sysfs文件系统</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mount</span>(<span class="hljs-string">&quot;sysfs&quot;</span>, <span class="hljs-string">&quot;/sys&quot;</span>, <span class="hljs-string">&quot;sysfs&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>));<br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mount</span>(<span class="hljs-string">&quot;selinuxfs&quot;</span>, <span class="hljs-string">&quot;/sys/fs/selinux&quot;</span>, <span class="hljs-string">&quot;selinuxfs&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>));<br>    <br>    <span class="hljs-comment">// 提前创建了kmsg设备节点文件，用于输出log信息</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mknod</span>(<span class="hljs-string">&quot;/dev/kmsg&quot;</span>, S_IFCHR | <span class="hljs-number">0600</span>, <span class="hljs-built_in">makedev</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>))); <br>    <br>    <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">constexpr</span> <span class="hljs-params">(WORLD_WRITABLE_KMSG)</span> </span>&#123;<br>        <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mknod</span>(<span class="hljs-string">&quot;/dev/kmsg_debug&quot;</span>, S_IFCHR | <span class="hljs-number">0622</span>, <span class="hljs-built_in">makedev</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)));<br>    &#125;    <br>    <br>    <span class="hljs-comment">// 创建Linux伪随机设备</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mknod</span>(<span class="hljs-string">&quot;/dev/random&quot;</span>, S_IFCHR | <span class="hljs-number">0666</span>, <span class="hljs-built_in">makedev</span>(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>)));<br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mknod</span>(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, S_IFCHR | <span class="hljs-number">0666</span>, <span class="hljs-built_in">makedev</span>(<span class="hljs-number">1</span>, <span class="hljs-number">9</span>)));    <br>    <br>    <span class="hljs-comment">// log wrapper所必需的，需要在ueventd运行之前被调用</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mknod</span>(<span class="hljs-string">&quot;/dev/ptmx&quot;</span>, S_IFCHR | <span class="hljs-number">0666</span>, <span class="hljs-built_in">makedev</span>(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>)));<br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mknod</span>(<span class="hljs-string">&quot;/dev/null&quot;</span>, S_IFCHR | <span class="hljs-number">0666</span>, <span class="hljs-built_in">makedev</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)));    <br>    <br>    <span class="hljs-comment">// 在第一阶段挂tmpfs、mnt/vendor、mount/product分区。</span><br>    <span class="hljs-comment">// 其他的分区在第二阶段通过rc文件解析来加载</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mount</span>(<span class="hljs-string">&quot;tmpfs&quot;</span>, <span class="hljs-string">&quot;/mnt&quot;</span>, <span class="hljs-string">&quot;tmpfs&quot;</span>, MS_NOEXEC | MS_NOSUID | MS_NODEV,<br>                    <span class="hljs-string">&quot;mode=0755,uid=0,gid=1000&quot;</span>));<br>    <span class="hljs-comment">// 创建可供读写的vendor目录</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;/mnt/vendor&quot;</span>, <span class="hljs-number">0755</span>));<br>    <span class="hljs-comment">// /mnt/product is used to mount product-specific partitions that can not be</span><br>    <span class="hljs-comment">// part of the product partition, e.g. because they are mounted read-write.</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;/mnt/product&quot;</span>, <span class="hljs-number">0755</span>));    <br>    <br>    <span class="hljs-comment">// /debug_ramdisk is used to preserve additional files from the debug ramdisk</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mount</span>(<span class="hljs-string">&quot;tmpfs&quot;</span>, <span class="hljs-string">&quot;/debug_ramdisk&quot;</span>, <span class="hljs-string">&quot;tmpfs&quot;</span>, MS_NOEXEC | MS_NOSUID | MS_NODEV,<br>                    <span class="hljs-string">&quot;mode=0755,uid=0,gid=0&quot;</span>));   <br>    <br>    <span class="hljs-comment">// /second_stage_resources is used to preserve files from first to second</span><br>    <span class="hljs-comment">// stage init</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mount</span>(<span class="hljs-string">&quot;tmpfs&quot;</span>, kSecondStageRes, <span class="hljs-string">&quot;tmpfs&quot;</span>, MS_NOEXEC | MS_NOSUID | MS_NODEV,<br>                    <span class="hljs-string">&quot;mode=0755,uid=0,gid=0&quot;</span>))   <br>    <br>        <span class="hljs-comment">// First stage init stores Mainline sepolicy here.</span><br>    <span class="hljs-built_in">CHECKCALL</span>(<span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;/dev/selinux&quot;</span>, <span class="hljs-number">0744</span>));<br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> CHECKCALL</span><br>    <br>    <span class="hljs-comment">// 将内核的stdin/stdout/stderr全部重定向/dev/null，关闭默认控制台输出</span><br>    <span class="hljs-built_in">SetStdioToDevNull</span>(argv);<br>    <span class="hljs-comment">// tmpfs已经挂载到/dev上，同时也挂载了/dev/kmsg，可以和外界沟通了       </span><br>    <span class="hljs-comment">// 初始化日志系统</span><br>    <span class="hljs-built_in">InitKernelLogging</span>(argv);   <br>    <br>    <span class="hljs-comment">//检测上面的操作是否发生了错误</span><br>    <span class="hljs-keyword">if</span> (!errors.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; [error_string, error_errno] : errors) &#123;<br>            <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; error_string &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-built_in">strerror</span>(error_errno);<br>        &#125;<br>        <span class="hljs-built_in">LOG</span>(FATAL) &lt;&lt; <span class="hljs-string">&quot;Init encountered errors starting first stage, aborting&quot;</span>;<br>    &#125;   <br>    <br>    <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;init first stage started!&quot;</span>;  <br>    <br>    ...    <br>   <br>    <span class="hljs-comment">// 如果该文件存在且设备已经解锁，则允许adb root指令(userdebug sepolicy)</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">access</span>(<span class="hljs-string">&quot;/force_debuggable&quot;</span>, F_OK) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">constexpr</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> adb_debug_prop_src[] = <span class="hljs-string">&quot;/adb_debug.prop&quot;</span>;<br>        <span class="hljs-keyword">constexpr</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> userdebug_plat_sepolicy_cil_src[] = <span class="hljs-string">&quot;/userdebug_plat_sepolicy.cil&quot;</span>;<br>        std::error_code ec;  <span class="hljs-comment">// to invoke the overloaded copy_file() that won&#x27;t throw.</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">access</span>(adb_debug_prop_src, F_OK) == <span class="hljs-number">0</span> &amp;&amp;<br>            !fs::<span class="hljs-built_in">copy_file</span>(adb_debug_prop_src, kDebugRamdiskProp, ec)) &#123;<br>            <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; <span class="hljs-string">&quot;Can&#x27;t copy &quot;</span> &lt;&lt; adb_debug_prop_src &lt;&lt; <span class="hljs-string">&quot; to &quot;</span> &lt;&lt; kDebugRamdiskProp<br>                         &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; ec.<span class="hljs-built_in">message</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">access</span>(userdebug_plat_sepolicy_cil_src, F_OK) == <span class="hljs-number">0</span> &amp;&amp;<br>            !fs::<span class="hljs-built_in">copy_file</span>(userdebug_plat_sepolicy_cil_src, kDebugRamdiskSEPolicy, ec)) &#123;<br>            <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; <span class="hljs-string">&quot;Can&#x27;t copy &quot;</span> &lt;&lt; userdebug_plat_sepolicy_cil_src &lt;&lt; <span class="hljs-string">&quot; to &quot;</span><br>                         &lt;&lt; kDebugRamdiskSEPolicy &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; ec.<span class="hljs-built_in">message</span>();<br>        &#125;<br>        <span class="hljs-comment">// setenv for second-stage init to read above kDebugRamdisk* files.</span><br>        <span class="hljs-built_in">setenv</span>(<span class="hljs-string">&quot;INIT_FORCE_DEBUGGABLE&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-number">1</span>);<br>    &#125;    <br>    <br>    ...<br>    <br>    <span class="hljs-comment">// 挂载system、cache、data等系统分区</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">DoFirstStageMount</span>(!created_devices)) &#123;<br>        <span class="hljs-built_in">LOG</span>(FATAL) &lt;&lt; <span class="hljs-string">&quot;Failed to mount required partitions early ...&quot;</span>;<br>    &#125; <br>    <br>    ... <br>   <br>    <span class="hljs-comment">// 进入下一步，SetupSelinux</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* path = <span class="hljs-string">&quot;/system/bin/init&quot;</span>;  <span class="hljs-comment">// 找到Init的二进制文件目录</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* args[] = &#123;path, <span class="hljs-string">&quot;selinux_setup&quot;</span>, <span class="hljs-literal">nullptr</span>&#125;;<br>    <span class="hljs-keyword">auto</span> fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/kmsg&quot;</span>, O_WRONLY | O_CLOEXEC);<br>    <span class="hljs-built_in">dup2</span>(fd, STDOUT_FILENO);<br>    <span class="hljs-built_in">dup2</span>(fd, STDERR_FILENO);<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-built_in">execv</span>(path, <span class="hljs-built_in">const_cast</span>&lt;<span class="hljs-type">char</span>**&gt;(args));  <span class="hljs-comment">// 通过execv来启动Init进程</span><br>    <br>    <span class="hljs-comment">// execv() only returns if an error happened, in which case we</span><br>    <span class="hljs-comment">// panic and never fall through this conditional.</span><br>    <span class="hljs-built_in">PLOG</span>(FATAL) &lt;&lt; <span class="hljs-string">&quot;execv(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="hljs-string">&quot;\&quot;) failed&quot;</span>;   <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要通过mount挂载对应的文件系统，mkdir创建对应的文件目录，并配置相应的访问权限。</p><p>这些文件只是在应用运行的时候存在，一旦应用运行结束就会随着应用一起消失。</p><p>挂载的文件系统主要有四类：</p><ol><li><code>tmpfs</code>：一种虚拟内存文件系统，它会将所有的文件存储在虚拟内存中。由于tmpfs是驻留在RAM的，因此它的内容是不持久的。断电后，tmpfs的内容就消失了。</li><li><code>devpts</code>：为伪终端提供了一个标准接口，它的标准挂接点是&#x2F;dev&#x2F;pts。只要pty的主复合设备&#x2F;dev&#x2F;ptmx被打开，就会在&#x2F;dev&#x2F;pts下动态地创建一个新的pty设备文件。</li><li><code>proc</code>：也是一个虚拟文件系统，它可以看作是内核内部数据结构的接口，通过它我们可以获得系统的信息，同时也能够在运行时修改特定的内核参数。</li><li><code>sysfs</code>：与proc文件系统类似，也是一个不占有任何磁盘空间的虚拟文件系统。它通常被挂接在&#x2F;sys目录下。作用是把系统的设备和总线按层次组织起来，使得它们可以在用户空间读取，用来向用户空间导出内核的数据结构和属性。</li></ol><p>在FirstStageMain还会通过InitKernelLogging(argv)来初始化log日志系统。此时Android还没有自己的系统日志，采用kernel的log系统，打开的设备节点<code>/dev/kmsg</code>， 可通过<code>cat /dev/kmsg</code>来获取内核log。</p><p>最后会通过execv方法传递对应的path与下一阶段的参数selinux_setup。</p><h4 id="SetupSelinux"><a href="#SetupSelinux" class="headerlink" title="SetupSelinux"></a>SetupSelinux</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">/system/core/init/selinux.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SetupSelinux</span><span class="hljs-params">(<span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>    <br>    ...<br>        <br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* path = <span class="hljs-string">&quot;/system/bin/init&quot;</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* args[] = &#123;path, <span class="hljs-string">&quot;second_stage&quot;</span>, <span class="hljs-literal">nullptr</span>&#125;;<br>    <span class="hljs-built_in">execv</span>(path, <span class="hljs-built_in">const_cast</span>&lt;<span class="hljs-type">char</span>**&gt;(args));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>SetupSelinux方法中加载了selinux的策略并启动selinux的强制模式，然后启动了Init进程。Init的二进制文件存放在机器的&#x2F;system&#x2F;bin&#x2F;init，然后通过execv启动Init进程第二阶段。</p><h4 id="SecondStageMain"><a href="#SecondStageMain" class="headerlink" title="SecondStageMain"></a>SecondStageMain</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SecondStageMain</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>    ...<br><br>    <span class="hljs-built_in">SetStdioToDevNull</span>(argv);<br>    <span class="hljs-comment">// 初始化本阶段内核日志</span><br>    <span class="hljs-built_in">InitKernelLogging</span>(argv);<br>    <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;init second stage started!&quot;</span>;<br><br>    ...<br><br>    <span class="hljs-comment">// 禁止OOM Killer杀死该进程以及它的子进程</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> result =<br>                <span class="hljs-built_in">WriteFile</span>(<span class="hljs-string">&quot;/proc/1/oom_score_adj&quot;</span>, <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;%d&quot;</span>, DEFAULT_OOM_SCORE_ADJUST));<br>        !result.<span class="hljs-built_in">ok</span>()) &#123;<br>        <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;Unable to write &quot;</span> &lt;&lt; DEFAULT_OOM_SCORE_ADJUST<br>                   &lt;&lt; <span class="hljs-string">&quot; to /proc/1/oom_score_adj: &quot;</span> &lt;&lt; result.<span class="hljs-built_in">error</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 设置所有进程都能访问的会话密钥</span><br>    <span class="hljs-built_in">keyctl_get_keyring_ID</span>(KEY_SPEC_SESSION_KEYRING, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 创建/dev/.booting文件，一个标记，表示booting进行中</span><br>    <span class="hljs-built_in">close</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/.booting&quot;</span>, O_WRONLY | O_CREAT | O_CLOEXEC, <span class="hljs-number">0000</span>));<br><br>    ...<br>        <br>    <span class="hljs-comment">// 初始化属性服务，并从指定文件读取属性</span><br>    <span class="hljs-comment">// 使用mmap共享内存，/dev/__properties__/property_info</span><br>    <span class="hljs-built_in">PropertyInit</span>();<br><br>    ...<br><br>    <span class="hljs-comment">// 进行Selinux第二阶段，并恢复一些文件安全上下文</span><br>    <span class="hljs-built_in">SelinuxSetupKernelLogging</span>();<br>    <span class="hljs-built_in">SelabelInitialize</span>();<br>    <span class="hljs-built_in">SelinuxRestoreContext</span>();<br><br>    <span class="hljs-comment">// 初始化epoll，android这里对epoll做了一层封装</span><br>    Epoll epoll;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> result = epoll.<span class="hljs-built_in">Open</span>(); !result.<span class="hljs-built_in">ok</span>()) &#123;<br>        <span class="hljs-built_in">PLOG</span>(FATAL) &lt;&lt; result.<span class="hljs-built_in">error</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 使用epoll对Init子进程的信号进行监听</span><br>    <span class="hljs-comment">// epoll中注册signalfd，主要是为了创建handler处理子进程终止信号</span><br>    <span class="hljs-built_in">InstallSignalFdHandler</span>(&amp;epoll);<br>    <span class="hljs-built_in">InstallInitNotifier</span>(&amp;epoll);<br>    <span class="hljs-comment">// 开启属性服务，并注册到epoll中</span><br>    <span class="hljs-built_in">StartPropertyService</span>(&amp;property_fd);<br><br>    ...<br><br>    <span class="hljs-comment">// 会执行/system/bin/init subcontext</span><br>    <span class="hljs-built_in">InitializeSubcontext</span>();<br><br>    <span class="hljs-comment">// 为解析init.rc中的action和service做准备</span><br>    ActionManager&amp; am = ActionManager::<span class="hljs-built_in">GetInstance</span>();<br>    ServiceList&amp; sm = ServiceList::<span class="hljs-built_in">GetInstance</span>();<br><br>    <span class="hljs-comment">// 加载系统启动脚本init.rc</span><br>    <span class="hljs-built_in">LoadBootScripts</span>(am, sm);<br><br>    ...<br><br>    <span class="hljs-comment">// cgroups用于控制资源，cpuset相关</span><br>    am.<span class="hljs-built_in">QueueBuiltinAction</span>(SetupCgroupsAction, <span class="hljs-string">&quot;SetupCgroups&quot;</span>);<br>    am.<span class="hljs-built_in">QueueBuiltinAction</span>(SetKptrRestrictAction, <span class="hljs-string">&quot;SetKptrRestrict&quot;</span>);<br>    am.<span class="hljs-built_in">QueueBuiltinAction</span>(TestPerfEventSelinuxAction, <span class="hljs-string">&quot;TestPerfEventSelinux&quot;</span>);<br>    am.<span class="hljs-built_in">QueueBuiltinAction</span>(ConnectEarlyStageSnapuserdAction, <span class="hljs-string">&quot;ConnectEarlyStageSnapuserd&quot;</span>);<br>    <span class="hljs-comment">// 执行rc文件中触发器为on early-init的语句</span><br>    am.<span class="hljs-built_in">QueueEventTrigger</span>(<span class="hljs-string">&quot;early-init&quot;</span>);<br><br>    <span class="hljs-comment">// 等冷插拔设备初始化完成</span><br>    am.<span class="hljs-built_in">QueueBuiltinAction</span>(wait_for_coldboot_done_action, <span class="hljs-string">&quot;wait_for_coldboot_done&quot;</span>);<br>    <span class="hljs-comment">// ... so that we can start queuing up actions that require stuff from /dev.</span><br>    am.<span class="hljs-built_in">QueueBuiltinAction</span>(SetMmapRndBitsAction, <span class="hljs-string">&quot;SetMmapRndBits&quot;</span>);<br>    <span class="hljs-comment">// 设备组合键的初始化操作</span><br>    Keychords keychords;<br>    am.<span class="hljs-built_in">QueueBuiltinAction</span>(<br>            [&amp;epoll, &amp;keychords](<span class="hljs-type">const</span> BuiltinArguments&amp; args) -&gt; Result&lt;<span class="hljs-type">void</span>&gt; &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; svc : ServiceList::<span class="hljs-built_in">GetInstance</span>()) &#123;<br>                    keychords.<span class="hljs-built_in">Register</span>(svc-&gt;<span class="hljs-built_in">keycodes</span>());<br>                &#125;<br>                keychords.<span class="hljs-built_in">Start</span>(&amp;epoll, HandleKeychord);<br>                <span class="hljs-keyword">return</span> &#123;&#125;;<br>            &#125;,<br>            <span class="hljs-string">&quot;KeychordInit&quot;</span>);<br><br>    <span class="hljs-comment">// 执行rc文件中触发器为on init的语句</span><br>    am.<span class="hljs-built_in">QueueEventTrigger</span>(<span class="hljs-string">&quot;init&quot;</span>);<br><br>    <span class="hljs-comment">// 当设备处于充电模式时，不需要mount文件系统或者启动系统服务。</span><br>    <span class="hljs-comment">// 充电模式下，将charger设为执行队列，否则把late-init设为执行队列</span><br>    std::string bootmode = <span class="hljs-built_in">GetProperty</span>(<span class="hljs-string">&quot;ro.bootmode&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">if</span> (bootmode == <span class="hljs-string">&quot;charger&quot;</span>) &#123;<br>        am.<span class="hljs-built_in">QueueEventTrigger</span>(<span class="hljs-string">&quot;charger&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        am.<span class="hljs-built_in">QueueEventTrigger</span>(<span class="hljs-string">&quot;late-init&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 基于属性当前状态，运行所有的属性触发器</span><br>    am.<span class="hljs-built_in">QueueBuiltinAction</span>(queue_property_triggers_action, <span class="hljs-string">&quot;queue_property_triggers&quot;</span>);<br><br>    <span class="hljs-comment">// Restore prio before main loop</span><br>    <span class="hljs-built_in">setpriority</span>(PRIO_PROCESS, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">// 进入死循环状态</span><br>        <span class="hljs-keyword">auto</span> epoll_timeout = std::optional&lt;std::chrono::milliseconds&gt;&#123;kDiagnosticTimeout&#125;;<br><br>        <span class="hljs-keyword">auto</span> shutdown_command = shutdown_state.<span class="hljs-built_in">CheckShutdown</span>();<br>        <span class="hljs-keyword">if</span> (shutdown_command) &#123;<br>            <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;Got shutdown_command &#x27;&quot;</span> &lt;&lt; *shutdown_command<br>                      &lt;&lt; <span class="hljs-string">&quot;&#x27; Calling HandlePowerctlMessage()&quot;</span>;<br>            <span class="hljs-built_in">HandlePowerctlMessage</span>(*shutdown_command);<br>            shutdown_state.<span class="hljs-built_in">set_do_shutdown</span>(<span class="hljs-literal">false</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!(prop_waiter_state.<span class="hljs-built_in">MightBeWaiting</span>() || Service::<span class="hljs-built_in">is_exec_service_running</span>())) &#123;<br>            am.<span class="hljs-built_in">ExecuteOneCommand</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">IsShuttingDown</span>()) &#123;<br>            <span class="hljs-comment">// 重启死掉的子进程</span><br>            <span class="hljs-keyword">auto</span> next_process_action_time = <span class="hljs-built_in">HandleProcessActions</span>();<br><br>            <span class="hljs-comment">// If there&#x27;s a process that needs restarting, wake up in time for that.</span><br>            <span class="hljs-keyword">if</span> (next_process_action_time) &#123;<br>                epoll_timeout = std::chrono::<span class="hljs-built_in">ceil</span>&lt;std::chrono::milliseconds&gt;(<br>                        *next_process_action_time - boot_clock::<span class="hljs-built_in">now</span>());<br>                <span class="hljs-keyword">if</span> (*epoll_timeout &lt; <span class="hljs-number">0</span>ms) epoll_timeout = <span class="hljs-number">0</span>ms;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!(prop_waiter_state.<span class="hljs-built_in">MightBeWaiting</span>() || Service::<span class="hljs-built_in">is_exec_service_running</span>())) &#123;<br>            <span class="hljs-comment">// If there&#x27;s more work to do, wake up again immediately.</span><br>            <span class="hljs-keyword">if</span> (am.<span class="hljs-built_in">HasMoreCommands</span>()) epoll_timeout = <span class="hljs-number">0</span>ms;<br>        &#125;<br><br>        <span class="hljs-comment">// 循环等待事件发生</span><br>        <span class="hljs-keyword">auto</span> pending_functions = epoll.<span class="hljs-built_in">Wait</span>(epoll_timeout);<br>        <span class="hljs-keyword">if</span> (!pending_functions.<span class="hljs-built_in">ok</span>()) &#123;<br>            <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; pending_functions.<span class="hljs-built_in">error</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!pending_functions-&gt;<span class="hljs-built_in">empty</span>()) &#123;<br>            ...<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>LoadBootScripts()会加载init.rc配置文件，之后加载&#x2F;{system, vendor, odm}&#x2F;etc&#x2F;init&#x2F;下（Android设备中的目录）的所有rc配置文件。</p><h4 id="LoadBootScripts"><a href="#LoadBootScripts" class="headerlink" title="LoadBootScripts"></a>LoadBootScripts</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp">/system/core/init/init.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">LoadBootScripts</span><span class="hljs-params">(ActionManager&amp; action_manager, ServiceList&amp; service_list)</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化ServiceParse、ActionParser、ImportParser三个解析器</span><br>    Parser parser = <span class="hljs-built_in">CreateParser</span>(action_manager, service_list);<br><br>    std::string bootscript = <span class="hljs-built_in">GetProperty</span>(<span class="hljs-string">&quot;ro.boot.init_rc&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">if</span> (bootscript.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-comment">// 解析init.rc文件</span><br>        parser.<span class="hljs-built_in">ParseConfig</span>(<span class="hljs-string">&quot;/system/etc/init/hw/init.rc&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!parser.<span class="hljs-built_in">ParseConfig</span>(<span class="hljs-string">&quot;/system/etc/init&quot;</span>)) &#123;<br>            late_import_paths.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-string">&quot;/system/etc/init&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// late_import is available only in Q and earlier release. As we don&#x27;t</span><br>        <span class="hljs-comment">// have system_ext in those versions, skip late_import for system_ext.</span><br>        parser.<span class="hljs-built_in">ParseConfig</span>(<span class="hljs-string">&quot;/system_ext/etc/init&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!parser.<span class="hljs-built_in">ParseConfig</span>(<span class="hljs-string">&quot;/vendor/etc/init&quot;</span>)) &#123;<br>            late_import_paths.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-string">&quot;/vendor/etc/init&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!parser.<span class="hljs-built_in">ParseConfig</span>(<span class="hljs-string">&quot;/odm/etc/init&quot;</span>)) &#123;<br>            late_import_paths.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-string">&quot;/odm/etc/init&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!parser.<span class="hljs-built_in">ParseConfig</span>(<span class="hljs-string">&quot;/product/etc/init&quot;</span>)) &#123;<br>            late_import_paths.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-string">&quot;/product/etc/init&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        parser.<span class="hljs-built_in">ParseConfig</span>(bootscript);<br>    &#125;<br>&#125;<br><br><span class="hljs-function">Parser <span class="hljs-title">CreateParser</span><span class="hljs-params">(ActionManager&amp; action_manager, ServiceList&amp; service_list)</span> </span>&#123;<br>    Parser parser;<br><br>    <span class="hljs-comment">// 加载解析Service语句的解析器</span><br>    parser.<span class="hljs-built_in">AddSectionParser</span>(<span class="hljs-string">&quot;service&quot;</span>, std::<span class="hljs-built_in">make_unique</span>&lt;ServiceParser&gt;(<br>        &amp;service_list, <span class="hljs-built_in">GetSubcontext</span>(), std::<span class="hljs-literal">nullopt</span>));<br>    <span class="hljs-comment">// 加载解析on语句的解析器</span><br>    parser.<span class="hljs-built_in">AddSectionParser</span>(<span class="hljs-string">&quot;on&quot;</span>, std::<span class="hljs-built_in">make_unique</span>&lt;ActionParser&gt;(&amp;action_manager, <span class="hljs-built_in">GetSubcontext</span>()));<br>    <span class="hljs-comment">// 加载解析import语句的解析器</span><br>    parser.<span class="hljs-built_in">AddSectionParser</span>(<span class="hljs-string">&quot;import&quot;</span>, std::<span class="hljs-built_in">make_unique</span>&lt;ImportParser&gt;(&amp;parser));<br><br>    <span class="hljs-keyword">return</span> parser;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="init-rc"><a href="#init-rc" class="headerlink" title="init.rc"></a>init.rc</h4><p>init.rc有两个，分别位于：</p><p>&#x2F;system&#x2F;core&#x2F;rootdir&#x2F;init.rc，正常启动</p><p>&#x2F;bootable&#x2F;recovery&#x2F;etc&#x2F;init.rc，刷机</p><h5 id="import"><a href="#import" class="headerlink" title="import"></a>import</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> <span class="hljs-regexp">/init.environ.rc/</span>/ 导入全局环境变量<br><span class="hljs-keyword">import</span> <span class="hljs-regexp">/system/</span>etc<span class="hljs-regexp">/init/</span>hw<span class="hljs-regexp">/init.usb.rc/</span>/ adb服务、USB相关内容的定义<br><span class="hljs-keyword">import</span> <span class="hljs-regexp">/init.$&#123;ro.hardware&#125;.rc/</span>/ 硬件相关的初始化，一般是厂商定制<br><span class="hljs-keyword">import</span> <span class="hljs-regexp">/vendor/</span>etc<span class="hljs-regexp">/init/</span>hw/init.$&#123;ro.hardware&#125;.rc<br><span class="hljs-keyword">import</span> <span class="hljs-regexp">/system/</span>etc<span class="hljs-regexp">/init/</span>hw/init.usb.configfs.rc<br><span class="hljs-keyword">import</span> <span class="hljs-regexp">/system/</span>etc<span class="hljs-regexp">/init/</span>hw<span class="hljs-regexp">/init.$&#123;ro.zygote&#125;.rc/</span>/ 定义Zygote服务<br></code></pre></td></tr></table></figure><p>init.rc中会根据系统的不同属性来引入不同的zygote脚本。</p><ul><li>init.zygote32.rc：zygote进程对应的执行程序是app_process（纯32bit模式）</li><li>init.zygote64.rc：zygote进程对应的执行程序是app_process（纯64bit模式）</li><li>init.zygote64_32.rc：启动两个zygote进程（zygote和zygote_secondary），对应的执行程序分别是app_process64（主模式），app_process32</li></ul><h5 id="on-early-init"><a href="#on-early-init" class="headerlink" title="on early-init"></a>on early-init</h5><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">on</span> early<span class="hljs-params">-init</span><br><span class="hljs-params">...</span><br>start ueventd<br>exec_start apexd<span class="hljs-params">-bootstrap</span><br><span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><p>early-init中启动了ueventd服务和apex相关服务。</p><ul><li><p>ueventd服务</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">service ueventd    <span class="hljs-comment">//ueventd服务的可执行文件的路径为/system/bin/ueventd</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-symbol">core</span>    //<span class="hljs-symbol">ueventd</span>归属于<span class="hljs-symbol">core</span> <span class="hljs-symbol">class,</span>同样归属于<span class="hljs-symbol">core</span> <span class="hljs-symbol">class</span>的还有<span class="hljs-symbol">adbd</span>、<span class="hljs-symbol">console</span>等服务<br>    <span class="hljs-symbol">critical</span> //表明这个<span class="hljs-symbol">Service</span>对设备至关重要，如果<span class="hljs-symbol">Service</span>在四分钟内退出超过<span class="hljs-symbol">4</span>次，则设备将重启进入恢复模式。<br>    <span class="hljs-symbol">seclabel</span> <span class="hljs-symbol">u:<span class="hljs-symbol">r</span>:<span class="hljs-symbol">ueventd</span>:<span class="hljs-symbol">s0</span></span> //<span class="hljs-symbol">selinux</span>相关的配置<br>    <span class="hljs-symbol">shutdown</span> <span class="hljs-symbol">critical</span>  //<span class="hljs-symbol">ueventd</span>服务关闭行为<br></code></pre></td></tr></table></figure></li><li><p>early-init触发时机</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-regexp">/system/</span>core<span class="hljs-operator">/</span><span class="hljs-keyword">init</span>.<span class="hljs-keyword">init</span>.cpp<span class="hljs-variable">$SecondStageMain</span><br><br>am.<span class="hljs-type">QueueEventTrigger</span>(<span class="hljs-string">&quot;early-init&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h5 id="on-init"><a href="#on-init" class="headerlink" title="on init"></a>on init</h5><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">on</span> init<br><span class="hljs-params">...</span><br>start logd<span class="hljs-comment">// 用于保存Android运行期间的日志</span><br><span class="hljs-params">...</span><br>start servicemanager<span class="hljs-comment">// Android系统服务管理者，负责查询和注册服务</span><br><span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><h5 id="on-late-init"><a href="#on-late-init" class="headerlink" title="on late-init"></a>on late-init</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">on</span> late-init<br># 启动vold服务（管理和控制Android平台外部存储设备，包括SD插拔、挂载、卸载、格式化等）<br><span class="hljs-keyword">trigger</span> early-fs<br><span class="hljs-keyword">trigger</span> factory-fs<br>    <span class="hljs-keyword">trigger</span> fs<br>    <span class="hljs-keyword">trigger</span> post-fs<br>    <span class="hljs-keyword">trigger</span> late-fs<br><br>    # 挂载/data，启动apexd服务<br>    <span class="hljs-keyword">trigger</span> post-fs-data<br><br>    # Should be <span class="hljs-keyword">before</span> netd, but <span class="hljs-keyword">after</span> apex, properties <span class="hljs-keyword">and</span> logging <span class="hljs-keyword">is</span> available.<br>    <span class="hljs-keyword">trigger</span> load_bpf_programs<br><br>    # 启动zygote服务，在启动zygote服务之前会先启动netd服务（专门负责网络管理和控制的后台守护进程）<br>    <span class="hljs-keyword">trigger</span> zygote-<span class="hljs-keyword">start</span><br><br>    # 移除/dev/.booting文件<br>    <span class="hljs-keyword">trigger</span> firmware_mounts_complete<br><br>    <span class="hljs-keyword">trigger</span> early-boot<br>    <span class="hljs-keyword">trigger</span> boot<br>    <span class="hljs-keyword">trigger</span> mmi<br></code></pre></td></tr></table></figure><ul><li><p>zygote</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/<span class="hljs-keyword">system</span>/core/rootdir/init.zygote64.rc<br><br>service zygote /<span class="hljs-keyword">system</span>/bin/app_process64 -Xzygote /<span class="hljs-keyword">system</span>/bin <span class="hljs-comment">--zygote --start-system-server</span><br>    <span class="hljs-keyword">class</span> main<br>    priority <span class="hljs-number">-20</span><br>    <span class="hljs-keyword">user</span> root<br>    <span class="hljs-keyword">group</span> root readproc reserved_disk<br>    socket zygote stream <span class="hljs-number">660</span> root <span class="hljs-keyword">system</span><br>    socket usap_pool_primary stream <span class="hljs-number">660</span> root <span class="hljs-keyword">system</span><br>    onrestart exec_background - <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> <span class="hljs-comment">-- /system/bin/vdc volume abort_fuse</span><br>    onrestart <span class="hljs-keyword">write</span> /sys/power/state <span class="hljs-keyword">on</span><br>    onrestart <span class="hljs-keyword">restart</span> audioserver<br>    onrestart <span class="hljs-keyword">restart</span> cameraserver<br>    onrestart <span class="hljs-keyword">restart</span> media<br>    onrestart <span class="hljs-keyword">restart</span> media.tuner<br>    onrestart <span class="hljs-keyword">restart</span> netd<br>    onrestart <span class="hljs-keyword">restart</span> wificond<br>    task_profiles ProcessCapacityHigh<br>    critical <span class="hljs-keyword">window</span>=$&#123;zygote.critical_window.minute:-<span class="hljs-keyword">off</span>&#125; target=zygote-fatal<br></code></pre></td></tr></table></figure><p>该文件通过service语句来创建zygote进程，该进程的代码位于&#x2F;system&#x2F;bin&#x2F;app_process目录下。当相关的触发器被触发后，便会启动zygote进程。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>Init入口中包含5个分支：</p><ul><li>ueventd：实际上就是Init程序的软链接，在init.rc的early-init阶段启动</li><li>selinux_setup：FitstStageMain中启动</li><li>subcontext：SecondStageMain中启动</li><li>second_stage：在selinux_setup启动完之后执行</li><li>first_stage：默认首先执行</li></ul></li><li><p>Init进程第一阶段做的主要工作是挂载分区，创建设备节点和一些关键目录，初始化日志输出系统，启用SELinux安全策略。</p><p>Init进程第二阶段的主要工作是初始化属性系统，解析SELinux的匹配规则，处理子进程终止信号，启动系统属性服务。</p><p>Init进程第三阶段主要是解析init.rc来启动其他进程，进入死循环，进行子进程实时监控。</p></li><li><p>在SecondStage，首先加载init.rc配置，然后再依次在Android设备中查找以下三种配置，并加载：</p><ul><li>&#x2F;system&#x2F;etc&#x2F;init&#x2F;</li><li>&#x2F;vendor&#x2F;etc&#x2F;init&#x2F;</li><li>&#x2F;odm&#x2F;etc&#x2F;init&#x2F;</li></ul></li><li><p>Android根文件系统的镜像中不存在&#x2F;dev目录，该目录是Init进程启动后动态创建的。为此，Init进程创建子进程ueventd，并将创建设备节点文件的工作托付给ueventd。</p><p>ueventd通过两种方式创建设备节点文件：</p><ul><li><p>冷插拔（Cold Plug）</p><p>以预先定义的设备信息为基础，当ueventd启动后，统一创建设备节点文件。这一类设备节点文件也被称为静态节点文件。</p></li><li><p>热插拔（Hot Plug）</p><p>在系统运行中，当有设备插入USB端口时，ueventd就会接收到这一事件，为插入的设备动态创建设备节点文件。这一类设备节点文件也被称为动态节点文件。</p></li></ul></li><li><p>signal：每个进程在处理其他进程发送的signal信号时都需要先注册，当进程的运行状态改变或终止时会产生某种signal信号，Init进程是所有用户空间进程的父进程，当其子进程终止时产生signal信号，以便父进程进行处理，主要是为了防止子进程成为僵尸进程。</p><p>僵尸进程：父进程使用fork创建子进程，子进程终止后，如果父进程不知道子进程已经终止的话，这时子进程虽然已经退出，但是在系统进程表中还为它保留了一些信息（如进程号、运行时间、退出状态等），这个子进程就是僵尸进程。系统进程表是一项有限的资源，如果它被僵尸进程耗尽的话，系统可能会无法创建新的进程。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>启动流程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ContentProvider的启动过程</title>
    <link href="/2024/03/10/ContentProvider%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/03/10/ContentProvider%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>ContentProvider，即内容提供者，主要用于进程内和进程间的数据共享。</p><p>当ContentProvider所在进程启动时，ContentProvider会同时启动并被发布到AMS中。需要注意的是，这时ContentProvider的onCreate()先于Application的onCreate()执行。</p><p>外界无法直接访问ContentProvider，只能通过AMS根据Uri获取对应ContentProvider的Binder接口IContentProvider，然后再通过IContentProvider来访问ContentProvider中的数据源。访问ContentProvider需要通过ContentResolver，ContentResolver是一个抽象类，通过Context的**getContentResolver()**方法获取。真正实现是ApplicationContentResolver（ContextImpl的内部类）。当ContentProvider所在的进程未启动时，第一次访问ContentResolver的方法时，就会启动该进程和ContentProvider。</p><p>通过增删改查四个方法的任何一个都可以触发ContentProvider的启动。</p><h4 id="query方法到AMS的调用过程"><a href="#query方法到AMS的调用过程" class="headerlink" title="query方法到AMS的调用过程"></a>query方法到AMS的调用过程</h4><p><img src="https://s2.loli.net/2024/01/03/WDwZyvoBsYg9THb.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/content/ContextWrapper.java<br><span class="hljs-keyword">public</span> ContentResolver <span class="hljs-title function_">getContentResolver</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> mBase.getContentResolver();<br>&#125;<br></code></pre></td></tr></table></figure><p>mBase指的是ContextImpl。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ContextImpl.java<br><span class="hljs-keyword">public</span> ContentResolver <span class="hljs-title function_">getContentResolver</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> mContentResolver;<br>&#125;<br></code></pre></td></tr></table></figure><p>getContentResolver()方法中返回了ApplicationContentResolver类型的mContentResolver对象，ApplicationContentResolver是ContextImpl中的静态内部类，继承自ContentResolver，它在ContextImpl的构造方法中被创建，这说明当我们调用ContentResolver的insert、query、update等方法时就会启动ContentProvider。这里以query()方法来举例，query()方法在ApplicationContentResolver的父类ContentResolver中实现，有3个重载方法，最终会调用如下的query()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/content/ContentResolver.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-meta">@Nullable</span> Cursor <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-meta">@RequiresPermission</span>.Read <span class="hljs-meta">@NonNull</span> Uri uri,</span><br><span class="hljs-params">        <span class="hljs-meta">@Nullable</span> String[] projection, <span class="hljs-meta">@Nullable</span> Bundle queryArgs,</span><br><span class="hljs-params">        <span class="hljs-meta">@Nullable</span> CancellationSignal cancellationSignal)</span> &#123;<br>    ...<br>    <span class="hljs-type">IContentProvider</span> <span class="hljs-variable">unstableProvider</span> <span class="hljs-operator">=</span> acquireUnstableProvider(uri);  <span class="hljs-comment">// 1</span><br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-keyword">try</span> &#123;<br>            qCursor = unstableProvider.query(mContext.getAttributionSource(), uri, projection,<br>                    queryArgs, remoteCancellationSignal);  <span class="hljs-comment">// 2</span><br>        &#125; <span class="hljs-keyword">catch</span> (DeadObjectException e) &#123;<br>            ...<br>        &#125;<br>        <span class="hljs-keyword">if</span> (qCursor == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处通过acquireUnstableProvider()方法返回IContentProvider类型的unstableProvider对象，注释2处调用unstableProvider的query()方法。IContentProvider是ContentProvider在本地的代理，具体的实现为ContentProvider。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/content/ContentResolver.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> IContentProvider <span class="hljs-title function_">acquireUnstableProvider</span><span class="hljs-params">(Uri uri)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!SCHEME_CONTENT.equals(uri.getScheme())) &#123;  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> uri.getAuthority();<br>    <span class="hljs-keyword">if</span> (auth != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> acquireUnstableProvider(mContext, uri.getAuthority());  <span class="hljs-comment">// 2</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处检查uri的scheme是否等于SCHEME_CONTENT（值为”content”），如果不是则返回null。</p><p>注释2处调用了acquireUnstableProvider()方法，这是个抽象方法，它在ContentResolver的子类ApplicationContentResolver中实现，ApplicationContentResolver是ContextImpl的静态内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ContextImpl.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContentResolver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ContentResolver</span> &#123;<br>    <span class="hljs-keyword">protected</span> IContentProvider <span class="hljs-title function_">acquireUnstableProvider</span><span class="hljs-params">(Context c, String auth)</span> &#123;<br>        <span class="hljs-keyword">return</span> mMainThread.acquireProvider(c,<br>                ContentProvider.getAuthorityWithoutUserId(auth),<br>                resolveUserIdFromAuthority(auth), <span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在acquireUnstableProvider()方法中返回了ActivityThread类型的mMainThread对象的acquireProvider()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> IContentProvider <span class="hljs-title function_">acquireProvider</span><span class="hljs-params">(</span><br><span class="hljs-params">        Context c, String auth, <span class="hljs-type">int</span> userId, <span class="hljs-type">boolean</span> stable)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">IContentProvider</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span> acquireExistingProvider(c, auth, userId, stable);  <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">if</span> (provider != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> provider;<br>    &#125;<br><br>    <span class="hljs-type">ContentProviderHolder</span> <span class="hljs-variable">holder</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ProviderKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> getGetProviderKey(auth, userId);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (key) &#123;<br>            holder = ActivityManager.getService().getContentProvider(<br>                    getApplicationThread(), c.getOpPackageName(), auth, userId, stable);  <span class="hljs-comment">// 2</span><br>            ...<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException ex) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>    ...<br><br>    <span class="hljs-comment">// Install provider will increment the reference count for us, and break</span><br>    <span class="hljs-comment">// any ties in the race.</span><br>    holder = installProvider(c, holder, holder.info,<br>            <span class="hljs-literal">true</span> <span class="hljs-comment">/*noisy*/</span>, holder.noReleaseNeeded, stable);  <span class="hljs-comment">// 3</span><br>    <span class="hljs-keyword">return</span> holder.provider;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处的acquireExistingProvider()方法内部会检查ActivityThread的全局变量mProviderMap中是否有目标ContentProvider存在，有则返回，没有就会在注释2处调用IActivityManager的getContentProvider()方法，最终会调用AMS的getContentProvider()方法。注释3处的installProvider()方法用来安装ContentProvider，并将注释2处返回的ContentProvider相关的数据存储在mProviderMap中，起到缓存的作用，这样使用相同的ContentProvider时，就不需要每次都调用AMS的getContentProvider()方法了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ContentProviderHolder <span class="hljs-title function_">getContentProvider</span><span class="hljs-params">(</span><br><span class="hljs-params">        IApplicationThread caller, String callingPackage, String name, <span class="hljs-type">int</span> userId,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> stable)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> mCpHelper.getContentProvider(caller, callingPackage, name, userId, stable);  <span class="hljs-comment">// 1</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用的ContentProviderHelper的getContentProvider()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ContentProviderHelper.java<br>ContentProviderHolder <span class="hljs-title function_">getContentProvider</span><span class="hljs-params">(IApplicationThread caller, String callingPackage,</span><br><span class="hljs-params">        String name, <span class="hljs-type">int</span> userId, <span class="hljs-type">boolean</span> stable)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">return</span> getContentProviderImpl(caller, name, <span class="hljs-literal">null</span>, callingUid, callingPackage,<br>            <span class="hljs-literal">null</span>, stable, userId);<br>&#125;<br></code></pre></td></tr></table></figure><p>getContentProvider()方法返回了getContentProviderImpl()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ContentProviderHelper.java<br><span class="hljs-keyword">private</span> ContentProviderHolder <span class="hljs-title function_">getContentProviderImpl</span><span class="hljs-params">(IApplicationThread caller,</span><br><span class="hljs-params">        String name, IBinder token, <span class="hljs-type">int</span> callingUid, String callingPackage, String callingTag,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> stable, <span class="hljs-type">int</span> userId)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">synchronized</span> (mService) &#123;<br>        ...  <br>        <span class="hljs-keyword">if</span> (!providerRunning) &#123;<br>            ...<br>            <span class="hljs-comment">// If the provider is not already being launched, then get it started.</span><br>            <span class="hljs-keyword">if</span> (i &gt;= numLaunchingProviders) &#123;<br>                ...<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ...<br>                    <span class="hljs-type">ProcessRecord</span> <span class="hljs-variable">proc</span> <span class="hljs-operator">=</span> mService.getProcessRecordLocked(<br>                            cpi.processName, cpr.appInfo.uid);  <span class="hljs-comment">// 1</span><br>                    IApplicationThread thread;<br>                    <span class="hljs-keyword">if</span> (proc != <span class="hljs-literal">null</span> &amp;&amp; (thread = proc.getThread()) != <span class="hljs-literal">null</span><br>                            &amp;&amp; !proc.isKilled()) &#123;<br>                        ...<br>                        <span class="hljs-keyword">final</span> <span class="hljs-type">ProcessProviderRecord</span> <span class="hljs-variable">pr</span> <span class="hljs-operator">=</span> proc.mProviders;<br>                        <span class="hljs-keyword">if</span> (!pr.hasProvider(cpi.name)) &#123;<br>                            checkTime(startTime, <span class="hljs-string">&quot;getContentProviderImpl: scheduling install&quot;</span>);<br>                            pr.installProvider(cpi.name, cpr);<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                thread.scheduleInstallProvider(cpi);  <span class="hljs-comment">// 2</span><br>                            &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>                            &#125;<br>                        &#125;<br>                        ...<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        ...<br>                        proc = mService.startProcessLocked(<br>                                cpi.processName, cpr.appInfo, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>,<br>                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">HostingRecord</span>(HostingRecord.HOSTING_TYPE_CONTENT_PROVIDER,<br>                                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComponentName</span>(<br>                                            cpi.applicationInfo.packageName, cpi.name)),<br>                                Process.ZYGOTE_POLICY_FLAG_EMPTY, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);  <span class="hljs-comment">// 3</span><br>                        ...<br>                    &#125;<br>                    ...<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    ...<br>                &#125;<br>            &#125;<br>            ...<br>        &#125;<br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处通过getProcessRecordLocked()方法来获取目标ContentProvider的应用程序进程信息，这些信息用ProcessRecord类型的proc来表示，如果该应用程序进程已经启动就会调用注释2处的代码，否则就会调用注释3处的startProcessLocked()来启动进程。这里假设ContentProvider的应用程序进程还没有启动，应用程序进程启动最终会调用ActivityThread的main()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    ...<br>    Looper.prepareMainLooper();  <span class="hljs-comment">// 1</span><br>    ...<br>    <span class="hljs-type">ActivityThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityThread</span>();  <span class="hljs-comment">// 2</span><br>    thread.attach(<span class="hljs-literal">false</span>, startSeq);  <span class="hljs-comment">// 3</span><br>    ...<br>    Looper.loop();  <span class="hljs-comment">// 4</span><br><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Main thread loop unexpectedly exited&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处通过prepareMainLooper()方法在ThreadLocal中获取Looper，并在注释4处开启消息循环。注释2处创建了ActivityThread，紧接着调用了它的attach()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(<span class="hljs-type">boolean</span> system, <span class="hljs-type">long</span> startSeq)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">if</span> (!system) &#123;<br>        ...<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">IActivityManager</span> <span class="hljs-variable">mgr</span> <span class="hljs-operator">=</span> ActivityManager.getService();  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            mgr.attachApplication(mAppThread, startSeq);  <span class="hljs-comment">// 2</span><br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException ex) &#123;<br>            <span class="hljs-keyword">throw</span> ex.rethrowFromSystemServer();<br>        &#125;<br>        ...<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处得到IActivityManager，注释2处调用IActivityManager的attachApplication()方法，并将ApplicationThread类型的mAppThread对象传进去，最终调用的是AMS的attachApplication()方法。</p><h4 id="AMS启动ContentProvider的过程"><a href="#AMS启动ContentProvider的过程" class="headerlink" title="AMS启动ContentProvider的过程"></a>AMS启动ContentProvider的过程</h4><p><img src="https://s2.loli.net/2024/01/03/592eMmCpzvDHqtN.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachApplication</span><span class="hljs-params">(IApplicationThread thread, <span class="hljs-type">long</span> startSeq)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        ...<br>        attachApplicationLocked(thread, callingPid, callingUid, startSeq);<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在attachApplicationLocked()方法中又调用了attachApplicationLocked()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachApplicationLocked</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> IApplicationThread thread,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> pid, <span class="hljs-type">int</span> callingUid, <span class="hljs-type">long</span> startSeq)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ActiveInstrumentation</span> <span class="hljs-variable">instr2</span> <span class="hljs-operator">=</span> app.getActiveInstrumentation();<br>        ...<br>        <span class="hljs-keyword">if</span> (app.getIsolatedEntryPoint() != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// This is an isolated process which should just call an entry point instead of</span><br>            <span class="hljs-comment">// being bound to an application.</span><br>            thread.runIsolatedEntryPoint(<br>                    app.getIsolatedEntryPoint(), app.getIsolatedEntryPointArgs());<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (instr2 != <span class="hljs-literal">null</span>) &#123;<br>            thread.bindApplication(processName, appInfo,<br>                    app.sdkSandboxClientAppVolumeUuid, app.sdkSandboxClientAppPackage,<br>                    providerList,<br>                    instr2.mClass,<br>                    profilerInfo, instr2.mArguments,<br>                    instr2.mWatcher,<br>                    instr2.mUiAutomationConnection, testMode,<br>                    mBinderTransactionTrackingEnabled, enableTrackAllocation,<br>                    isRestrictedBackupMode || !normalMode, app.isPersistent(),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(app.getWindowProcessController().getConfiguration()),<br>                    app.getCompat(), getCommonServicesLocked(app.isolated),<br>                    mCoreSettingsObserver.getCoreSettingsLocked(),<br>                    buildSerial, autofillOptions, contentCaptureOptions,<br>                    app.getDisabledCompatChanges(), serializedSystemFontMap,<br>                    app.getStartElapsedTime(), app.getStartUptime());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            thread.bindApplication(processName, appInfo,<br>                    app.sdkSandboxClientAppVolumeUuid, app.sdkSandboxClientAppPackage,<br>                    providerList, <span class="hljs-literal">null</span>, profilerInfo, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, testMode,<br>                    mBinderTransactionTrackingEnabled, enableTrackAllocation,<br>                    isRestrictedBackupMode || !normalMode, app.isPersistent(),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(app.getWindowProcessController().getConfiguration()),<br>                    app.getCompat(), getCommonServicesLocked(app.isolated),<br>                    mCoreSettingsObserver.getCoreSettingsLocked(),<br>                    buildSerial, autofillOptions, contentCaptureOptions,<br>                    app.getDisabledCompatChanges(), serializedSystemFontMap,<br>                    app.getStartElapsedTime(), app.getStartUptime());<br>        &#125;<br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在attachApplicationLocked()中调用了thread的bindApplication()方法，thread是IApplicationThread类型的，这里和IActivityManager一样采用了AIDL，ApplicationThread是ActivityThread的内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread$ApplicationThread<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IApplicationThread</span>.Stub &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bindApplication</span><span class="hljs-params">(String processName, ApplicationInfo appInfo,</span><br><span class="hljs-params">            String sdkSandboxClientAppVolumeUuid, String sdkSandboxClientAppPackage,</span><br><span class="hljs-params">            ProviderInfoList providerList, ComponentName instrumentationName,</span><br><span class="hljs-params">            ProfilerInfo profilerInfo, Bundle instrumentationArgs,</span><br><span class="hljs-params">            IInstrumentationWatcher instrumentationWatcher,</span><br><span class="hljs-params">            IUiAutomationConnection instrumentationUiConnection, <span class="hljs-type">int</span> debugMode,</span><br><span class="hljs-params">            <span class="hljs-type">boolean</span> enableBinderTracking, <span class="hljs-type">boolean</span> trackAllocation,</span><br><span class="hljs-params">            <span class="hljs-type">boolean</span> isRestrictedBackupMode, <span class="hljs-type">boolean</span> persistent, Configuration config,</span><br><span class="hljs-params">            CompatibilityInfo compatInfo, Map services, Bundle coreSettings,</span><br><span class="hljs-params">            String buildSerial, AutofillOptions autofillOptions,</span><br><span class="hljs-params">            ContentCaptureOptions contentCaptureOptions, <span class="hljs-type">long</span>[] disabledCompatChanges,</span><br><span class="hljs-params">            SharedMemory serializedSystemFontMap,</span><br><span class="hljs-params">            <span class="hljs-type">long</span> startRequestedElapsedTime, <span class="hljs-type">long</span> startRequestedUptime)</span> &#123;<br>        <span class="hljs-keyword">if</span> (services != <span class="hljs-literal">null</span>) &#123;<br>            ...<br>            <span class="hljs-comment">// Setup the service cache in the ServiceManager</span><br>            ServiceManager.initServiceCache(services);<br>        &#125;<br><br>        setCoreSettings(coreSettings);<br><br>        <span class="hljs-type">AppBindData</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AppBindData</span>();<br>        data.processName = processName;<br>        data.appInfo = appInfo;<br>        data.sdkSandboxClientAppVolumeUuid = sdkSandboxClientAppVolumeUuid;<br>        data.sdkSandboxClientAppPackage = sdkSandboxClientAppPackage;<br>        data.providers = providerList.getList();<br>        data.instrumentationName = instrumentationName;<br>        data.instrumentationArgs = instrumentationArgs;<br>        data.instrumentationWatcher = instrumentationWatcher;<br>        data.instrumentationUiAutomationConnection = instrumentationUiConnection;<br>        data.debugMode = debugMode;<br>        data.enableBinderTracking = enableBinderTracking;<br>        data.trackAllocation = trackAllocation;<br>        data.restrictedBackupMode = isRestrictedBackupMode;<br>        data.persistent = persistent;<br>        data.config = config;<br>        data.compatInfo = compatInfo;<br>        data.initProfilerInfo = profilerInfo;<br>        data.buildSerial = buildSerial;<br>        data.autofillOptions = autofillOptions;<br>        data.contentCaptureOptions = contentCaptureOptions;<br>        data.disabledCompatChanges = disabledCompatChanges;<br>        data.mSerializedSystemFontMap = serializedSystemFontMap;<br>        data.startRequestedElapsedTime = startRequestedElapsedTime;<br>        data.startRequestedUptime = startRequestedUptime;<br>        updateCompatOverrideScale(compatInfo);<br>        CompatibilityInfo.applyOverrideScaleIfNeeded(config);<br>        sendMessage(H.BIND_APPLICATION, data);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在bindApplication()方法中最后调用sendMessage()方法向H发送BIND_APPLICATION类型消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread$H<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">H</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span> &#123;<br>        ...<br>        <span class="hljs-keyword">switch</span> (msg.what) &#123;<br>            <span class="hljs-keyword">case</span> BIND_APPLICATION:<br>                ...<br>                handleBindApplication(data);<br>                ...<br>                <span class="hljs-keyword">break</span>;<br>            ...<br>        &#125;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来执行handleBindApplication()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleBindApplication</span><span class="hljs-params">(AppBindData data)</span> &#123;<br>    ...<br>    Application app;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// If the app is being launched for full backup or restore, bring it up in</span><br>        <span class="hljs-comment">// a restricted environment with the base application class.</span><br>        app = data.info.makeApplicationInner(data.restrictedBackupMode, <span class="hljs-literal">null</span>);  <span class="hljs-comment">// 1</span><br>        ...<br>        mInitialApplication = app;<br>        ...<br>        <span class="hljs-comment">// don&#x27;t bring up providers in restricted mode; they may depend on the</span><br>        <span class="hljs-comment">// app&#x27;s custom Application class</span><br>        <span class="hljs-keyword">if</span> (!data.restrictedBackupMode) &#123;<br>            <span class="hljs-keyword">if</span> (!ArrayUtils.isEmpty(data.providers)) &#123;<br>                installContentProviders(app, data.providers);  <span class="hljs-comment">// 2</span><br>            &#125;<br>        &#125;<br>        ...<br>        <span class="hljs-keyword">try</span> &#123;<br>            mInstrumentation.callApplicationOnCreate(app);  <span class="hljs-comment">// 3</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            ...<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处创建Application，注释2处在非受限模式下启动ContentProvider，注释3处执行Application的onCreate()方法。</p><p>ContentProvider的启动时机是在Application创建后，Application#onCreate()调用前。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">installContentProviders</span><span class="hljs-params">(</span><br><span class="hljs-params">        Context context, List&lt;ProviderInfo&gt; providers)</span> &#123;<br>    <span class="hljs-keyword">final</span> ArrayList&lt;ContentProviderHolder&gt; results = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">for</span> (ProviderInfo cpi : providers) &#123;  <span class="hljs-comment">// 1</span><br>        ...<br>        <span class="hljs-type">ContentProviderHolder</span> <span class="hljs-variable">cph</span> <span class="hljs-operator">=</span> installProvider(context, <span class="hljs-literal">null</span>, cpi,<br>                <span class="hljs-literal">false</span> <span class="hljs-comment">/*noisy*/</span>, <span class="hljs-literal">true</span> <span class="hljs-comment">/*noReleaseNeeded*/</span>, <span class="hljs-literal">true</span> <span class="hljs-comment">/*stable*/</span>);  <span class="hljs-comment">// 2</span><br>        <span class="hljs-keyword">if</span> (cph != <span class="hljs-literal">null</span>) &#123;<br>            cph.noReleaseNeeded = <span class="hljs-literal">true</span>;<br>            results.add(cph);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        ActivityManager.getService().publishContentProviders(<br>            getApplicationThread(), results);  <span class="hljs-comment">// 3</span><br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException ex) &#123;<br>        <span class="hljs-keyword">throw</span> ex.rethrowFromSystemServer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处遍历当前应用程序进程的ProviderInfo列表，得到每个ContentProvider的ProviderInfo（存储ContentProvider的信息），并在注释2处调用installProvider()方法来启动这些ContentProvider。注释3处通过AMS的publishContentProviders()方法将这些ContentProvider存储在AMS的mProviderMap中，这个mProviderMap在前面提到过，起到缓存的作用，防止每次使用相同的ContentProvider时都会调用AMS的getContentProvider()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> ContentProviderHolder <span class="hljs-title function_">installProvider</span><span class="hljs-params">(Context context,</span><br><span class="hljs-params">        ContentProviderHolder holder, ProviderInfo info,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> noisy, <span class="hljs-type">boolean</span> noReleaseNeeded, <span class="hljs-type">boolean</span> stable)</span> &#123;<br>    <span class="hljs-type">ContentProvider</span> <span class="hljs-variable">localProvider</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    IContentProvider provider;<br>    <span class="hljs-keyword">if</span> (holder == <span class="hljs-literal">null</span> || holder.provider == <span class="hljs-literal">null</span>) &#123;<br>        ...<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ApplicationInfo</span> <span class="hljs-variable">ai</span> <span class="hljs-operator">=</span> info.applicationInfo;<br>        <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">if</span> (context.getPackageName().equals(ai.packageName)) &#123;<br>            c = context;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mInitialApplication != <span class="hljs-literal">null</span> &amp;&amp;<br>                mInitialApplication.getPackageName().equals(ai.packageName)) &#123;<br>            c = mInitialApplication;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                c = context.createPackageContext(ai.packageName,<br>                        Context.CONTEXT_INCLUDE_CODE);<br>            &#125; <span class="hljs-keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;<br>                <span class="hljs-comment">// Ignore</span><br>            &#125;<br>        &#125;<br>        ...<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> java.lang.<span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> c.getClassLoader();<br>            <span class="hljs-type">LoadedApk</span> <span class="hljs-variable">packageInfo</span> <span class="hljs-operator">=</span> peekPackageInfo(ai.packageName, <span class="hljs-literal">true</span>);  <span class="hljs-comment">// 2</span><br>            <span class="hljs-keyword">if</span> (packageInfo == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// System startup case.</span><br>                packageInfo = getSystemContext().mPackageInfo;<br>            &#125;<br>            localProvider = packageInfo.getAppFactory()<br>                    .instantiateProvider(cl, info.name);  <span class="hljs-comment">// 3</span><br>            provider = localProvider.getIContentProvider();<br>            <br>            ...<br>            localProvider.attachInfo(c, info);  <span class="hljs-comment">// 4</span><br>        &#125; <span class="hljs-keyword">catch</span> (java.lang.Exception e) &#123;<br>            ...<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处首先获取Context，一般情况下就是Application；</p><p>注释2处获取应用信息；</p><p>注释3处通过AppComponentFactory实例化ContentProvider；</p><p>注释4处初始化ContentProvider，调用其onCreate()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/content/ContentProvider.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachInfo</span><span class="hljs-params">(Context context, ProviderInfo info)</span> &#123;<br>    attachInfo(context, info, <span class="hljs-literal">false</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachInfo</span><span class="hljs-params">(Context context, ProviderInfo info, <span class="hljs-type">boolean</span> testing)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">if</span> (mContext == <span class="hljs-literal">null</span>) &#123;<br>        mContext = context;<br>        ...<br>        ContentProvider.<span class="hljs-built_in">this</span>.onCreate();  <span class="hljs-comment">// 1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处在attachInfo()方法中调用了onCreate()方法，它是一个抽象方法，这样ContentProvider就启动完毕。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>启动流程</tag>
      
      <tag>ContentProvider</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Configuration变更时更新应用程序配置</title>
    <link href="/2024/03/10/Configuration%E5%8F%98%E6%9B%B4%E6%97%B6%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/03/10/Configuration%E5%8F%98%E6%9B%B4%E6%97%B6%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U，只保留了关键调用步骤，略去了细节。</p></blockquote><p>当设备配置发生变更时，系统会调用ATMS的<code>updateConfiguration()</code>方法，来通知ATMS处理configuration change事件。时序图如下。</p><p><img src="https://s2.loli.net/2023/12/26/YJPIMfsWNOnxBhR.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateConfiguration</span><span class="hljs-params">(Configuration values)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">synchronized</span> (mGlobalLock) &#123;<br>        ...<br>        <span class="hljs-keyword">try</span> &#123;<br>            ...<br>            updateConfigurationLocked(values, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span> <span class="hljs-comment">/* persistent */</span>,<br>                    UserHandle.USER_NULL, <span class="hljs-literal">false</span> <span class="hljs-comment">/* deferResume */</span>,<br>                    mTmpUpdateConfigurationResult);  <span class="hljs-comment">// 1</span><br>            <span class="hljs-keyword">return</span> mTmpUpdateConfigurationResult.changes != <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处调用<code>updateConfigurationLocked()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">updateConfigurationLocked</span><span class="hljs-params">(Configuration values, ActivityRecord starting,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> initLocale, <span class="hljs-type">boolean</span> persistent, <span class="hljs-type">int</span> userId, <span class="hljs-type">boolean</span> deferResume,</span><br><span class="hljs-params">        ActivityTaskManagerService.UpdateConfigurationResult result)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (values != <span class="hljs-literal">null</span>) &#123;<br>            changes = updateGlobalConfigurationLocked(values, initLocale, persistent, userId);  <span class="hljs-comment">// 1</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!deferResume) &#123;<br>            kept = ensureConfigAndVisibilityAfterUpdate(starting, changes);  <span class="hljs-comment">// 2</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> kept;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处更新当前配置；</p><p>注释2处确保给定的Activity使用的是当前配置，如果返回true表示Activity未被重启，否则让该Activity destroyed以适配当前配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">ensureConfigAndVisibilityAfterUpdate</span><span class="hljs-params">(ActivityRecord starting, <span class="hljs-type">int</span> changes)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">if</span> (mainRootTask != <span class="hljs-literal">null</span>) &#123;<br>        ...<br>        <span class="hljs-keyword">if</span> (starting != <span class="hljs-literal">null</span>) &#123;<br>            kept = starting.ensureActivityConfiguration(changes,<br>                    <span class="hljs-literal">false</span> <span class="hljs-comment">/* preserveWindow */</span>);  <span class="hljs-comment">// 1</span><br>            ...<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> kept;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处调用<code>ActivityRecord#ensureActivityConfiguration()</code>真正完成Activity配置更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ActivityRecord.java<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">ensureActivityConfiguration</span><span class="hljs-params">(<span class="hljs-type">int</span> globalChanges, <span class="hljs-type">boolean</span> preserveWindow)</span> &#123;<br>    <span class="hljs-keyword">return</span> ensureActivityConfiguration(globalChanges, preserveWindow,<br>            <span class="hljs-literal">false</span> <span class="hljs-comment">/* ignoreVisibility */</span>, <span class="hljs-literal">false</span> <span class="hljs-comment">/* isRequestedOrientationChanged */</span>);<br>&#125;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">ensureActivityConfiguration</span><span class="hljs-params">(<span class="hljs-type">int</span> globalChanges, <span class="hljs-type">boolean</span> preserveWindow,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> ignoreVisibility, <span class="hljs-type">boolean</span> isRequestedOrientationChanged)</span> &#123;<br>    <span class="hljs-comment">// 这里省略了一些return ture的分支</span><br>    <span class="hljs-comment">// 如果马上会再次调用updateConfiguration()，则忽略本次修改，交由下次处理，节省时间</span><br>    <span class="hljs-comment">// 如果当前Activity已经finish，则忽略</span><br>    <span class="hljs-comment">// 如果Activity的状态是DESTROYED，则忽略</span><br>    <span class="hljs-comment">// 如果Activity不可见。则忽略</span><br>    ...<br>    <span class="hljs-comment">// 如果新旧配置相同，则忽略</span><br>    mTmpConfig.setTo(mLastReportedConfiguration.getMergedConfiguration());<br>    <span class="hljs-keyword">if</span> (getConfiguration().equals(mTmpConfig) &amp;&amp; !forceNewConfig &amp;&amp; !displayChanged) &#123;<br>        ProtoLog.v(WM_DEBUG_CONFIGURATION, <span class="hljs-string">&quot;Configuration &amp; display &quot;</span><br>                + <span class="hljs-string">&quot;unchanged in %s&quot;</span>, <span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 计算哪些配置值发生了改变</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">changes</span> <span class="hljs-operator">=</span> getConfigurationChanges(mTmpConfig);<br><br>    <span class="hljs-comment">// Update last reported values.</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Configuration</span> <span class="hljs-variable">newMergedOverrideConfig</span> <span class="hljs-operator">=</span> getMergedOverrideConfiguration();<br><br>    setLastReportedConfiguration(getProcessGlobalConfiguration(), newMergedOverrideConfig);<br><br>    <span class="hljs-comment">// Activity状态是INITIALIZING，则忽略</span><br>    ...<br><br>    <span class="hljs-keyword">if</span> (changes == <span class="hljs-number">0</span> &amp;&amp; !forceNewConfig) &#123;<br>        ...<br>        <span class="hljs-keyword">if</span> (displayChanged) &#123;<br>            scheduleActivityMovedToDisplay(newDisplayId, newMergedOverrideConfig);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            scheduleConfigurationChanged(newMergedOverrideConfig);<br>        &#125;<br>        notifyDisplayCompatPolicyAboutConfigurationChange(<br>                mLastReportedConfiguration.getMergedConfiguration(), mTmpConfig);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    ...<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">shouldRelaunchLocked</span> <span class="hljs-operator">=</span> shouldRelaunchLocked(changes, mTmpConfig);  <span class="hljs-comment">// 1</span><br>    ...<br>    <span class="hljs-keyword">if</span> (shouldRelaunchLocked || forceNewConfig) &#123;  <span class="hljs-comment">// 重启Activity</span><br>        ...<br>        <span class="hljs-keyword">if</span> (mState == PAUSING) &#123;<br>            ...<br>            <span class="hljs-comment">// 如果当前Activity处于PAUSING状态，则标记其需要重启，等到PAUSING后reLaunch</span><br>            deferRelaunchUntilPaused = <span class="hljs-literal">true</span>;<br>            preserveWindowOnDeferredRelaunch = preserveWindow;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ...<br>            relaunchActivityLocked(preserveWindow);<br>        &#125;<br><br>        <span class="hljs-comment">// All done...  tell the caller we weren&#x27;t able to keep this activity around.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Activity可以自己处理配置变更走这里</span><br>    <span class="hljs-keyword">if</span> (displayChanged) &#123;<br>        scheduleActivityMovedToDisplay(newDisplayId, newMergedOverrideConfig);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        scheduleConfigurationChanged(newMergedOverrideConfig);<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>决定是否需要reLaunch的关键参数是<code>shouldRelaunchLocked</code>和<code>forceNewConfig</code>，任一值为true，就会重启Activity，而不会调用<code>Activity#onConfigurationChanged()</code>。</p><p>注释1处<code>shouldRelaunchLocked()</code>会通过对比事件是否在Activity自己可以处理的范围内来决定是否reLaunch，其中包括<code>AndroidManifest.xml</code>中配置的<code>android:configChanges</code>属性。</p><ol><li><p>重启Activity分支</p><p>执行<code>ActivityRecord#relaunchActivityLocked()</code>，经过层层调用，最终调用到<code>ActivityThread#handleRelaunchActivityInner()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRelaunchActivityInner</span><span class="hljs-params">(ActivityClientRecord r, <span class="hljs-type">int</span> configChanges,</span><br><span class="hljs-params">        List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingIntents,</span><br><span class="hljs-params">        PendingTransactionActions pendingActions, <span class="hljs-type">boolean</span> startsNotResumed,</span><br><span class="hljs-params">        Configuration overrideConfig, String reason)</span> &#123;<br>    ...<br>    handleDestroyActivity(r, <span class="hljs-literal">false</span>, configChanges, <span class="hljs-literal">true</span>, reason);<br>    ...<br>    handleLaunchActivity(r, pendingActions, mLastReportedDeviceId, customIntent);<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>handleRelaunchActivityInner()</code>中，先调用<code>handleDestroyActivity()</code>销毁当前Activity，然后调用<code>handleLaunchActivity()</code>重启Activity。Activity有一个回调方法<code>onRetainNonConfigurationInstance()</code>，当设备信息变更时，会保存该方法返回的Object，之后可以在重启的Activity中通过<code>getLastNonConfigurationInstance()</code>获取该Object。</p></li><li><p>不重启Activity分支</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ActivityRecord.java<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">ensureActivityConfiguration</span><span class="hljs-params">(<span class="hljs-type">int</span> globalChanges, <span class="hljs-type">boolean</span> preserveWindow,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> ignoreVisibility, <span class="hljs-type">boolean</span> isRequestedOrientationChanged)</span> &#123;<br>    ...<br>    <span class="hljs-comment">// Activity可以自己处理配置变更走这里</span><br>    <span class="hljs-keyword">if</span> (displayChanged) &#123;<br>        scheduleActivityMovedToDisplay(newDisplayId, newMergedOverrideConfig);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        scheduleConfigurationChanged(newMergedOverrideConfig);<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这两个分支最终都会调用<code>ActivityThread#handleActivityConfigurationChanged()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">handleActivityConfigurationChanged</span><span class="hljs-params">(ActivityClientRecord r,</span><br><span class="hljs-params">        <span class="hljs-meta">@NonNull</span> Configuration overrideConfig, <span class="hljs-type">int</span> displayId, <span class="hljs-type">boolean</span> alwaysReportChange)</span> &#123;<br>    ... <br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Configuration</span> <span class="hljs-variable">reportedConfig</span> <span class="hljs-operator">=</span> performConfigurationChangedForActivity(r,<br>            mConfigurationController.getCompatConfiguration(),<br>            movedToDifferentDisplay ? displayId : r.activity.getDisplayId(),<br>            alwaysReportChange);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>performConfigurationChangedForActivity</code>()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> Configuration <span class="hljs-title function_">performConfigurationChangedForActivity</span><span class="hljs-params">(ActivityClientRecord r,</span><br><span class="hljs-params">        Configuration newBaseConfig, <span class="hljs-type">int</span> displayId, <span class="hljs-type">boolean</span> alwaysReportChange)</span> &#123;<br>    r.tmpConfig.setTo(newBaseConfig);<br>    <span class="hljs-keyword">if</span> (r.overrideConfig != <span class="hljs-literal">null</span>) &#123;<br>        r.tmpConfig.updateFrom(r.overrideConfig);<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Configuration</span> <span class="hljs-variable">reportedConfig</span> <span class="hljs-operator">=</span> performActivityConfigurationChanged(r,<br>            r.tmpConfig, r.overrideConfig, displayId, alwaysReportChange);<br>    freeTextLayoutCachesIfNeeded(r.activity.mCurrentConfig.diff(r.tmpConfig));<br>    <span class="hljs-keyword">return</span> reportedConfig;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>performActivityConfigurationChanged()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Configuration <span class="hljs-title function_">performActivityConfigurationChanged</span><span class="hljs-params">(ActivityClientRecord r,</span><br><span class="hljs-params">        Configuration newConfig, Configuration amOverrideConfig, <span class="hljs-type">int</span> displayId,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> alwaysReportChange)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Activity</span> <span class="hljs-variable">activity</span> <span class="hljs-operator">=</span> r.activity;<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Configuration</span> <span class="hljs-variable">currentResConfig</span> <span class="hljs-operator">=</span> activity.getResources().getConfiguration();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span> currentResConfig.diffPublicOnly(newConfig);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">hasPublicResConfigChange</span> <span class="hljs-operator">=</span> diff != <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// TODO(b/173090263): Use diff instead after the improvement of AssetManager and</span><br>    <span class="hljs-comment">// ResourcesImpl constructions.</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">shouldUpdateResources</span> <span class="hljs-operator">=</span> hasPublicResConfigChange<br>            || shouldUpdateResources(activityToken, currentResConfig, newConfig,<br>            amOverrideConfig, movedToDifferentDisplay, hasPublicResConfigChange);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">shouldReportChange</span> <span class="hljs-operator">=</span> shouldReportChange(<br>            activity.mCurrentConfig, newConfig, r.mSizeConfigurations,<br>            activity.mActivityInfo.getRealConfigChanged(), alwaysReportChange);<br>    <span class="hljs-comment">// Nothing significant, don&#x27;t proceed with updating and reporting.</span><br>    <span class="hljs-keyword">if</span> (!shouldUpdateResources &amp;&amp; !shouldReportChange) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Configuration</span> <span class="hljs-variable">configToReport</span> <span class="hljs-operator">=</span> createNewConfigAndUpdateIfNotNull(newConfig,<br>            contextThemeWrapperOverrideConfig);<br>    ...<br>    activity.mConfigChangeFlags = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (shouldReportChange) &#123;<br>        activity.mCalled = <span class="hljs-literal">false</span>;<br>        activity.mCurrentConfig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(newConfig);<br>        activity.onConfigurationChanged(configToReport);  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">if</span> (!activity.mCalled) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperNotCalledException</span>(<span class="hljs-string">&quot;Activity &quot;</span> + activity.getLocalClassName() +<br>                            <span class="hljs-string">&quot; did not call through to super.onConfigurationChanged()&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> configToReport;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处调用<code>Activity.onConfigurationChanged()</code>。</p></li></ol><p>总结：设备配置发生变更时，系统会根据一系列条件决定是重启Activity，还是调用<code>Activity.onConfigurationChanged()</code>。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>启动流程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Binder线程池启动过程</title>
    <link href="/2024/03/10/Binder%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/03/10/Binder%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>在应用程序进程创建过程中会启动Binder线程池。</p><p><img src="https://s2.loli.net/2023/12/26/f6BpAaGyOExUVWZ.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/com/android/internal/os/ZygoteInit.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runnable <span class="hljs-title function_">zygoteInit</span><span class="hljs-params">(<span class="hljs-type">int</span> targetSdkVersion, <span class="hljs-type">long</span>[] disabledCompatChanges,</span><br><span class="hljs-params">        String[] argv, ClassLoader classLoader)</span> &#123;<br>    ...<br>    ZygoteInit.nativeZygoteInit();<br>    <span class="hljs-keyword">return</span> RuntimeInit.applicationInit(targetSdkVersion, disabledCompatChanges, argv,<br>            classLoader);<br>&#125;<br></code></pre></td></tr></table></figure><p>nativeZygoteInit()会在新创建的应用程序进程中创建Binder线程池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/com/android/internal/os/ZygoteInit.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nativeZygoteInit</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/core/jni/AndroidRuntime.cpp<br><span class="hljs-type">const</span> JNINativeMethod methods[] = &#123;<br>    &#123; <span class="hljs-string">&quot;nativeZygoteInit&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>,<br>        (<span class="hljs-type">void</span>*) com_android_internal_os_ZygoteInit_nativeZygoteInit &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>nativeZygoteInit()是一个JNI方法，它对应的函数是com_android_internal_os_ZygoteInit_nativeZygoteInit()。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/core/jni/AndroidRuntime.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">com_android_internal_os_ZygoteInit_nativeZygoteInit</span><span class="hljs-params">(JNIEnv* env, jobject clazz)</span></span><br><span class="hljs-function"></span>&#123;<br>gCurRuntime-&gt;<span class="hljs-built_in">onZygoteInit</span>();<br>&#125; <br></code></pre></td></tr></table></figure><p>gCurRuntime是AndroidRuntime类型的指针，它是在AndroidRuntime初始化时就创建的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/core/jni/AndroidRuntime.cpp<br>    <br><span class="hljs-type">static</span> AndroidRuntime* gCurRuntime = <span class="hljs-literal">NULL</span>;<br>AndroidRuntime::<span class="hljs-built_in">AndroidRuntime</span>(<span class="hljs-type">char</span>* argBlockStart, <span class="hljs-type">const</span> <span class="hljs-type">size_t</span> argBlockLength) :<br>    <span class="hljs-built_in">mExitWithoutCleanup</span>(<span class="hljs-literal">false</span>),<br>    <span class="hljs-built_in">mArgBlockStart</span>(argBlockStart),<br>    <span class="hljs-built_in">mArgBlockLength</span>(argBlockLength)<br>&#123;<br>    ...<br>gCurRuntime = <span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>AppRuntime继承自AndroidRuntime，AppRuntime创建时就会调用AndroidRuntime的构造函数，gCurRuntime就会被初始化，它指向的是AppRuntime。AppRuntime在app_main.cpp中实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/base/cmds/app_process/app_main.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">onZygoteInit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    sp&lt;ProcessState&gt; proc = ProcessState::<span class="hljs-built_in">self</span>();<br>    <span class="hljs-built_in">ALOGV</span>(<span class="hljs-string">&quot;App process: starting thread pool.\n&quot;</span>);<br>    proc-&gt;<span class="hljs-built_in">startThreadPool</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>调用ProcessState#startThreadPool()来启动Binder线程池。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/native/libs/binder/ProcessState.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ProcessState::startThreadPool</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    AutoMutex _l(mLock);<br>    <span class="hljs-keyword">if</span> (!mThreadPoolStarted) &#123;<br>        <span class="hljs-keyword">if</span> (mMaxThreads == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 1</span><br>            <span class="hljs-built_in">ALOGW</span>(<span class="hljs-string">&quot;Extra binder thread started, but 0 threads requested. Do not use &quot;</span><br>                  <span class="hljs-string">&quot;*startThreadPool when zero threads are requested.&quot;</span>);<br>        &#125;<br>        mThreadPoolStarted = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 2</span><br>        <span class="hljs-built_in">spawnPooledThread</span>(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>支持Binder通信的进程中都有一个ProcessState类，它里面有一个mThreadPoolStarted变量，用来表示Binder线程池是否已经被启动过，默认值为false。在每次调用startThreadPool()时都会在注释1处先检查这个标记，从而确保Binder线程池只会被启动一次。如果Binder线程池未被启动，则在注释2处设置mThreadPoolStarted为true，并调用spawnPooledThread()来创建线程池中的第一个线程，也就是线程池的主线程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/native/libs/binder/ProcessState.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ProcessState::spawnPooledThread</span><span class="hljs-params">(<span class="hljs-type">bool</span> isMain)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (mThreadPoolStarted) &#123;<br>        String8 name = <span class="hljs-built_in">makeBinderThreadName</span>();<br>        <span class="hljs-built_in">ALOGV</span>(<span class="hljs-string">&quot;Spawning new pooled thread, name=%s\n&quot;</span>, name.<span class="hljs-built_in">string</span>());<br>        sp&lt;Thread&gt; t = sp&lt;PoolThread&gt;::<span class="hljs-built_in">make</span>(isMain);<br>        t-&gt;<span class="hljs-built_in">run</span>(name.<span class="hljs-built_in">string</span>());  <span class="hljs-comment">// 1</span><br>        <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;mThreadCountLock);<br>        mKernelStartedThreads++;<br>        <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;mThreadCountLock);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到Binder线程为一个PoolThread。在注释1处调用PoolThread#run()来启动一个新的线程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp">frameworks/native/libs/binder/ProcessState.cpp<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PoolThread</span> : <span class="hljs-keyword">public</span> Thread<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">PoolThread</span><span class="hljs-params">(<span class="hljs-type">bool</span> isMain)</span></span><br><span class="hljs-function">        : mIsMain(isMain)</span><br><span class="hljs-function">    &#123;</span><br>    &#125;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">threadLoop</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        IPCThreadState::<span class="hljs-built_in">self</span>()-&gt;<span class="hljs-built_in">joinThreadPool</span>(mIsMain);  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">bool</span> mIsMain;<br>&#125;;<br></code></pre></td></tr></table></figure><p>PoolThread类继承了Thread类。在注释1处调用IPCThreadState#joinThreadPool()，将当前线程注册到Binder驱动程序中，这样我们创建的线程就加入了Binder线程池中，新创建的应用程序进程就支持Binder进程间通信了，我们只需要创建当前进程的Binder对象，并将它注册到ServiceManager中就可以实现Binder进程间通信。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>启动流程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android关机流程</title>
    <link href="/2024/03/10/Android%E5%85%B3%E6%9C%BA%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/03/10/Android%E5%85%B3%E6%9C%BA%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="关机入口"><a href="#关机入口" class="headerlink" title="关机入口"></a>关机入口</h2><ul><li>StatusBarManagerService#shutdown，这个主要是对接SystemUI；</li><li>WindowManagerService#shutdown，以WindowManagerFuncs接口提供给系统其他模块使用，诸如GlobalActions、PhoneWindowManager；</li><li>PowerManager#shutdown，以binder服务形式提供给客户端调用，需要持有android.permission.REBOOT权限；</li><li>通过action启动ShutdownActivity请求关机重启，需要权限 android.permission.SHUTDOWN<br>ACTION_REQUEST_SHUTDOWN &#x3D; “com.android.internal.intent.action.REQUEST_SHUTDOWN”。</li></ul><p>最终都会调用ShutdownThread#shutdown()。</p><h2 id="关机流程"><a href="#关机流程" class="headerlink" title="关机流程"></a>关机流程</h2><blockquote><p>以PowerManager#shutdown为例</p></blockquote><ul><li><p>PowerManager#shutdown</p></li><li><p>-&gt; PowerManagerService$BinderService#shutdown</p></li><li><p>-&gt; PowerManagerService#shutdownOrRebootInternal</p></li><li><p>-&gt; ShutdownThread#shutdown</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/power/ShutdownThread.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Context context, String reason, <span class="hljs-type">boolean</span> confirm)</span> &#123;<br>    mReboot = <span class="hljs-literal">false</span>;<br>    mRebootSafeMode = <span class="hljs-literal">false</span>;<br>    mReason = reason;<br>    shutdownInner(context, confirm);<br>&#125;<br></code></pre></td></tr></table></figure><p>confirm 参数表示是否需要确认，若需要确认会弹出一个对话框。</p><ul><li>-&gt; ShutdownThread#shutdownInner</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/power/ShutdownThread.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdownInner</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Context context, <span class="hljs-type">boolean</span> confirm)</span> &#123;<br>    context.assertRuntimeOverlayThemable();<br><br>    c<br>    <span class="hljs-title function_">synchronized</span> <span class="hljs-params">(sIsStartedGuard)</span> &#123;<br>        <span class="hljs-keyword">if</span> (sIsStarted) &#123;  <span class="hljs-comment">// 进行中</span><br>            <span class="hljs-keyword">if</span> (DEBUG) &#123;<br>                Log.d(TAG, <span class="hljs-string">&quot;Request to shutdown already running, returning.&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    ...<br><br>    <span class="hljs-keyword">if</span> (confirm) &#123;  <span class="hljs-comment">// 弹出对话框</span><br>        ...  <span class="hljs-comment">// 对话框中确认关机也是执行beginShutdownSequence</span><br>        sConfirmDialog.show();<br>    &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 直接关机</span><br>        beginShutdownSequence(context);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>-&gt; ShutdownThread#beginShutdownSequence</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/power/ShutdownThread.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beginShutdownSequence</span><span class="hljs-params">(Context context)</span> &#123;<br>    <span class="hljs-comment">// 确保只有一个线程在执行关机</span><br>    <span class="hljs-keyword">synchronized</span> (sIsStartedGuard) &#123;<br>        <span class="hljs-keyword">if</span> (sIsStarted) &#123;<br>            <span class="hljs-keyword">if</span> (DEBUG) &#123;<br>                Log.d(TAG, <span class="hljs-string">&quot;Shutdown sequence already running, returning.&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        sIsStarted = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示关机对话框</span><br>    sInstance.mProgressDialog = showShutdownDialog(context);<br>    sInstance.mContext = context;<br>    sInstance.mPowerManager = (PowerManager)context.getSystemService(Context.POWER_SERVICE);<br><br>    <span class="hljs-comment">// 防止休眠</span><br>    sInstance.mCpuWakeLock = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        sInstance.mCpuWakeLock = sInstance.mPowerManager.newWakeLock(<br>                PowerManager.PARTIAL_WAKE_LOCK, TAG + <span class="hljs-string">&quot;-cpu&quot;</span>);<br>        sInstance.mCpuWakeLock.setReferenceCounted(<span class="hljs-literal">false</span>);<br>        sInstance.mCpuWakeLock.acquire();<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123;<br>        Log.w(TAG, <span class="hljs-string">&quot;No permission to acquire wake lock&quot;</span>, e);<br>        sInstance.mCpuWakeLock = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 保持屏幕常亮</span><br>    sInstance.mScreenWakeLock = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (sInstance.mPowerManager.isScreenOn()) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            sInstance.mScreenWakeLock = sInstance.mPowerManager.newWakeLock(<br>                    PowerManager.FULL_WAKE_LOCK, TAG + <span class="hljs-string">&quot;-screen&quot;</span>);<br>            sInstance.mScreenWakeLock.setReferenceCounted(<span class="hljs-literal">false</span>);<br>            sInstance.mScreenWakeLock.acquire();<br>        &#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123;<br>            Log.w(TAG, <span class="hljs-string">&quot;No permission to acquire wake lock&quot;</span>, e);<br>            sInstance.mScreenWakeLock = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (SecurityLog.isLoggingEnabled()) &#123;<br>        SecurityLog.writeEvent(SecurityLog.TAG_OS_SHUTDOWN);<br>    &#125;<br><br>    <span class="hljs-comment">// sInstance是ShutdownThread对象，其继承自Thread，开启线程执行关机流程</span><br>    sInstance.mHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>() &#123;<br>    &#125;;<br>    sInstance.start();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>-&gt; ShutdownThread#run</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/power/ShutdownThread.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">TimingsTraceLog</span> <span class="hljs-variable">shutdownTimingLog</span> <span class="hljs-operator">=</span> newTimingsLog();<br>    shutdownTimingLog.traceBegin(<span class="hljs-string">&quot;SystemServerShutdown&quot;</span>);<br>    metricShutdownStart();<br>    metricStarted(METRIC_SYSTEM_SERVER);<br><br>    <span class="hljs-comment">// 将记录写入/data/system/shutdown-checkpoints/checkpoints</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">dumpCheckPointsThread</span> <span class="hljs-operator">=</span> ShutdownCheckPoints.newDumpThread(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(CHECK_POINTS_FILE_BASENAME));<br>    dumpCheckPointsThread.start();<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Write a system property in case the system_server reboots before we</span><br><span class="hljs-comment">     * get to the actual hardware restart. If that happens, we&#x27;ll retry at</span><br><span class="hljs-comment">     * the beginning of the SystemServer startup.</span><br><span class="hljs-comment">     */</span><br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">reason</span> <span class="hljs-operator">=</span> (mReboot ? <span class="hljs-string">&quot;1&quot;</span> : <span class="hljs-string">&quot;0&quot;</span>) + (mReason != <span class="hljs-literal">null</span> ? mReason : <span class="hljs-string">&quot;&quot;</span>);<br>        SystemProperties.set(SHUTDOWN_ACTION_PROPERTY, reason);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * If we are rebooting into safe mode, write a system property</span><br><span class="hljs-comment">     * indicating so.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (mRebootSafeMode) &#123;<br>        SystemProperties.set(REBOOT_SAFEMODE_PROPERTY, <span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br><br>    shutdownTimingLog.traceBegin(<span class="hljs-string">&quot;DumpPreRebootInfo&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        Slog.i(TAG, <span class="hljs-string">&quot;Logging pre-reboot information...&quot;</span>);<br>        PreRebootLogger.log(mContext);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        Slog.e(TAG, <span class="hljs-string">&quot;Failed to log pre-reboot information&quot;</span>, e);<br>    &#125;<br>    shutdownTimingLog.traceEnd(); <span class="hljs-comment">// DumpPreRebootInfo</span><br><br>    metricStarted(METRIC_SEND_BROADCAST);<br>    shutdownTimingLog.traceBegin(<span class="hljs-string">&quot;SendShutdownBroadcast&quot;</span>);<br>    Log.i(TAG, <span class="hljs-string">&quot;Sending shutdown broadcast...&quot;</span>);<br><br>    <span class="hljs-comment">// 发送关机广播</span><br>    mActionDone = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_SHUTDOWN);<br>    intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND | Intent.FLAG_RECEIVER_REGISTERED_ONLY);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ActivityManagerInternal</span> <span class="hljs-variable">activityManagerInternal</span> <span class="hljs-operator">=</span> LocalServices.getService(<br>            ActivityManagerInternal.class);<br>    activityManagerInternal.broadcastIntentWithCallback(intent,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">IIntentReceiver</span>.Stub() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performReceive</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> resultCode, String data,</span><br><span class="hljs-params">                        Bundle extras, <span class="hljs-type">boolean</span> ordered, <span class="hljs-type">boolean</span> sticky, <span class="hljs-type">int</span> sendingUser)</span> &#123;<br>                    mHandler.post(ShutdownThread.<span class="hljs-built_in">this</span>::actionDone);<br>                &#125;<br>            &#125;, <span class="hljs-literal">null</span>, UserHandle.USER_ALL, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> SystemClock.elapsedRealtime() + MAX_BROADCAST_TIME;<br>    <span class="hljs-keyword">synchronized</span> (mActionDoneSync) &#123;  <span class="hljs-comment">// 等待关机广播处理完成</span><br>        <span class="hljs-keyword">while</span> (!mActionDone) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">delay</span> <span class="hljs-operator">=</span> endTime - SystemClock.elapsedRealtime();<br>            <span class="hljs-keyword">if</span> (delay &lt;= <span class="hljs-number">0</span>) &#123;<br>                Log.w(TAG, <span class="hljs-string">&quot;Shutdown broadcast timed out&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mRebootHasProgressBar) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)((MAX_BROADCAST_TIME - delay) * <span class="hljs-number">1.0</span> *<br>                        BROADCAST_STOP_PERCENT / MAX_BROADCAST_TIME);<br>                sInstance.setRebootProgress(status, <span class="hljs-literal">null</span>);<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mActionDoneSync.wait(Math.min(delay, ACTION_DONE_POLL_WAIT_MS));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (mRebootHasProgressBar) &#123;<br>        sInstance.setRebootProgress(BROADCAST_STOP_PERCENT, <span class="hljs-literal">null</span>);<br>    &#125;<br>    shutdownTimingLog.traceEnd(); <span class="hljs-comment">// SendShutdownBroadcast</span><br>    metricEnded(METRIC_SEND_BROADCAST);<br><br>    Log.i(TAG, <span class="hljs-string">&quot;Shutting down activity manager...&quot;</span>);<br>    shutdownTimingLog.traceBegin(<span class="hljs-string">&quot;ShutdownActivityManager&quot;</span>);<br>    metricStarted(METRIC_AM);<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">IActivityManager</span> <span class="hljs-variable">am</span> <span class="hljs-operator">=</span><br>            IActivityManager.Stub.asInterface(ServiceManager.checkService(<span class="hljs-string">&quot;activity&quot;</span>));<br>    <span class="hljs-keyword">if</span> (am != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            am.shutdown(MAX_BROADCAST_TIME);  <span class="hljs-comment">// ams处理shutdown</span><br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (mRebootHasProgressBar) &#123;<br>        sInstance.setRebootProgress(ACTIVITY_MANAGER_STOP_PERCENT, <span class="hljs-literal">null</span>);<br>    &#125;<br>    shutdownTimingLog.traceEnd();<span class="hljs-comment">// ShutdownActivityManager</span><br>    metricEnded(METRIC_AM);<br><br>    Log.i(TAG, <span class="hljs-string">&quot;Shutting down package manager...&quot;</span>);<br>    shutdownTimingLog.traceBegin(<span class="hljs-string">&quot;ShutdownPackageManager&quot;</span>);<br>    metricStarted(METRIC_PM);<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">PackageManagerInternal</span> <span class="hljs-variable">pm</span> <span class="hljs-operator">=</span> LocalServices.getService(PackageManagerInternal.class);<br>    <span class="hljs-keyword">if</span> (pm != <span class="hljs-literal">null</span>) &#123;<br>        pm.shutdown();  <span class="hljs-comment">// pms处理shutdown</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (mRebootHasProgressBar) &#123;<br>        sInstance.setRebootProgress(PACKAGE_MANAGER_STOP_PERCENT, <span class="hljs-literal">null</span>);<br>    &#125;<br>    shutdownTimingLog.traceEnd(); <span class="hljs-comment">// ShutdownPackageManager</span><br>    metricEnded(METRIC_PM);<br><br>    <span class="hljs-comment">// Shutdown radios.</span><br>    shutdownTimingLog.traceBegin(<span class="hljs-string">&quot;ShutdownRadios&quot;</span>);<br>    metricStarted(METRIC_RADIOS);<br>    shutdownRadios(MAX_RADIO_WAIT_TIME);<br>    <span class="hljs-keyword">if</span> (mRebootHasProgressBar) &#123;<br>        sInstance.setRebootProgress(RADIO_STOP_PERCENT, <span class="hljs-literal">null</span>);<br>    &#125;<br>    shutdownTimingLog.traceEnd(); <span class="hljs-comment">// ShutdownRadios</span><br>    metricEnded(METRIC_RADIOS);<br><br>    <span class="hljs-keyword">if</span> (mRebootHasProgressBar) &#123;<br>        sInstance.setRebootProgress(MOUNT_SERVICE_STOP_PERCENT, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// If it&#x27;s to reboot to install an update and uncrypt hasn&#x27;t been</span><br>        <span class="hljs-comment">// done yet, trigger it now.</span><br>        uncrypt();<br>    &#125;<br><br>    <span class="hljs-comment">// Wait for the check points dump thread to finish, or kill it if not finished in time.</span><br>    shutdownTimingLog.traceBegin(<span class="hljs-string">&quot;ShutdownCheckPointsDumpWait&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        dumpCheckPointsThread.join(MAX_CHECK_POINTS_DUMP_WAIT_TIME);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException ex) &#123;<br>    &#125;<br>    shutdownTimingLog.traceEnd(); <span class="hljs-comment">// ShutdownCheckPointsDumpWait</span><br><br>    shutdownTimingLog.traceEnd(); <span class="hljs-comment">// SystemServerShutdown</span><br>    metricEnded(METRIC_SYSTEM_SERVER);<br>    saveMetrics(mReboot, mReason);<br>    <span class="hljs-comment">// Remaining work will be done by init, including vold shutdown</span><br>    rebootOrShutdown(mContext, mReboot, mReason);  <span class="hljs-comment">// 继续执行</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>-&gt; ShutdownThread#rebootOrShutdown</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/power/ShutdownThread.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rebootOrShutdown</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Context context, <span class="hljs-type">boolean</span> reboot, String reason)</span> &#123;<br>    <span class="hljs-keyword">if</span> (reboot) &#123;  <span class="hljs-comment">// 重启</span><br>        Log.i(TAG, <span class="hljs-string">&quot;Rebooting, reason: &quot;</span> + reason);<br>        PowerManagerService.lowLevelReboot(reason);<br>        Log.e(TAG, <span class="hljs-string">&quot;Reboot failed, will attempt shutdown instead&quot;</span>);<br>        reason = <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SHUTDOWN_VIBRATE_MS &gt; <span class="hljs-number">0</span> &amp;&amp; context != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 关机前振动</span><br>        <span class="hljs-type">Vibrator</span> <span class="hljs-variable">vibrator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemVibrator</span>(context);<br>        ...<br>    &#125;<br>    <span class="hljs-comment">// Shutdown power</span><br>    Log.i(TAG, <span class="hljs-string">&quot;Performing low-level shutdown...&quot;</span>);<br>    PowerManagerService.lowLevelShutdown(reason);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>-&gt; PowerManagerService#lowLevelShutdown</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lowLevelShutdown</span><span class="hljs-params">(String reason)</span> &#123;<br>    <span class="hljs-keyword">if</span> (reason == <span class="hljs-literal">null</span>) &#123;<br>        reason = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    SystemProperties.set(<span class="hljs-string">&quot;sys.powerctl&quot;</span>, <span class="hljs-string">&quot;shutdown,&quot;</span> + reason);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过设置属性<code>sys.powerctl</code>来通知Init处理shutdown，Init的property service将会接受设置的值并进行处理。</p><p>属性设置成功后：</p><ul><li>-&gt; init#PropertyChanged</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp">system/core/init/init.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PropertyChanged</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; name, <span class="hljs-type">const</span> std::string&amp; value)</span> </span>&#123;<br>    <span class="hljs-comment">// If the property is sys.powerctl, we bypass the event queue and immediately handle it.</span><br>    <span class="hljs-comment">// This is to ensure that init will always and immediately shutdown/reboot, regardless of</span><br>    <span class="hljs-comment">// if there are other pending events to process or if init is waiting on an exec service or</span><br>    <span class="hljs-comment">// waiting on a property.</span><br>    <span class="hljs-comment">// In non-thermal-shutdown case, &#x27;shutdown&#x27; trigger will be fired to let device specific</span><br>    <span class="hljs-comment">// commands to be executed.</span><br>    <span class="hljs-keyword">if</span> (name == <span class="hljs-string">&quot;sys.powerctl&quot;</span>) &#123;  <span class="hljs-comment">// 处理sys.powerctl属性变化</span><br>        <span class="hljs-built_in">trigger_shutdown</span>(value);  <span class="hljs-comment">// 触发关机</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (property_triggers_enabled) &#123;<br>        ActionManager::<span class="hljs-built_in">GetInstance</span>().<span class="hljs-built_in">QueuePropertyChange</span>(name, value);<br>        <span class="hljs-built_in">WakeMainInitThread</span>();<br>    &#125;<br><br>    prop_waiter_state.<span class="hljs-built_in">CheckAndResetWait</span>(name, value);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>-&gt; ShutdownState#TriggerShutdown</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp">system/core/init/init.cpp<br><span class="hljs-type">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShutdownState</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TriggerShutdown</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; command)</span> </span>&#123;<br>        <span class="hljs-comment">// We can&#x27;t call HandlePowerctlMessage() directly in this function,</span><br>        <span class="hljs-comment">// because it modifies the contents of the action queue, which can cause the action queue</span><br>        <span class="hljs-comment">// to get into a bad state if this function is called from a command being executed by the</span><br>        <span class="hljs-comment">// action queue.  Instead we set this flag and ensure that shutdown happens before the next</span><br>        <span class="hljs-comment">// command is run in the main init loop.</span><br>        <span class="hljs-keyword">auto</span> lock = std::lock_guard&#123;shutdown_command_lock_&#125;;<br>        shutdown_command_ = command;<br>        do_shutdown_ = <span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">WakeMainInitThread</span>();  <span class="hljs-comment">// 唤醒主线程处理</span><br>    &#125;<br>    ...<br>&#125; shutdown_state;<br></code></pre></td></tr></table></figure><ul><li>-&gt; SecondStageMain主线程循环</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">system/core/init/init.cpp<br><span class="hljs-keyword">auto</span> shutdown_command = shutdown_state.<span class="hljs-built_in">CheckShutdown</span>();<br><span class="hljs-keyword">if</span> (shutdown_command) &#123;<br>    <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;Got shutdown_command &#x27;&quot;</span> &lt;&lt; *shutdown_command<br>              &lt;&lt; <span class="hljs-string">&quot;&#x27; Calling HandlePowerctlMessage()&quot;</span>;<br>    <span class="hljs-built_in">HandlePowerctlMessage</span>(*shutdown_command);<br>    shutdown_state.<span class="hljs-built_in">set_do_shutdown</span>(<span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>-&gt; reboot#HandlePowerctlMessage</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs cpp">system/core/init/reboot.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HandlePowerctlMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; command)</span> </span>&#123;<br>    ...<br>    <span class="hljs-keyword">if</span> (cmd_params[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;shutdown&quot;</span>) &#123; <span class="hljs-comment">// 处理关机</span><br>        cmd = ANDROID_RB_POWEROFF;<br>        <span class="hljs-keyword">if</span> (cmd_params.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (cmd_params[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;userrequested&quot;</span>) &#123;<br>                <span class="hljs-comment">// The shutdown reason is PowerManager.SHUTDOWN_USER_REQUESTED.</span><br>                <span class="hljs-comment">// Run fsck once the file system is remounted in read-only mode.</span><br>                run_fsck = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd_params[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;thermal&quot;</span>) &#123;<br>                <span class="hljs-comment">// Turn off sources of heat immediately.</span><br>                <span class="hljs-built_in">TurnOffBacklight</span>();<br>                <span class="hljs-comment">// run_fsck is false to avoid delay</span><br>                cmd = ANDROID_RB_THERMOFF;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd_params[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;reboot&quot;</span>) &#123;  <span class="hljs-comment">// 处理重启</span><br>        cmd = ANDROID_RB_RESTART2;<br>        <span class="hljs-keyword">if</span> (cmd_params.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>) &#123;<br>            reboot_target = cmd_params[<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (reboot_target == <span class="hljs-string">&quot;userspace&quot;</span>) &#123;<br>                <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;Userspace reboot requested&quot;</span>;<br>                userspace_reboot = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-comment">// adb reboot fastboot should boot into bootloader for devices not</span><br>            <span class="hljs-comment">// supporting logical partitions.</span><br>            <span class="hljs-keyword">if</span> (reboot_target == <span class="hljs-string">&quot;fastboot&quot;</span> &amp;&amp;<br>                !android::base::<span class="hljs-built_in">GetBoolProperty</span>(<span class="hljs-string">&quot;ro.boot.dynamic_partitions&quot;</span>, <span class="hljs-literal">false</span>)) &#123;<br>                reboot_target = <span class="hljs-string">&quot;bootloader&quot;</span>;<br>            &#125;<br>            <span class="hljs-comment">// When rebooting to the bootloader notify the bootloader writing</span><br>            <span class="hljs-comment">// also the BCB.</span><br>            <span class="hljs-keyword">if</span> (reboot_target == <span class="hljs-string">&quot;bootloader&quot;</span>) &#123;<br>                std::string err;<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">write_reboot_bootloader</span>(&amp;err)) &#123;<br>                    <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;reboot-bootloader: Error writing &quot;</span><br>                                  <span class="hljs-string">&quot;bootloader_message: &quot;</span><br>                               &lt;&lt; err;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (reboot_target == <span class="hljs-string">&quot;recovery&quot;</span>) &#123;<br>                bootloader_message boot = &#123;&#125;;<br>                <span class="hljs-keyword">if</span> (std::string err; !<span class="hljs-built_in">read_bootloader_message</span>(&amp;boot, &amp;err)) &#123;<br>                    <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;Failed to read bootloader message: &quot;</span> &lt;&lt; err;<br>                &#125;<br>                <span class="hljs-comment">// Update the boot command field if it&#x27;s empty, and preserve</span><br>                <span class="hljs-comment">// the other arguments in the bootloader message.</span><br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CommandIsPresent</span>(&amp;boot)) &#123;<br>                    <span class="hljs-built_in">strlcpy</span>(boot.command, <span class="hljs-string">&quot;boot-recovery&quot;</span>, <span class="hljs-built_in">sizeof</span>(boot.command));<br>                    <span class="hljs-keyword">if</span> (std::string err; !<span class="hljs-built_in">write_bootloader_message</span>(boot, &amp;err)) &#123;<br>                        <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;Failed to set bootloader message: &quot;</span> &lt;&lt; err;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (reboot_target == <span class="hljs-string">&quot;quiescent&quot;</span>) &#123;<br>                bootloader_message boot = &#123;&#125;;<br>                <span class="hljs-keyword">if</span> (std::string err; !<span class="hljs-built_in">read_bootloader_message</span>(&amp;boot, &amp;err)) &#123;<br>                    <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;Failed to read bootloader message: &quot;</span> &lt;&lt; err;<br>                &#125;<br>                <span class="hljs-comment">// Update the boot command field if it&#x27;s empty, and preserve</span><br>                <span class="hljs-comment">// the other arguments in the bootloader message.</span><br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CommandIsPresent</span>(&amp;boot)) &#123;<br>                    <span class="hljs-built_in">strlcpy</span>(boot.command, <span class="hljs-string">&quot;boot-quiescent&quot;</span>, <span class="hljs-built_in">sizeof</span>(boot.command));<br>                    <span class="hljs-keyword">if</span> (std::string err; !<span class="hljs-built_in">write_bootloader_message</span>(boot, &amp;err)) &#123;<br>                        <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;Failed to set bootloader message: &quot;</span> &lt;&lt; err;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (reboot_target == <span class="hljs-string">&quot;sideload&quot;</span> || reboot_target == <span class="hljs-string">&quot;sideload-auto-reboot&quot;</span> ||<br>                       reboot_target == <span class="hljs-string">&quot;fastboot&quot;</span>) &#123;<br>                std::string arg = reboot_target == <span class="hljs-string">&quot;sideload-auto-reboot&quot;</span> ? <span class="hljs-string">&quot;sideload_auto_reboot&quot;</span><br>                                                                          : reboot_target;<br>                <span class="hljs-type">const</span> std::vector&lt;std::string&gt; options = &#123;<br>                        <span class="hljs-string">&quot;--&quot;</span> + arg,<br>                &#125;;<br>                std::string err;<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">write_bootloader_message</span>(options, &amp;err)) &#123;<br>                    <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;Failed to set bootloader message: &quot;</span> &lt;&lt; err;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                reboot_target = <span class="hljs-string">&quot;recovery&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// If there are additional parameter, pass them along</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">2</span>; (cmd_params.<span class="hljs-built_in">size</span>() &gt; i) &amp;&amp; cmd_params[i].<span class="hljs-built_in">size</span>(); ++i) &#123;<br>                reboot_target += <span class="hljs-string">&quot;,&quot;</span> + cmd_params[i];<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        command_invalid = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (command_invalid) &#123;<br>        <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;powerctl: unrecognized command &#x27;&quot;</span> &lt;&lt; command &lt;&lt; <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// We do not want to process any messages (queue&#x27;ing triggers, shutdown messages, control</span><br>    <span class="hljs-comment">// messages, etc) from properties during reboot.</span><br>    <span class="hljs-built_in">StopSendingMessages</span>();<br><br>    <span class="hljs-keyword">if</span> (userspace_reboot) &#123;<br>        <span class="hljs-built_in">HandleUserspaceReboot</span>();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;Clear action queue and start shutdown trigger&quot;</span>;<br>    ActionManager::<span class="hljs-built_in">GetInstance</span>().<span class="hljs-built_in">ClearQueue</span>();<br>    <span class="hljs-comment">// Queue shutdown trigger first</span><br>    ActionManager::<span class="hljs-built_in">GetInstance</span>().<span class="hljs-built_in">QueueEventTrigger</span>(<span class="hljs-string">&quot;shutdown&quot;</span>);<br>    <span class="hljs-comment">// Queue built-in shutdown_done</span><br>    <span class="hljs-keyword">auto</span> shutdown_handler = [cmd, command, reboot_target, run_fsck](<span class="hljs-type">const</span> BuiltinArguments&amp;) &#123;<br>        <span class="hljs-built_in">DoReboot</span>(cmd, command, reboot_target, run_fsck);<br>        <span class="hljs-keyword">return</span> Result&lt;<span class="hljs-type">void</span>&gt;&#123;&#125;;<br>    &#125;;<br>    <span class="hljs-comment">// 将shutdown封装为&lt;Builtin Action&gt;并添加到队列，之后在主循环被处理，接着DoReboot将被调用</span><br>    ActionManager::<span class="hljs-built_in">GetInstance</span>().<span class="hljs-built_in">QueueBuiltinAction</span>(shutdown_handler, <span class="hljs-string">&quot;shutdown_done&quot;</span>);<br><br>    <span class="hljs-built_in">EnterShutdown</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>EnterShutdown用以清除wait prop和 pending exec flag</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">system/core/init/reboot.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">EnterShutdown</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;Entering shutdown mode&quot;</span>;<br>    shutting_down = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// Skip wait for prop if it is in progress</span><br>    <span class="hljs-built_in">ResetWaitForProp</span>();<br>    <span class="hljs-comment">// Clear EXEC flag if there is one pending</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; s : ServiceList::<span class="hljs-built_in">GetInstance</span>()) &#123;<br>        s-&gt;<span class="hljs-built_in">UnSetExec</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>-&gt; reboot#DoReboot</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs cpp">system/core/init/reboot.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">DoReboot</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">const</span> std::string&amp; reason, <span class="hljs-type">const</span> std::string&amp; reboot_target,</span></span><br><span class="hljs-params"><span class="hljs-function">                     <span class="hljs-type">bool</span> run_fsck)</span> </span>&#123;<br>    Timer t;<br>    <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;Reboot start, reason: &quot;</span> &lt;&lt; reason &lt;&lt; <span class="hljs-string">&quot;, reboot_target: &quot;</span> &lt;&lt; reboot_target;<br><br>    <span class="hljs-type">bool</span> is_thermal_shutdown = cmd == ANDROID_RB_THERMOFF;<br><br>    <span class="hljs-keyword">auto</span> shutdown_timeout = <span class="hljs-number">0</span>ms;<br>    <span class="hljs-keyword">if</span> (!SHUTDOWN_ZERO_TIMEOUT) &#123;<br>        <span class="hljs-keyword">constexpr</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> shutdown_timeout_default = <span class="hljs-number">6</span>;<br>        <span class="hljs-keyword">constexpr</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> max_thermal_shutdown_timeout = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">auto</span> shutdown_timeout_final = android::base::<span class="hljs-built_in">GetUintProperty</span>(<span class="hljs-string">&quot;ro.build.shutdown_timeout&quot;</span>,<br>                                                                     shutdown_timeout_default);<br>        <span class="hljs-keyword">if</span> (is_thermal_shutdown &amp;&amp; shutdown_timeout_final &gt; max_thermal_shutdown_timeout) &#123;<br>            shutdown_timeout_final = max_thermal_shutdown_timeout;<br>        &#125;<br>        shutdown_timeout = std::chrono::<span class="hljs-built_in">seconds</span>(shutdown_timeout_final);<br>    &#125;<br>    <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;Shutdown timeout: &quot;</span> &lt;&lt; shutdown_timeout.<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot; ms&quot;</span>;<br><br>    <span class="hljs-type">sem_t</span> reboot_semaphore;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sem_init</span>(&amp;reboot_semaphore, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-comment">// These should never fail, but if they do, skip the graceful reboot and reboot immediately.</span><br>        <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;sem_init() fail and RebootSystem() return!&quot;</span>;<br>        <span class="hljs-built_in">RebootSystem</span>(cmd, reboot_target);<br>    &#125;<br><br>    <span class="hljs-comment">// Start a thread to monitor init shutdown process</span><br>    <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;Create reboot monitor thread.&quot;</span>;<br>    <span class="hljs-type">bool</span> reboot_monitor_run = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 创建monitor线程</span><br>    <span class="hljs-function">std::thread <span class="hljs-title">reboot_monitor_thread</span><span class="hljs-params">(&amp;RebootMonitorThread, cmd, reboot_target, &amp;reboot_semaphore,</span></span><br><span class="hljs-params"><span class="hljs-function">                                      shutdown_timeout, &amp;reboot_monitor_run)</span></span>;<br>    reboot_monitor_thread.<span class="hljs-built_in">detach</span>();<br><br>    <span class="hljs-comment">// Start reboot monitor thread</span><br>    <span class="hljs-built_in">sem_post</span>(&amp;reboot_semaphore);<br><br>    <span class="hljs-comment">// Ensure last reboot reason is reduced to canonical</span><br>    <span class="hljs-comment">// alias reported in bootloader or system boot reason.</span><br>    <span class="hljs-type">size_t</span> skip = <span class="hljs-number">0</span>;<br>    std::vector&lt;std::string&gt; reasons = <span class="hljs-built_in">Split</span>(reason, <span class="hljs-string">&quot;,&quot;</span>);<br>    <span class="hljs-keyword">if</span> (reasons.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span> &amp;&amp; reasons[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;reboot&quot;</span> &amp;&amp;<br>        (reasons[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;recovery&quot;</span> || reasons[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;bootloader&quot;</span> || reasons[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;cold&quot;</span> ||<br>         reasons[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;hard&quot;</span> || reasons[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;warm&quot;</span>)) &#123;<br>        skip = <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;reboot,&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 把重启原因写到&quot;persist.sys.boot.reason&quot;属性和&quot;/metadata/bootstat/&quot;文件</span><br>    <span class="hljs-built_in">PersistRebootReason</span>(reason.<span class="hljs-built_in">c_str</span>() + skip, <span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">// 如果/data没有挂载，直接调用RebootSystem()</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">IsDataMounted</span>(<span class="hljs-string">&quot;*&quot;</span>)) &#123;<br>        <span class="hljs-built_in">sync</span>();<br>        <span class="hljs-built_in">RebootSystem</span>(cmd, reboot_target);<br>        <span class="hljs-built_in">abort</span>();<br>    &#125;<br><br>    <span class="hljs-type">bool</span> do_shutdown_animation = <span class="hljs-built_in">GetBoolProperty</span>(<span class="hljs-string">&quot;ro.init.shutdown_animation&quot;</span>, <span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// watchdogd is a vendor specific component but should be alive to complete shutdown safely.</span><br>    <span class="hljs-type">const</span> std::set&lt;std::string&gt; to_starts&#123;<span class="hljs-string">&quot;watchdogd&quot;</span>&#125;;<br>    std::set&lt;std::string&gt; stop_first;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; s : ServiceList::<span class="hljs-built_in">GetInstance</span>()) &#123;<br>        <span class="hljs-keyword">if</span> (kDebuggingServices.<span class="hljs-built_in">count</span>(s-&gt;<span class="hljs-built_in">name</span>())) &#123;<br>            <span class="hljs-comment">// keep debugging tools until non critical ones are all gone.</span><br>            s-&gt;<span class="hljs-built_in">SetShutdownCritical</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (to_starts.<span class="hljs-built_in">count</span>(s-&gt;<span class="hljs-built_in">name</span>())) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> result = s-&gt;<span class="hljs-built_in">Start</span>(); !result.<span class="hljs-built_in">ok</span>()) &#123;<br>                <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;Could not start shutdown &#x27;to_start&#x27; service &#x27;&quot;</span> &lt;&lt; s-&gt;<span class="hljs-built_in">name</span>()<br>                           &lt;&lt; <span class="hljs-string">&quot;&#x27;: &quot;</span> &lt;&lt; result.<span class="hljs-built_in">error</span>();<br>            &#125;<br>            s-&gt;<span class="hljs-built_in">SetShutdownCritical</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (do_shutdown_animation) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s-&gt;<span class="hljs-built_in">IsShutdownCritical</span>()) &#123;<br>            <span class="hljs-comment">// Start shutdown critical service if not started.</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> result = s-&gt;<span class="hljs-built_in">Start</span>(); !result.<span class="hljs-built_in">ok</span>()) &#123;<br>                <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;Could not start shutdown critical service &#x27;&quot;</span> &lt;&lt; s-&gt;<span class="hljs-built_in">name</span>()<br>                           &lt;&lt; <span class="hljs-string">&quot;&#x27;: &quot;</span> &lt;&lt; result.<span class="hljs-built_in">error</span>();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            stop_first.<span class="hljs-built_in">insert</span>(s-&gt;<span class="hljs-built_in">name</span>());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// remaining operations (specifically fsck) may take a substantial duration</span><br>    <span class="hljs-keyword">if</span> (!do_shutdown_animation &amp;&amp; (cmd == ANDROID_RB_POWEROFF || is_thermal_shutdown)) &#123;<br>        <span class="hljs-built_in">TurnOffBacklight</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 处理关机动画</span><br>    Service* boot_anim = ServiceList::<span class="hljs-built_in">GetInstance</span>().<span class="hljs-built_in">FindService</span>(<span class="hljs-string">&quot;bootanim&quot;</span>);<br>    Service* surface_flinger = ServiceList::<span class="hljs-built_in">GetInstance</span>().<span class="hljs-built_in">FindService</span>(<span class="hljs-string">&quot;surfaceflinger&quot;</span>);<br>    <span class="hljs-keyword">if</span> (boot_anim != <span class="hljs-literal">nullptr</span> &amp;&amp; surface_flinger != <span class="hljs-literal">nullptr</span> &amp;&amp; surface_flinger-&gt;<span class="hljs-built_in">IsRunning</span>()) &#123;<br><br>        <span class="hljs-keyword">if</span> (do_shutdown_animation) &#123;<br>            <span class="hljs-built_in">SetProperty</span>(<span class="hljs-string">&quot;service.bootanim.exit&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>            <span class="hljs-built_in">SetProperty</span>(<span class="hljs-string">&quot;service.bootanim.progress&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>            <span class="hljs-comment">// Could be in the middle of animation. Stop and start so that it can pick</span><br>            <span class="hljs-comment">// up the right mode.</span><br>            boot_anim-&gt;<span class="hljs-built_in">Stop</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; service : ServiceList::<span class="hljs-built_in">GetInstance</span>()) &#123;<br>            <span class="hljs-keyword">if</span> (service-&gt;<span class="hljs-built_in">classnames</span>().<span class="hljs-built_in">count</span>(<span class="hljs-string">&quot;animation&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// start all animation classes if stopped.</span><br>            <span class="hljs-keyword">if</span> (do_shutdown_animation) &#123;<br>                service-&gt;<span class="hljs-built_in">Start</span>();<br>            &#125;<br>            service-&gt;<span class="hljs-built_in">SetShutdownCritical</span>();  <span class="hljs-comment">// will not check animation class separately</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (do_shutdown_animation) &#123;<br>            boot_anim-&gt;<span class="hljs-built_in">Start</span>();<br>            surface_flinger-&gt;<span class="hljs-built_in">SetShutdownCritical</span>();<br>            boot_anim-&gt;<span class="hljs-built_in">SetShutdownCritical</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// optional shutdown step</span><br>    <span class="hljs-comment">// 1. terminate all services except shutdown critical ones. wait for delay to finish</span><br>    <span class="hljs-keyword">if</span> (shutdown_timeout &gt; <span class="hljs-number">0</span>ms) &#123;<br>        <span class="hljs-built_in">StopServicesAndLogViolations</span>(stop_first, shutdown_timeout / <span class="hljs-number">2</span>, <span class="hljs-literal">true</span> <span class="hljs-comment">/* SIGTERM */</span>);<br>    &#125;<br>    <span class="hljs-comment">// Send SIGKILL to ones that didn&#x27;t terminate cleanly.</span><br>    <span class="hljs-built_in">StopServicesAndLogViolations</span>(stop_first, <span class="hljs-number">0</span>ms, <span class="hljs-literal">false</span> <span class="hljs-comment">/* SIGKILL */</span>);<br>    <span class="hljs-built_in">SubcontextTerminate</span>();<br>    <span class="hljs-comment">// Reap subcontext pids.</span><br>    <span class="hljs-built_in">ReapAnyOutstandingChildren</span>();<br><br>    <span class="hljs-comment">// 3. send volume abort_fuse and volume shutdown to vold</span><br>    Service* vold_service = ServiceList::<span class="hljs-built_in">GetInstance</span>().<span class="hljs-built_in">FindService</span>(<span class="hljs-string">&quot;vold&quot;</span>);<br>    <span class="hljs-keyword">if</span> (vold_service != <span class="hljs-literal">nullptr</span> &amp;&amp; vold_service-&gt;<span class="hljs-built_in">IsRunning</span>()) &#123;<br>        <span class="hljs-comment">// Manually abort FUSE connections, since the FUSE daemon is already dead</span><br>        <span class="hljs-comment">// at this point, and unmounting it might hang.</span><br>        <span class="hljs-built_in">CallVdc</span>(<span class="hljs-string">&quot;volume&quot;</span>, <span class="hljs-string">&quot;abort_fuse&quot;</span>);<br>        <span class="hljs-built_in">CallVdc</span>(<span class="hljs-string">&quot;volume&quot;</span>, <span class="hljs-string">&quot;shutdown&quot;</span>);<br>        vold_service-&gt;<span class="hljs-built_in">Stop</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;vold not running, skipping vold shutdown&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">// logcat stopped here</span><br>    <span class="hljs-built_in">StopServices</span>(kDebuggingServices, <span class="hljs-number">0</span>ms, <span class="hljs-literal">false</span> <span class="hljs-comment">/* SIGKILL */</span>);<br>    <span class="hljs-comment">// 4. sync, try umount, and optionally run fsck for user shutdown</span><br>    &#123;<br>        Timer sync_timer;<br>        <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;sync() before umount...&quot;</span>;<br>        <span class="hljs-built_in">sync</span>();<br>        <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;sync() before umount took&quot;</span> &lt;&lt; sync_timer;<br>    &#125;<br>    <span class="hljs-comment">// 5. drop caches and disable zram backing device, if exist</span><br>    <span class="hljs-built_in">KillZramBackingDevice</span>();<br><br>    <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;Ready to unmount apexes. So far shutdown sequence took &quot;</span> &lt;&lt; t;<br>    <span class="hljs-comment">// 6. unmount active apexes, otherwise they might prevent clean unmount of /data.</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> ret = <span class="hljs-built_in">UnmountAllApexes</span>(); !ret.<span class="hljs-built_in">ok</span>()) &#123;<br>        <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; ret.<span class="hljs-built_in">error</span>();<br>    &#125;<br>    UmountStat stat =<br>            <span class="hljs-built_in">TryUmountAndFsck</span>(cmd, run_fsck, shutdown_timeout - t.<span class="hljs-built_in">duration</span>(), &amp;reboot_semaphore);<br>    <span class="hljs-comment">// Follow what linux shutdown is doing: one more sync with little bit delay</span><br>    &#123;<br>        Timer sync_timer;<br>        <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;sync() after umount...&quot;</span>;<br>        <span class="hljs-built_in">sync</span>();<br>        <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;sync() after umount took&quot;</span> &lt;&lt; sync_timer;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!is_thermal_shutdown) std::this_thread::<span class="hljs-built_in">sleep_for</span>(<span class="hljs-number">100</span>ms);<br>    <span class="hljs-built_in">LogShutdownTime</span>(stat, &amp;t);<br><br>    <span class="hljs-comment">// Send signal to terminate reboot monitor thread.</span><br>    reboot_monitor_run = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">sem_post</span>(&amp;reboot_semaphore);<br><br>    <span class="hljs-comment">// Reboot regardless of umount status. If umount fails, fsck after reboot will fix it.</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsDataMounted</span>(<span class="hljs-string">&quot;f2fs&quot;</span>)) &#123;<br>        <span class="hljs-type">uint32_t</span> flag = F2FS_GOING_DOWN_FULLSYNC;<br>        <span class="hljs-function">unique_fd <span class="hljs-title">fd</span><span class="hljs-params">(TEMP_FAILURE_RETRY(open(<span class="hljs-string">&quot;/data&quot;</span>, O_RDONLY)))</span></span>;<br>        <span class="hljs-type">int</span> ret = <span class="hljs-built_in">ioctl</span>(fd, F2FS_IOC_SHUTDOWN, &amp;flag);<br>        <span class="hljs-keyword">if</span> (ret) &#123;<br>            <span class="hljs-built_in">PLOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;Shutdown /data: &quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;Shutdown /data&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">RebootSystem</span>(cmd, reboot_target);<br>    <span class="hljs-built_in">abort</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>-&gt; reboot_utils#RebootSystem</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp">system/core/init/reboot_utils.cpp<br><span class="hljs-type">void</span> __attribute__((noreturn)) <span class="hljs-built_in">RebootSystem</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">const</span> std::string&amp; rebootTarget, <span class="hljs-type">const</span> std::string&amp; reboot_reason) &#123;<br>    <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;Reboot ending, jumping to kernel&quot;</span>;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">IsRebootCapable</span>()) &#123;<br>        <span class="hljs-comment">// On systems where init does not have the capability of rebooting the</span><br>        <span class="hljs-comment">// device, just exit cleanly.</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">switch</span> (cmd) &#123;<br>        <span class="hljs-keyword">case</span> ANDROID_RB_POWEROFF:<br>            <span class="hljs-built_in">reboot</span>(RB_POWER_OFF);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> ANDROID_RB_RESTART2:<br>            <span class="hljs-built_in">syscall</span>(__NR_reboot, LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2,<br>                    LINUX_REBOOT_CMD_RESTART2, rebootTarget.<span class="hljs-built_in">c_str</span>());<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> ANDROID_RB_THERMOFF:<br>            <span class="hljs-keyword">if</span> (android::base::<span class="hljs-built_in">GetBoolProperty</span>(<span class="hljs-string">&quot;ro.thermal_warmreset&quot;</span>, <span class="hljs-literal">false</span>)) &#123;<br>                std::string reason = <span class="hljs-string">&quot;shutdown,thermal&quot;</span>;<br>                <span class="hljs-keyword">if</span> (!reboot_reason.<span class="hljs-built_in">empty</span>()) reason = reboot_reason;<br><br>                <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;Try to trigger a warm reset for thermal shutdown&quot;</span>;<br>                <span class="hljs-built_in">syscall</span>(__NR_reboot, LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2,<br>                        LINUX_REBOOT_CMD_RESTART2, reason.<span class="hljs-built_in">c_str</span>());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">reboot</span>(RB_POWER_OFF);<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-comment">// In normal case, reboot should not return.</span><br>    <span class="hljs-built_in">PLOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;reboot call returned&quot;</span>;<br>    <span class="hljs-built_in">abort</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>-&gt; bionic&#x2F;reboot#reboot</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">bionic/libc/bionic/reboot.cpp<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/reboot.h&gt;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-type">int</span> __reboot(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">void</span>*);<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">reboot</span><span class="hljs-params">(<span class="hljs-type">int</span> mode)</span> </span>&#123;<br>    <span class="hljs-comment">// 调用linux reboot函数</span><br>    <span class="hljs-keyword">return</span> __reboot(LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2, mode, <span class="hljs-literal">nullptr</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关机流程总结"><a href="#关机流程总结" class="headerlink" title="关机流程总结"></a>关机流程总结</h2><p>ShutdownThread#shutdown -&gt; PowerManagerService#lowLevelShutdown -&gt; 设置属性”sys.powerctl” -&gt; Init处理关机 -&gt; bionic reboot -&gt; linux __reboot</p><h2 id="自动关机触发点"><a href="#自动关机触发点" class="headerlink" title="自动关机触发点"></a>自动关机触发点</h2><h4 id="低电"><a href="#低电" class="headerlink" title="低电"></a>低电</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/BatteryService.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdownIfNoPowerLocked</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//shouldShutdownLocked判断是否需要关机</span><br>    <span class="hljs-keyword">if</span> (shouldShutdownLocked()) &#123;<br>        mHandler.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">if</span> (mActivityManagerInternal.isSystemReady()) &#123;<br>                    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_REQUEST_SHUTDOWN);<br>                    intent.putExtra(Intent.EXTRA_KEY_CONFIRM, <span class="hljs-literal">false</span>);<br>                    intent.putExtra(Intent.EXTRA_REASON,<br>                            PowerManager.SHUTDOWN_LOW_BATTERY);<br>                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br>                    mContext.startActivityAsUser(intent, UserHandle.CURRENT);<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldShutdownLocked</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (mHealthInfo.batteryCapacityLevel != BatteryCapacityLevel.UNSUPPORTED) &#123;<br>        <span class="hljs-keyword">return</span> (mHealthInfo.batteryCapacityLevel == BatteryCapacityLevel.CRITICAL);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (mHealthInfo.batteryLevel &gt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 电量大于0，不关机</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 没有电池的设备不关机</span><br>    <span class="hljs-keyword">if</span> (!mHealthInfo.batteryPresent) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// If battery state is not CHARGING, shutdown.</span><br>    <span class="hljs-comment">// - If battery present and state == unknown, this is an unexpected error state.</span><br>    <span class="hljs-comment">// - If level &lt;= 0 and state == full, this is also an unexpected state</span><br>    <span class="hljs-comment">// - All other states (NOT_CHARGING, DISCHARGING) means it is not charging.</span><br>    <span class="hljs-comment">// 电池状态不为BATTERY_STATUS_CHARGING，关机</span><br>    <span class="hljs-keyword">return</span> mHealthInfo.batteryStatus != BatteryManager.BATTERY_STATUS_CHARGING;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="高温"><a href="#高温" class="headerlink" title="高温"></a>高温</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/BatteryService.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdownIfOverTempLocked</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 温度大于设定值时关机，默认68.0C</span><br>    <span class="hljs-keyword">if</span> (mHealthInfo.batteryTemperatureTenthsCelsius &gt; mShutdownBatteryTemperature) &#123;<br>        mHandler.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">if</span> (mActivityManagerInternal.isSystemReady()) &#123;<br>                    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_REQUEST_SHUTDOWN);<br>                    intent.putExtra(Intent.EXTRA_KEY_CONFIRM, <span class="hljs-literal">false</span>);<br>                    intent.putExtra(Intent.EXTRA_REASON,<br>                            PowerManager.SHUTDOWN_BATTERY_THERMAL_STATE);<br>                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br>                    mContext.startActivityAsUser(intent, UserHandle.CURRENT);<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Thermal"><a href="#Thermal" class="headerlink" title="Thermal"></a>Thermal</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/power/ThermalManagerService.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdownIfNeeded</span><span class="hljs-params">(Temperature temperature)</span> &#123;<br>    <span class="hljs-keyword">if</span> (temperature.getStatus() != Temperature.THROTTLING_SHUTDOWN) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">PowerManager</span> <span class="hljs-variable">powerManager</span> <span class="hljs-operator">=</span> getContext().getSystemService(PowerManager.class);<br>    <span class="hljs-keyword">switch</span> (temperature.getType()) &#123;<br>        <span class="hljs-keyword">case</span> Temperature.TYPE_CPU:<br>            <span class="hljs-comment">// Fall through</span><br>        <span class="hljs-keyword">case</span> Temperature.TYPE_GPU:<br>            <span class="hljs-comment">// Fall through</span><br>        <span class="hljs-keyword">case</span> Temperature.TYPE_NPU:<br>            <span class="hljs-comment">// Fall through</span><br>        <span class="hljs-keyword">case</span> Temperature.TYPE_SKIN:<br>            powerManager.shutdown(<span class="hljs-literal">false</span>, PowerManager.SHUTDOWN_THERMAL_STATE, <span class="hljs-literal">false</span>);  <span class="hljs-comment">// 硬件高温</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> Temperature.TYPE_BATTERY:<br>            powerManager.shutdown(<span class="hljs-literal">false</span>, PowerManager.SHUTDOWN_BATTERY_THERMAL_STATE, <span class="hljs-literal">false</span>);  <span class="hljs-comment">// 电池高温</span><br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AMS重要的数据结构</title>
    <link href="/2024/03/10/AMS%E9%87%8D%E8%A6%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2024/03/10/AMS%E9%87%8D%E8%A6%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><h4 id="ActivityRecord"><a href="#ActivityRecord" class="headerlink" title="ActivityRecord"></a>ActivityRecord</h4><p>ActivityRecord内部记录了Activity的所有信息。因此它用来描述一个Activity，它是在启动Activity时被创建的，具体是在ActivityStarter的startActivity方法中被创建的。ActivityRecord的部分重要成员变量如下所示：</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>service</td><td>ActivityManagerService</td><td>AMS的引用</td></tr><tr><td>info</td><td>ActivityInfo</td><td>开发者在AndroidManifest中提供的Activity信息</td></tr><tr><td>launchedFromPackage</td><td>String</td><td>启动Activity的包名</td></tr><tr><td>taskAffinity</td><td>String</td><td>Activity希望归属的栈</td></tr><tr><td>task</td><td>Task</td><td>ActivityRecord所在的Task</td></tr><tr><td>app</td><td>WindowProcessController</td><td>ActivityRecord所在的应用程序进程</td></tr><tr><td>mState</td><td>State</td><td>当前Activity的状态</td></tr><tr><td>icon</td><td>int</td><td>Activity的图标资源标识符</td></tr><tr><td>theme</td><td>int</td><td>Activity的主题资源标识符</td></tr></tbody></table><p>ActivityRecord中含有该ActivityRecord所在的Task，这就将ActivityRecord和Task关联在一起，它们是Activity任务栈模型的重要成员。</p><h4 id="TaskFragment"><a href="#TaskFragment" class="headerlink" title="TaskFragment"></a>TaskFragment</h4><p>一个基本容器，可容纳 Activity 或其他 TaskFragment，还能够管理Activity生命周期及更新其可见性。</p><p>在TaskFragment中定义了一些特殊状态的Activity，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/TaskFragment.java<br><span class="hljs-keyword">private</span> <span class="hljs-type">ActivityRecord</span> <span class="hljs-variable">mPausingActivity</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <span class="hljs-comment">// 正在暂停的Activity</span><br><span class="hljs-type">ActivityRecord</span> <span class="hljs-variable">mLastPausedActivity</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <span class="hljs-comment">// 上一个已经暂停的Activity</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">ActivityRecord</span> <span class="hljs-variable">mResumedActivity</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <span class="hljs-comment">// 已经Resume的Activity</span><br></code></pre></td></tr></table></figure><h4 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h4><p>Task是一个TaskFragment（继承自TaskFragment），用来描述一个Activity任务栈，其内部也有很多的成员变量，如下所示：</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>mTaskId</td><td>int</td><td>任务栈的唯一标识符</td></tr><tr><td>affinity</td><td>String</td><td>任务栈的倾向性</td></tr><tr><td>intent</td><td>Intent</td><td>启动这个任务栈的Intent，可能为null</td></tr></tbody></table><p>Task内部存储了任务栈的所有信息，包括任务栈的唯一标识符、任务栈的倾向性、任务栈中的Activity记录等。</p><h4 id="ActivityState"><a href="#ActivityState" class="headerlink" title="ActivityState"></a>ActivityState</h4><p>在ActivityRecord中通过枚举存储了Activity的所有的状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ActivityRecord.java<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br>    INITIALIZING,<br>    STARTED,<br>    RESUMED,<br>    PAUSING,<br>    PAUSED,<br>    STOPPING,<br>    STOPPED,<br>    FINISHING,<br>    DESTROYING,<br>    DESTROYED,<br>    RESTARTING_PROCESS<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ActivityTaskSupervisor"><a href="#ActivityTaskSupervisor" class="headerlink" title="ActivityTaskSupervisor"></a>ActivityTaskSupervisor</h4><p>用来替代ActivityStackSupervisor，是Activity的核心调度类，其中有一些Activity List。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ArrayList&lt;WaitInfo&gt; mWaitingActivityLaunched = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <span class="hljs-comment">// 等待launch还不可见的Activity</span><br><span class="hljs-keyword">final</span> ArrayList&lt;ActivityRecord&gt; mStoppingActivities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <span class="hljs-comment">// 正在stop的Activity</span><br><span class="hljs-keyword">final</span> ArrayList&lt;ActivityRecord&gt; mFinishingActivities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <span class="hljs-comment">// 正在finish的Activity</span><br><span class="hljs-keyword">final</span> ArrayList&lt;ActivityRecord&gt; mNoHistoryActivities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <span class="hljs-comment">// 没有历史记录的Activity</span><br></code></pre></td></tr></table></figure><h4 id="Activity栈管理"><a href="#Activity栈管理" class="headerlink" title="Activity栈管理"></a>Activity栈管理</h4><p>有了栈管理，我们可以对应用程序进行操作，应用可以复用自身应用中以及其他应用的Activity，节省了资源。比如我们使用一款社交应用，这个应用的联系人详情界面提供了联系人的邮箱，当我们点击邮箱时会跳到发送邮件的界面。</p><img src="https://s2.loli.net/2024/01/03/SojvHKFrc3yYag2.jpg" style="zoom:50%;" /><h5 id="Launch-Mode"><a href="#Launch-Mode" class="headerlink" title="Launch Mode"></a>Launch Mode</h5><p>用于设定Activity的启动方式，无论是哪种启动方式，所启动的Activity都会位于Activity栈的栈顶，主要有以下四种Launch Mode：</p><ul><li><p>standard：默认模式，每次启动Activity都会创建一个新的Activity实例。</p></li><li><p>singleTop：如果要启动的Activity已经在栈顶，则不会重新创建Activity，同时该Activity的onNewIntent()方法会被调用。如果要启动的Activity不在栈顶，则会重新创建该Activity的实例。</p></li><li><p>singleTask：如果要启动的Activity已经存在于它想要归属的栈中，那么将栈中位于该Activity上的所有Activity出栈，同时该Activity的onNewIntent()方法会被调用。如果要启动的Activity不存在于它想要归属的栈中，如果该栈存在，则创建该Activity的实例，如果该栈不存在，则首先要创建一个新栈，然后创建该Activity实例并压入到新栈中。</p></li><li><p>singleInstance：启动Activity时，首先要创建一个新栈，然后创建该Activity实例并压入新栈中，新栈中只会存在这一个Activity实例。</p></li></ul><h5 id="Intent的FLAG"><a href="#Intent的FLAG" class="headerlink" title="Intent的FLAG"></a>Intent的FLAG</h5><p>在Intent中定义了很多FLAG，其中有几个FLAG也可以设定Activity的启动方式，如果Launch Mode和FLAG设定的Activity的启动方式有冲突，则以FLAG设定的为准。</p><ul><li>FLAG_ACTIVITY_SINGLE_TOP：和Launch Mode中的singleTop效果一样。</li><li>FLAG_ACTIVITY_NEW_TASK：和Launch Mode中的singleTask效果一样。</li><li>FLAG_ACTIVITY_CLEAR_TOP：Launch Mode中没有与此对应的模式，如果要启动的Activity已经存在于栈中，则将所有位于它上面的Activity出栈。singleTask默认具有此标记的效果。</li></ul><p>除了上述三个FLAG，还有一个FLAG和栈管理相关。</p><ul><li>FLAG_ACTIVITY_NO_HISTORY：Activity一旦退出，就不会存在于栈中。同样地，也可以在AndroidManifest.xml中设置android:noHistory。</li><li>FLAG_ACTIVITY_MULTIPLE_TASK：需要和FLAG_ACTIVITY_NEW_TASK一同使用才有效果，系统会启动一个新的栈来容纳新启动的Activity。</li><li>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS：Activity不会被放入到“最近启动的Activity”列表中。</li><li>FLAG_ACTIVITY_BROUGHT_TO_FRONT：这个标志位通常不是由应用程序中的代码设置的，而是Launch Mode为singleTask时，由系统加上的。</li><li>FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY：这个标志位通常不是由应用程序中的代码设置的，而是从历史记录中启动的（长按Home键调出）。</li><li>FLAG_ACTIVITY_CLEAR_TASK：需要和FLAG_ACTIVITY_NEW_TASK一同使用才有效果，用于清除与启动的Activity相关栈的所有其他Activity。</li></ul><h5 id="taskAffinity"><a href="#taskAffinity" class="headerlink" title="taskAffinity"></a>taskAffinity</h5><p>我们可以在AndroidManifest.xml中设置android:taskAffinity，用来指定Activity希望归属的栈，在默认情况下，同一个应用程序的所有的Activity都有着相同的taskAffinity。taskAffinity在下面两种情况时会产生效果。</p><p>（1）taskAffinity与FLAG_ACTIVITY_NEW_TASK或者singleTask配合。如果新启动Activity的taskAffinity和栈的taskAffinity相同则加入到该栈中；如果不同，就会创建新栈。</p><p>（2）taskAffinity与allowTaskReparenting配合。如果allowTaskReparenting为true，说明Activity具有转移的能力。举例：当社交应用启动了发送邮件的Activity，此时发送邮件的Activity是和社交应用处于同一个栈中的，并且这个栈位于前台。如果发送邮件的Activity的allowTaskReparenting设置为true，此后E-mail应用所在的栈位于前台时，发送邮件的Activity就会由社交应用的栈转移到与它更亲近的邮件应用（taskAffinity相同）所在的栈中。</p><img src="https://s2.loli.net/2024/01/03/54JRsOKr8vNyU7V.jpg" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AMS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AMS的启动过程</title>
    <link href="/2024/03/10/AMS%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/03/10/AMS%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>AMS的启动是在SystemServer进程中启动的。从SystemServer的main()方法开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/java/com/android/server/SystemServer.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemServer</span>().run();<br>&#125;<br></code></pre></td></tr></table></figure><p>调用了run()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/java/com/android/server/SystemServer.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-comment">// 创建消息Looper</span><br>        Looper.prepareMainLooper();<br>        ...<br>        <span class="hljs-comment">// Initialize native services.</span><br>        System.loadLibrary(<span class="hljs-string">&quot;android_servers&quot;</span>);  <span class="hljs-comment">// 1</span><br>        ...<br>        <span class="hljs-comment">// Initialize the system context.</span><br>        <span class="hljs-comment">// 创建系统的Context</span><br>        createSystemContext();<br>        ...<br>        <span class="hljs-comment">// Create the system service manager.</span><br>        mSystemServiceManager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemServiceManager</span>(mSystemContext);  <span class="hljs-comment">// 2</span><br>        mSystemServiceManager.setStartInfo(mRuntimeRestart,<br>                mRuntimeStartElapsedTime, mRuntimeStartUptime);<br>        mDumper.addDumpable(mSystemServiceManager);<br><br>        LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);<br>        ...<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-comment">// Start services.</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        t.traceBegin(<span class="hljs-string">&quot;StartServices&quot;</span>);<br>        <span class="hljs-comment">// 启动引导服务</span><br>        startBootstrapServices(t);  <span class="hljs-comment">//3</span><br>        <span class="hljs-comment">// 启动核心服务</span><br>        startCoreServices(t);  <span class="hljs-comment">// 4</span><br>        <span class="hljs-comment">// 启动其他服务</span><br>        startOtherServices(t);  <span class="hljs-comment">// 5</span><br>        <span class="hljs-comment">// 启动apex服务</span><br>        startApexServices(t);  <span class="hljs-comment">// 6</span><br>        <span class="hljs-comment">// Only update the timeout after starting all the services so that we use</span><br>        <span class="hljs-comment">// the default timeout to start system server.</span><br>        updateWatchdogTimeout(t);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-comment">// Loop forever.</span><br>    Looper.loop();<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Main thread loop unexpectedly exited&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处加载了动态库libandroid_servers.so。</p><p>注释2处创建SystemServiceManager，它会对系统的服务进行创建、启动和生命周期管理。</p><p>注释3处的startBootstrapServices()方法中用SystemServiceManager启动了ActivityManagerService、PowerManagerService、PackageManagerService等服务。</p><p>注释4处的startCoreServices()方法中则启动了BatteryService、UsageStatsService、WebViewUpdateService等服务。</p><p>注释5处的startOtherServices()方法中启动了AlarmManagerService、VrManagerService、InputManagerService等服务，主要是一些和设备功能相关的服务，是一些非紧要和不需要立即启动的服务。</p><p>注释6处的startApexServices()方法会遍历所有已安装的Apex服务，并调用它们的启动方法，使它们在系统启动时自动运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/java/com/android/server/SystemServer.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startBootstrapServices</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> TimingsTraceAndSlog t)</span> &#123;<br>    ...<br>    <span class="hljs-comment">// Activity manager runs the show.</span><br>    t.traceBegin(<span class="hljs-string">&quot;StartActivityManager&quot;</span>);<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Might need to move after migration to WM.</span><br>    <span class="hljs-type">ActivityTaskManagerService</span> <span class="hljs-variable">atm</span> <span class="hljs-operator">=</span> mSystemServiceManager.startService(<br>            ActivityTaskManagerService.Lifecycle.class).getService();<br>    mActivityManagerService = ActivityManagerService.Lifecycle.startService(<br>            mSystemServiceManager, atm);  <span class="hljs-comment">// 1</span><br>    mActivityManagerService.setSystemServiceManager(mSystemServiceManager);<br>    mActivityManagerService.setInstaller(installer);<br>    mWindowManagerGlobalLock = atm.getGlobalLock();<br>    t.traceEnd();<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>调用ActivityManagerService#Lifecycle.startService()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService$Lifecycle<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lifecycle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SystemService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActivityManagerService mService;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ActivityTaskManagerService sAtm;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Lifecycle</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>        mService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityManagerService</span>(context, sAtm);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ActivityManagerService <span class="hljs-title function_">startService</span><span class="hljs-params">(</span><br><span class="hljs-params">            SystemServiceManager ssm, ActivityTaskManagerService atm)</span> &#123;<br>        sAtm = atm;<br>        <span class="hljs-keyword">return</span> ssm.startService(ActivityManagerService.Lifecycle.class).getService();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用SystemServiceManager的startService()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/SystemServiceManager.java<br><span class="hljs-keyword">public</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SystemService</span>&gt; T <span class="hljs-title function_">startService</span><span class="hljs-params">(Class&lt;T&gt; serviceClass)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-keyword">final</span> T service;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Constructor&lt;T&gt; constructor = serviceClass.getConstructor(Context.class);<br>            service = constructor.newInstance(mContext);  <span class="hljs-comment">// 1</span><br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException ex) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException ex) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>            ...<br>        &#125;<br><br>        startService(service);  <span class="hljs-comment">// 2</span><br>        <span class="hljs-keyword">return</span> service;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startService</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> SystemService service)</span> &#123;<br>    ...<br>    <span class="hljs-comment">// Register it.</span><br>    mServices.add(service);  <span class="hljs-comment">// 3</span><br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        service.onStart();  <span class="hljs-comment">// 4</span><br>    &#125; <span class="hljs-keyword">catch</span> (RuntimeException ex) &#123;<br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处SystemServiceManager中通过反射，调用了ActivityManagerService$Lifecycle的构造方法。</p><p>注释2处又调用了startService()。</p><p>注释3处将service对象添加到ArrayList类型的mServices中来完成注册。</p><p>注释4处调用service.onStart()来启动service对象，即ActivityManagerService$Lifecycle.onStart()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService$Lifecycle<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lifecycle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SystemService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActivityManagerService mService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Lifecycle</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>        mService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityManagerService</span>(context, sAtm);  <span class="hljs-comment">// 1</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStart</span><span class="hljs-params">()</span> &#123;<br>        mService.start();  <span class="hljs-comment">// 2</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> ActivityManagerService <span class="hljs-title function_">getService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mService;  <span class="hljs-comment">// 3</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码需要结合SystemServiceManager的startService()方法来分析。</p><p>注释1处，在Lifecycle的构造方法中创建了AMS实例。当调用SystemService类型的service的onStart()方法时，实际上是调用了注释2处AMS的start()方法。注释3处的Lifecycle的getService()方法返回AMS实例，这样我们就知道SystemServer的startBootstrapServices()方法的注释1处实际得到的就是AMS实例。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AMS</tag>
      
      <tag>启动流程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AMS与应用程序进程</title>
    <link href="/2024/03/10/AMS%E4%B8%8E%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%BF%9B%E7%A8%8B/"/>
    <url>/2024/03/10/AMS%E4%B8%8E%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>Zygote的Java框架层中，会创建一个Server端的Socket，这个Socket用来等待AMS请求Zygote来创建新的应用程序进程。要启动一个应用程序，首先要保证这个应用程序所需要的应用程序进程已经存在。在启动应用程序时AMS会检查这个应用程序需要的应用程序进程是否存在，不存在就会请求Zygote进程创建需要的应用程序进程。这里以Service的启动过程为例，来分析AMS与应用程序进程的关系。Service在启动过程中会调用ActivieService的bringUpServiceInnerLocked()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">bringUpServiceInnerLocked</span><span class="hljs-params">(ServiceRecord r, <span class="hljs-type">int</span> intentFlags, <span class="hljs-type">boolean</span> execInFg,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> whileRestarting, <span class="hljs-type">boolean</span> permissionsReviewRequired, <span class="hljs-type">boolean</span> packageFrozen,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> enqueueOomAdj)</span><br>        <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">procName</span> <span class="hljs-operator">=</span> r.processName;  <span class="hljs-comment">// 1</span><br>    ...<br>    ProcessRecord app;<br><br>    <span class="hljs-keyword">if</span> (!isolated) &#123;<br>        app = mAm.getProcessRecordLocked(procName, r.appInfo.uid);  <span class="hljs-comment">// 2</span><br>        ...<br>        <span class="hljs-keyword">if</span> (app != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">IApplicationThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> app.getThread();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> app.getPid();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">UidRecord</span> <span class="hljs-variable">uidRecord</span> <span class="hljs-operator">=</span> app.getUidRecord();<br>            <span class="hljs-keyword">if</span> (thread != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 3</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    ...<br>                    realStartServiceLocked(r, app, thread, pid, uidRecord, execInFg,<br>                            enqueueOomAdj);  <span class="hljs-comment">// 4</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (TransactionTooLargeException e) &#123;<br>                    <span class="hljs-keyword">throw</span> e;<br>                &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>                    Slog.w(TAG, <span class="hljs-string">&quot;Exception when starting service &quot;</span> + r.shortInstanceName, e);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br><br>    <br>    <span class="hljs-keyword">if</span> (app == <span class="hljs-literal">null</span> &amp;&amp; !permissionsReviewRequired &amp;&amp; !packageFrozen) &#123;  <span class="hljs-comment">// 5</span><br>        <span class="hljs-keyword">if</span> (r.isSdkSandbox) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            app = mAm.startProcessLocked(procName, r.appInfo, <span class="hljs-literal">true</span>, intentFlags,<br>                    hostingRecord, ZYGOTE_POLICY_FLAG_EMPTY, <span class="hljs-literal">false</span>, isolated);  <span class="hljs-comment">// 6</span><br>        &#125;<br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处得到ServiceRecord的processName值并赋给procName，其中processName用来描述Service想要在哪个进程中运行，默认是当前进程，我们也可以在AndroidManifest.xml文件中设置android:process属性来新开启一个进程运行Service。</p><p>在注释2处将procName和Service的uid传入到AMS的getProcessRecordLocked()方法中，查询是否存在一个与Service对应的ProcessRecord类型的对象app，ProcessRecord主要用来描述运行的应用程序进程的信息。</p><p>在注释5处判断Service对应的app为null则说明用来运行Service的应用程序进程不存在，则调用注释6处的AMS的startProcessLocked()方法来创建对应的应用程序进程。</p><p>这里只讨论没有设置android:process属性，即应用程序进程存在的情况。在注释3处判断如果用来运行Service的应用程序进程存在，则调用注释4处的realStartServiceLocked()方法来启动Service。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>启动应用程序时AMS会检查这个应用程序需要的应用程序进程是否存在。</li><li>如果需要的应用程序进程不存在，AMS就会请求Zygote进程创建需要的应用程序进程。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AMS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Service的绑定过程</title>
    <link href="/2024/03/10/Service%E7%9A%84%E7%BB%91%E5%AE%9A%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/03/10/Service%E7%9A%84%E7%BB%91%E5%AE%9A%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p><img src="https://s2.loli.net/2023/12/28/4OnIoRfPukDxlQV.jpg"></p><h4 id="ContextImpl到AMS的调用过程"><a href="#ContextImpl到AMS的调用过程" class="headerlink" title="ContextImpl到AMS的调用过程"></a>ContextImpl到AMS的调用过程</h4><p>我们可以用bindService()方法来绑定Service，它在ContextWrapper中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/content/ContextWrapper.java<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">bindService</span><span class="hljs-params">(Intent service, ServiceConnection conn,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> flags)</span> &#123;<br>    <span class="hljs-keyword">return</span> mBase.bindService(service, conn, flags);<br>&#125;<br></code></pre></td></tr></table></figure><p>mBase指的是ContextImpl，Activity的attach()方法中将ContextImpl赋值给ContextWrapper的成员变量mBase。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ContextImpl.java<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">bindService</span><span class="hljs-params">(Intent service, ServiceConnection conn, <span class="hljs-type">int</span> flags)</span> &#123;<br>    warnIfCallingFromSystemProcess();<br>    <span class="hljs-keyword">return</span> bindServiceCommon(service, conn, Integer.toUnsignedLong(flags), <span class="hljs-literal">null</span>,<br>            mMainThread.getHandler(), <span class="hljs-literal">null</span>, getUser());<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">bindServiceCommon</span><span class="hljs-params">(Intent service, ServiceConnection conn, <span class="hljs-type">long</span> flags,</span><br><span class="hljs-params">        String instanceName, Handler handler, Executor executor, UserHandle user)</span> &#123;<br>    IServiceConnection sd;<br>    ...<br>    <span class="hljs-keyword">if</span> (mPackageInfo != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">if</span> (executor != <span class="hljs-literal">null</span>) &#123;<br>            sd = mPackageInfo.getServiceDispatcher(conn, getOuterContext(), executor, flags);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sd = mPackageInfo.getServiceDispatcher(conn, getOuterContext(), handler, flags);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br>    validateServiceIntent(service);<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> ActivityManager.getService().bindServiceInstance(<br>                mMainThread.getApplicationThread(), getActivityToken(), service,<br>                service.resolveTypeIfNeeded(getContentResolver()),<br>                sd, flags, instanceName, getOpPackageName(), user.getIdentifier());  <span class="hljs-comment">// 2</span><br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在bindService()方法中会返回bindServiceCommon()方法。</p><p>注释1处调用了LoadedApk类型的对象mPackageInfo的getServiceDispatcher()方法，它的主要作用是将ServiceConnection封装成IServiceConnection类型的对象sd，从IServiceConnection的名字我们就能得知它实现了Binder机制，这样Service的绑定就支持了跨进程。</p><p>注释2处调用了AMS的bindServiceInstance()方法。</p><h4 id="Service的绑定过程"><a href="#Service的绑定过程" class="headerlink" title="Service的绑定过程"></a>Service的绑定过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">bindServiceInstance</span><span class="hljs-params">(IApplicationThread caller, IBinder token, Intent service,</span><br><span class="hljs-params">        String resolvedType, IServiceConnection connection, <span class="hljs-type">long</span> flags, String instanceName,</span><br><span class="hljs-params">        String callingPackage, <span class="hljs-type">int</span> userId)</span> <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    <span class="hljs-keyword">return</span> bindServiceInstance(caller, token, service, resolvedType, connection, flags,<br>            instanceName, <span class="hljs-literal">false</span>, INVALID_UID, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, callingPackage, userId);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">bindServiceInstance</span><span class="hljs-params">(IApplicationThread caller, IBinder token, Intent service,</span><br><span class="hljs-params">        String resolvedType, IServiceConnection connection, <span class="hljs-type">long</span> flags, String instanceName,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> isSdkSandboxService, <span class="hljs-type">int</span> sdkSandboxClientAppUid,</span><br><span class="hljs-params">        String sdkSandboxClientAppPackage,</span><br><span class="hljs-params">        IApplicationThread sdkSandboxClientApplicationThread,</span><br><span class="hljs-params">        String callingPackage, <span class="hljs-type">int</span> userId)</span><br>        <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">return</span> mServices.bindServiceLocked(caller, token, service, resolvedType, connection,<br>                    flags, instanceName, isSdkSandboxService, sdkSandboxClientAppUid,<br>                    sdkSandboxClientAppPackage, sdkSandboxClientApplicationThread,<br>                    callingPackage, userId);  <span class="hljs-comment">// 1</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处调用mServices的bindServiceLocked()方法，mServices的类型是ActiveServices。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br><span class="hljs-type">int</span> <span class="hljs-title function_">bindServiceLocked</span><span class="hljs-params">(IApplicationThread caller, IBinder token, Intent service,</span><br><span class="hljs-params">        String resolvedType, <span class="hljs-keyword">final</span> IServiceConnection connection, <span class="hljs-type">long</span> flags,</span><br><span class="hljs-params">        String instanceName, <span class="hljs-type">boolean</span> isSdkSandboxService, <span class="hljs-type">int</span> sdkSandboxClientAppUid,</span><br><span class="hljs-params">        String sdkSandboxClientAppPackage, IApplicationThread sdkSandboxClientApplicationThread,</span><br><span class="hljs-params">        String callingPackage, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> userId)</span><br>        <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    ...<br>    <span class="hljs-type">ServiceLookupResult</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> retrieveServiceLocked(service, instanceName,<br>            isSdkSandboxService, sdkSandboxClientAppUid, sdkSandboxClientAppPackage,<br>            resolvedType, callingPackage, callingPid, callingUid, userId, <span class="hljs-literal">true</span>, callerFg,<br>            isBindExternal, allowInstant, <span class="hljs-literal">null</span> <span class="hljs-comment">/* fgsDelegateOptions */</span>,<br>            inSharedIsolatedProcess);  <span class="hljs-comment">// 1</span><br>    ...<br>    <span class="hljs-type">ServiceRecord</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> res.record;  <span class="hljs-comment">// 2</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">AppBindRecord</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> s.retrieveAppBindingLocked(service, callerApp, attributedApp);  <span class="hljs-comment">// 3</span><br>    ...  <br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-type">ConnectionRecord</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionRecord</span>(b, activity,<br>                    connection, flags, clientLabel, clientIntent,<br>                    callerApp.uid, callerApp.processName, callingPackage, res.aliasComponent);<br>        ...<br>        <span class="hljs-keyword">if</span> (c.hasFlag(Context.BIND_AUTO_CREATE)) &#123;  <span class="hljs-comment">// 4</span><br>            ...<br>            <span class="hljs-keyword">if</span> (bringUpServiceLocked(s, service.getFlags(), callerFg, <span class="hljs-literal">false</span>,<br>                    permissionsReviewRequired, packageFrozen, <span class="hljs-literal">true</span>) != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 5</span><br>                mAm.updateOomAdjPendingTargetsLocked(OOM_ADJ_REASON_BIND_SERVICE);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        ...  <br>        <span class="hljs-keyword">if</span> (s.app != <span class="hljs-literal">null</span> &amp;&amp; b.intent.received) &#123;  <span class="hljs-comment">// 6</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ComponentName</span> <span class="hljs-variable">clientSideComponentName</span> <span class="hljs-operator">=</span><br>                    res.aliasComponent != <span class="hljs-literal">null</span> ? res.aliasComponent : s.name;<br>            <span class="hljs-keyword">try</span> &#123;<br>                c.conn.connected(clientSideComponentName, b.intent.binder, <span class="hljs-literal">false</span>);  <span class="hljs-comment">// 7</span><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                ...<br>            &#125;<br><br>            <span class="hljs-comment">// If this is the first app connected back to this binding,</span><br>            <span class="hljs-comment">// and the service had previously asked to be told when</span><br>            <span class="hljs-comment">// rebound, then do so.</span><br>            <span class="hljs-keyword">if</span> (b.intent.apps.size() == <span class="hljs-number">1</span> &amp;&amp; b.intent.doRebind) &#123;  <span class="hljs-comment">// 8</span><br>                requestServiceBindingLocked(s, b.intent, callerFg, <span class="hljs-literal">true</span>);  <span class="hljs-comment">// 9</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!b.intent.requested) &#123;  <span class="hljs-comment">// 10</span><br>            requestServiceBindingLocked(s, b.intent, callerFg, <span class="hljs-literal">false</span>);  <span class="hljs-comment">// 11</span><br>        &#125;<br>        ...<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ServiceRecord：用于描述一个Service；</p><p>ProcessRecord：一个进程的信息；</p><p>ConnectionRecord：用于描述应用程序进程和Service建立的一次通信；</p><p>IntentBindRecord：用于描述绑定Service的Intent；</p><p>AppBindRecord：应用程序进程通过Intent绑定Service时，会通过AppBindRecord来维护Service与应用程序进程之间的关联。其内部存储了谁绑定的Service(ProcessRecord)、被绑定的Service(ServiceRecord)、绑定Service的Intent(IntentBindRecord)和所有绑定通信记录的信息（ArrayMap&lt;ConnectionRecord&gt;）。</p><p>注释1处的retrieveServiceLocked()方法会查找是否有与参数service对应的ServiceRecord，如果没有找到，就会调用PackageManagerService去获取参数service对应的Service信息，并封装到ServiceRecord中，最后将ServiceRecord封装为ServiceLookupResult返回。其中ServiceRecord用于描述一个Service，和ActivityRecord类似。</p><p>在注释2处通过注释1处返回的ServiceLookupResult得到参数service对应的ServiceRecord。</p><p>注释3处根据callerApp来获取其中某个发起端信息AppBindRecord：intent、ServiceRecord、ProcessRecord。一个服务可以被多个发起端绑定。</p><p>注释4处如果设置了标记BIND_AUTO_CREATE，则注释5处调用bringUpServiceLocked()拉起服务，一般bindService()中flag都会设置。bringUpServiceLocked()中又调用realStartServiceLocked()方法，最终由ActivityThread来调用Service的onCreate()方法启动Service，这也说明了bindService()方法内部会启动Service。</p><p>注释6处s.app !&#x3D; null表示Service已经运行，其中s时ServiceRecord类型对象，app是ProcessRecord类型对象。b.intent.received表示当前应用程序进程已经接收到绑定Service时返回的Binder，这样应用程序进程就可以通过Binder来获取要绑定的Service的访问接口。在注释7处调用c.conn的connected()方法，其中c.conn指的是IServiceConnection，它的具体实现为ServiceDispatcher.InnerConnection，其中ServiceDispatcher是LoadedApk的内部类，InnerConnection的connected()方法内部会调用H的post()方法向主线程发送消息，并且解决当前应用程序进程和Service跨进程通信的问题。</p><p>在注释8处如果当前应用程序进程是第一个与Service进行绑定的，并且Service已经调用过onUnBind()方法，则需要调用注释9处的代码。</p><p>在注释10处如果应用程序进程的Client端没有发送过绑定Service的请求，则会调用注释11处的代码，注释11处和注释9处的代码区别就是最后一个参数rebind为false，表示不是重新绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">bringUpServiceLocked</span><span class="hljs-params">(ServiceRecord r, <span class="hljs-type">int</span> intentFlags, <span class="hljs-type">boolean</span> execInFg,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> whileRestarting, <span class="hljs-type">boolean</span> permissionsReviewRequired, <span class="hljs-type">boolean</span> packageFrozen,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> enqueueOomAdj)</span><br>        <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-keyword">return</span> bringUpServiceInnerLocked(r, intentFlags, execInFg, whileRestarting,<br>                permissionsReviewRequired, packageFrozen, enqueueOomAdj);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用bringUpServiceInnerLocked()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">bringUpServiceInnerLocked</span><span class="hljs-params">(ServiceRecord r, <span class="hljs-type">int</span> intentFlags, <span class="hljs-type">boolean</span> execInFg,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> whileRestarting, <span class="hljs-type">boolean</span> permissionsReviewRequired, <span class="hljs-type">boolean</span> packageFrozen,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> enqueueOomAdj)</span><br>        <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">procName</span> <span class="hljs-operator">=</span> r.processName;  <span class="hljs-comment">// 1</span><br>    ...<br>    ProcessRecord app;<br><br>    <span class="hljs-keyword">if</span> (!isolated) &#123;<br>        app = mAm.getProcessRecordLocked(procName, r.appInfo.uid);  <span class="hljs-comment">// 2</span><br>        ...<br>        <span class="hljs-keyword">if</span> (app != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">IApplicationThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> app.getThread();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> app.getPid();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">UidRecord</span> <span class="hljs-variable">uidRecord</span> <span class="hljs-operator">=</span> app.getUidRecord();<br>            <span class="hljs-keyword">if</span> (thread != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 3</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    ...<br>                    realStartServiceLocked(r, app, thread, pid, uidRecord, execInFg,<br>                            enqueueOomAdj);  <span class="hljs-comment">// 4</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (TransactionTooLargeException e) &#123;<br>                    <span class="hljs-keyword">throw</span> e;<br>                &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>                    Slog.w(TAG, <span class="hljs-string">&quot;Exception when starting service &quot;</span> + r.shortInstanceName, e);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (app == <span class="hljs-literal">null</span> &amp;&amp; !permissionsReviewRequired &amp;&amp; !packageFrozen) &#123;  <span class="hljs-comment">// 5</span><br>        <span class="hljs-keyword">if</span> (r.isSdkSandbox) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            app = mAm.startProcessLocked(procName, r.appInfo, <span class="hljs-literal">true</span>, intentFlags,<br>                    hostingRecord, ZYGOTE_POLICY_FLAG_EMPTY, <span class="hljs-literal">false</span>, isolated);  <span class="hljs-comment">// 6</span><br>        &#125;<br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处得到ServiceRecord的processName值并赋给procName，其中processName用来描述Service想要在哪个进程中运行，默认是当前进程，我们也可以在AndroidManifest.xml文件中设置android:process属性来新开启一个进程运行Service。</p><p>在注释2处将procName和Service的uid传入到AMS的getProcessRecordLocked()方法中，查询是否存在一个与Service对应的ProcessRecord类型的对象app，ProcessRecord主要用来描述运行的应用程序进程的信息。</p><p>在注释5处判断Service对应的app为null则说明用来运行Service的应用程序进程不存在，则调用注释6处的AMS的startProcessLocked()方法来创建对应的应用程序进程。</p><p>这里只讨论没有设置android:process属性，即应用程序进程存在的情况。在注释3处判断如果用来运行Service的应用程序进程存在，则调用注释4处的realStartServiceLocked()方法来启动Service。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">realStartServiceLocked</span><span class="hljs-params">(ServiceRecord r, ProcessRecord app,</span><br><span class="hljs-params">        IApplicationThread thread, <span class="hljs-type">int</span> pid, UidRecord uidRecord, <span class="hljs-type">boolean</span> execInFg,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> enqueueOomAdj)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    ...<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ProcessServiceRecord</span> <span class="hljs-variable">psr</span> <span class="hljs-operator">=</span> app.mServices;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">newService</span> <span class="hljs-operator">=</span> psr.startService(r);<br>    bumpServiceExecutingLocked(r, execInFg, <span class="hljs-string">&quot;create&quot;</span>,<br>            OOM_ADJ_REASON_NONE <span class="hljs-comment">/* use &quot;none&quot; to avoid extra oom adj */</span>);  <span class="hljs-comment">// 1</span><br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        thread.scheduleCreateService(r, r.serviceInfo,<br>                <span class="hljs-literal">null</span> <span class="hljs-comment">/* compatInfo (unused but need to keep method signature) */</span>,<br>                app.mState.getReportedProcState());  <span class="hljs-comment">// 2</span><br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (DeadObjectException e) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>    ...<br>    requestServiceBindingsLocked(r, execInFg);  <span class="hljs-comment">// 3</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处发送延时消息，前台服务20s，后台服务200s。</p><p>注释2处scheduleCreateService()回调app端创建service对象，执行onCreate()。</p><p>注释3处开始执行bind流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestServiceBindingsLocked</span><span class="hljs-params">(ServiceRecord r, <span class="hljs-type">boolean</span> execInFg)</span><br>        <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=r.bindings.size()-<span class="hljs-number">1</span>; i&gt;=<span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-type">IntentBindRecord</span> <span class="hljs-variable">ibr</span> <span class="hljs-operator">=</span> r.bindings.valueAt(i);<br>        <span class="hljs-keyword">if</span> (!requestServiceBindingLocked(r, ibr, execInFg, <span class="hljs-literal">false</span>)) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历bindings集合，开始绑定流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">requestServiceBindingLocked</span><span class="hljs-params">(ServiceRecord r, IntentBindRecord i,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> execInFg, <span class="hljs-type">boolean</span> rebind)</span> <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    ...<br>    <span class="hljs-keyword">if</span> ((!i.requested || rebind) &amp;&amp; i.apps.size() &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bumpServiceExecutingLocked(r, execInFg, <span class="hljs-string">&quot;bind&quot;</span>, OOM_ADJ_REASON_BIND_SERVICE);  <span class="hljs-comment">// 1</span><br>            ...<br>            r.app.getThread().scheduleBindService(r, i.intent.getIntent(), rebind,<br>                    r.app.mState.getReportedProcState(), mBindServiceSeqCounter++);  <span class="hljs-comment">// 2</span><br>            ...<br>        &#125; <span class="hljs-keyword">catch</span> (TransactionTooLargeException e) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>            ...<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处设置绑定超时；</p><p>注释2处scheduleBindService()回调到app端的onBind()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread$ApplicationThread<br>    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IApplicationThread</span>.Stub &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduleBindService</span><span class="hljs-params">(IBinder token, Intent intent,</span><br><span class="hljs-params">            <span class="hljs-type">boolean</span> rebind, <span class="hljs-type">int</span> processState, <span class="hljs-type">long</span> bindSeq)</span> &#123;<br>        updateProcessState(processState, <span class="hljs-literal">false</span>);<br>        <span class="hljs-type">BindServiceData</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindServiceData</span>();<br>        s.token = token;<br>        s.intent = intent;<br>        s.rebind = rebind;<br>        s.bindSeq = bindSeq;<br>        ...<br>        sendMessage(H.BIND_SERVICE, s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先将Service的信息封装成BindServiceData对象，BindServiceData的成员变量rebind的值为false。接着将BindServiceData传入到sendMessage()方法中。sendMessage()向H发送消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">H</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span> &#123;<br>        ...<br>        <span class="hljs-keyword">switch</span> (msg.what) &#123;<br>            ...<br>            <span class="hljs-keyword">case</span> BIND_SERVICE:<br>                ...<br>                handleBindService((BindServiceData)msg.obj);<br>                ...<br>                <span class="hljs-keyword">break</span>;<br>            ...<br>        &#125;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>H在接收到BIND_SERVICE类型消息时，会在handleMessage()方法中调用handleBindService()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleBindService</span><span class="hljs-params">(BindServiceData data)</span> &#123;<br>    <span class="hljs-type">CreateServiceData</span> <span class="hljs-variable">createData</span> <span class="hljs-operator">=</span> mServicesData.get(data.token);<br>    <span class="hljs-type">Service</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> mServices.get(data.token);  <span class="hljs-comment">// 1</span><br>    ...<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            data.intent.setExtrasClassLoader(s.getClassLoader());<br>            data.intent.prepareToEnterProcess(isProtectedComponent(createData.info),<br>                    s.getAttributionSource());<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (!data.rebind) &#123;  <span class="hljs-comment">// 2</span><br>                    <span class="hljs-type">IBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> s.onBind(data.intent);  <span class="hljs-comment">// 3</span><br>                    ActivityManager.getService().publishService(<br>                            data.token, data.intent, binder);  <span class="hljs-comment">// 4</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    s.onRebind(data.intent);  <span class="hljs-comment">// 5</span><br>                    ActivityManager.getService().serviceDoneExecuting(<br>                            data.token, SERVICE_DONE_EXECUTING_ANON, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (RemoteException ex) &#123;<br>                ...<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处获取要绑定的Service。注释2处的BindServiceData的成员变量rebind值为false，这样会调用注释3处的代码来调用Service的onBind()方法，到这里Service处于绑定状态了。</p><p>如果rebind的值为true就会调用注释5处的Service的onRebind()方法，结合前面bindServiceLocked()方法的注释8，得出的结论是：如果当前应用程序进程第一个与Service进行绑定，并且Service已经调用过onUnBind()方法，则会调用Service的onRebind()方法。handlerBindService()有两个分支，一个是绑定过Service的情况，另一个是未绑定的情况，这里分析未绑定的情况。查看注释4处的代码，实际上是调用AMS的publishService()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishService</span><span class="hljs-params">(IBinder token, Intent intent, IBinder service)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br>        ...<br>        mServices.publishServiceLocked((ServiceRecord)token, intent, service);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在publishService()中调用了ActiveServices类型的mServices对象的publishServiceLocked()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">publishServiceLocked</span><span class="hljs-params">(ServiceRecord r, Intent intent, IBinder service)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">origId</span> <span class="hljs-operator">=</span> Binder.clearCallingIdentity();<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>) &#123;<br>            ...<br>            <span class="hljs-keyword">if</span> (b != <span class="hljs-literal">null</span> &amp;&amp; !b.received) &#123;<br>                ...<br>                ArrayMap&lt;IBinder, ArrayList&lt;ConnectionRecord&gt;&gt; connections = r.getConnections();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">conni</span> <span class="hljs-operator">=</span> connections.size() - <span class="hljs-number">1</span>; conni &gt;= <span class="hljs-number">0</span>; conni--) &#123;<br>                    ArrayList&lt;ConnectionRecord&gt; clist = connections.valueAt(conni);<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;clist.size(); i++) &#123;<br>                        <span class="hljs-type">ConnectionRecord</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> clist.get(i);<br>                        ...<br>                        <span class="hljs-keyword">final</span> <span class="hljs-type">ComponentName</span> <span class="hljs-variable">clientSideComponentName</span> <span class="hljs-operator">=</span><br>                                c.aliasComponent != <span class="hljs-literal">null</span> ? c.aliasComponent : r.name;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            c.conn.connected(clientSideComponentName, service, <span class="hljs-literal">false</span>);  <span class="hljs-comment">// 1</span><br>                        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                            ...<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            ...<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处的代码前面介绍过，c.conn指的是IServiceConnection，它是ServiceConnection在本地的代理，用于解决当前应用程序进程和Service跨进程通信的问题，具体实现为ServiceDispatcher.InnerConnection，其中ServiceDispatcher是LoadedApk的内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/LoadedApk.java<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceDispatcher</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerConnection</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IServiceConnection</span>.Stub &#123;<br>        <br>        <span class="hljs-keyword">final</span> WeakReference&lt;LoadedApk.ServiceDispatcher&gt; mDispatcher;<br><br>        InnerConnection(LoadedApk.ServiceDispatcher sd) &#123;<br>            mDispatcher = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;LoadedApk.ServiceDispatcher&gt;(sd);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connected</span><span class="hljs-params">(ComponentName name, IBinder service, <span class="hljs-type">boolean</span> dead)</span><br>                <span class="hljs-keyword">throws</span> RemoteException &#123;<br>            LoadedApk.<span class="hljs-type">ServiceDispatcher</span> <span class="hljs-variable">sd</span> <span class="hljs-operator">=</span> mDispatcher.get();<br>            <span class="hljs-keyword">if</span> (sd != <span class="hljs-literal">null</span>) &#123;<br>                sd.connected(name, service, dead);  <span class="hljs-comment">// 1</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处调用了ServiceDispatcher类型的sd对象的connected()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/LoadedApk.java<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceDispatcher</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connected</span><span class="hljs-params">(ComponentName name, IBinder service, <span class="hljs-type">boolean</span> dead)</span> &#123;<br>        <span class="hljs-keyword">if</span> (mActivityExecutor != <span class="hljs-literal">null</span>) &#123;<br>            mActivityExecutor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RunConnection</span>(name, service, <span class="hljs-number">0</span>, dead));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mActivityThread != <span class="hljs-literal">null</span>) &#123;<br>            mActivityThread.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RunConnection</span>(name, service, <span class="hljs-number">0</span>, dead));  <span class="hljs-comment">// 1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            doConnected(name, service, dead);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在注释1处调用Handler类型的对象mActivityThread的post()方法，mActivityThread实际上指向的是H。因此，通过调用H的post()方法将RunConnection对象的内容运行在主线程中。RunConnection是LoadedApk的内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/LoadedApk.java<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceDispatcher</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunConnection</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        RunConnection(ComponentName name, IBinder service, <span class="hljs-type">int</span> command, <span class="hljs-type">boolean</span> dead) &#123;<br>            mName = name;<br>            mService = service;<br>            mCommand = command;<br>            mDead = dead;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (mCommand == <span class="hljs-number">0</span>) &#123;<br>                doConnected(mName, mService, mDead);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mCommand == <span class="hljs-number">1</span>) &#123;<br>                doDeath(mName, mService);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> ComponentName mName;<br>        <span class="hljs-keyword">final</span> IBinder mService;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> mCommand;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> mDead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在RunConnection的run()方法中调用了doConnected()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/LoadedApk.java<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceDispatcher</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doConnected</span><span class="hljs-params">(ComponentName name, IBinder service, <span class="hljs-type">boolean</span> dead)</span> &#123;<br>        ...<br>        <span class="hljs-comment">// If there was an old service, it is now disconnected.</span><br>        <span class="hljs-keyword">if</span> (old != <span class="hljs-literal">null</span>) &#123;<br>            mConnection.onServiceDisconnected(name);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dead) &#123;<br>            mConnection.onBindingDied(name);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// If there is a new viable service, it is now connected.</span><br>            <span class="hljs-keyword">if</span> (service != <span class="hljs-literal">null</span>) &#123;<br>                mConnection.onServiceConnected(name, service);  <span class="hljs-comment">// 1</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// The binding machinery worked, but the remote returned null from onBind().</span><br>                mConnection.onNullBinding(name);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在注释1处调用了ServiceConnection类型的对象mConnection的onServiceConnected()方法，这样在客户端实现了ServiceConnection接口类的onServiceConnected()就会被执行。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Service</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Service的启动过程</title>
    <link href="/2024/03/10/Service%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/03/10/Service%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><h4 id="ContextImpl到AMS的调用过程"><a href="#ContextImpl到AMS的调用过程" class="headerlink" title="ContextImpl到AMS的调用过程"></a>ContextImpl到AMS的调用过程</h4><p><img src="https://s2.loli.net/2023/12/27/mtPFyJ5lHMspi9C.jpg"></p><p>要启动Service，我们会调用startService()方法，它在ContextWrapper中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/content/ContextWrapper.java<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@Nullable</span> ComponentName <span class="hljs-title function_">startService</span><span class="hljs-params">(Intent service)</span> &#123;<br>    <span class="hljs-keyword">return</span> mBase.startService(service);<br>&#125;<br></code></pre></td></tr></table></figure><p>mBase指的是ContextImpl，Activity的attach()方法中将ContextImpl赋值给ContextWrapper的成员变量mBase。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ContextImpl.java<br><span class="hljs-keyword">public</span> ComponentName <span class="hljs-title function_">startService</span><span class="hljs-params">(Intent service)</span> &#123;<br>    warnIfCallingFromSystemProcess();<br>    <span class="hljs-keyword">return</span> startServiceCommon(service, <span class="hljs-literal">false</span>, mUser);<br>&#125;<br><br><span class="hljs-keyword">private</span> ComponentName <span class="hljs-title function_">startServiceCommon</span><span class="hljs-params">(Intent service, <span class="hljs-type">boolean</span> requireForeground,</span><br><span class="hljs-params">        UserHandle user)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        validateServiceIntent(service);<br>        service.prepareToLeaveProcess(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-type">ComponentName</span> <span class="hljs-variable">cn</span> <span class="hljs-operator">=</span> ActivityManager.getService().startService(<br>                mMainThread.getApplicationThread(), service,<br>                service.resolveTypeIfNeeded(getContentResolver()), requireForeground,<br>                getOpPackageName(), getAttributionTag(), user.getIdentifier());  <span class="hljs-comment">// 1</span><br>        ...<br>        <span class="hljs-keyword">return</span> cn;<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在startService()方法中会返回startServiceCommon()方法，在startServiceCommon()方法中会在注释1处调用AMS的代理IActivityManager的startService()方法，最终调用的是AMS的startService()方法。</p><h4 id="ActivityThread启动Service"><a href="#ActivityThread启动Service" class="headerlink" title="ActivityThread启动Service"></a>ActivityThread启动Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java<br><span class="hljs-keyword">private</span> ComponentName <span class="hljs-title function_">startService</span><span class="hljs-params">(IApplicationThread caller, Intent service,</span><br><span class="hljs-params">        String resolvedType, <span class="hljs-type">boolean</span> requireForeground, String callingPackage,</span><br><span class="hljs-params">        String callingFeatureId, <span class="hljs-type">int</span> userId, <span class="hljs-type">boolean</span> isSdkSandboxService,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> sdkSandboxClientAppUid, String sdkSandboxClientAppPackage, String instanceName)</span><br>        <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">callingPid</span> <span class="hljs-operator">=</span> Binder.getCallingPid();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">callingUid</span> <span class="hljs-operator">=</span> Binder.getCallingUid();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">origId</span> <span class="hljs-operator">=</span> Binder.clearCallingIdentity();<br>    ComponentName res;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            res = mServices.startServiceLocked(caller, service,<br>                    resolvedType, callingPid, callingUid,<br>                    requireForeground, callingPackage, callingFeatureId, userId,<br>                    isSdkSandboxService, sdkSandboxClientAppUid, sdkSandboxClientAppPackage,<br>                    instanceName);  <span class="hljs-comment">// 1</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处调用mServices的startServiceLocked()方法，mServices的类型是ActiveServices。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br>ComponentName <span class="hljs-title function_">startServiceLocked</span><span class="hljs-params">(IApplicationThread caller, Intent service, String resolvedType,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> callingPid, <span class="hljs-type">int</span> callingUid, <span class="hljs-type">boolean</span> fgRequired,</span><br><span class="hljs-params">        String callingPackage, <span class="hljs-meta">@Nullable</span> String callingFeatureId, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> userId,</span><br><span class="hljs-params">        BackgroundStartPrivileges backgroundStartPrivileges, <span class="hljs-type">boolean</span> isSdkSandboxService,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> sdkSandboxClientAppUid, String sdkSandboxClientAppPackage, String instanceName)</span><br>        <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    ...<br>    <br>    <span class="hljs-type">ServiceLookupResult</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> retrieveServiceLocked(service, instanceName, isSdkSandboxService,<br>            sdkSandboxClientAppUid, sdkSandboxClientAppPackage, resolvedType, callingPackage,<br>            callingPid, callingUid, userId, <span class="hljs-literal">true</span>, callerFg, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);  <span class="hljs-comment">// 1</span><br>    ...<br>    <span class="hljs-type">ServiceRecord</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> res.record;  <span class="hljs-comment">// 2</span><br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ComponentName</span> <span class="hljs-variable">realResult</span> <span class="hljs-operator">=</span><br>            startServiceInnerLocked(r, service, callingUid, callingPid,<br>                    callingProcessName, callingProcessState,<br>                    fgRequired, callerFg,<br>                    backgroundStartPrivileges, callingPackage);  <span class="hljs-comment">// 3</span><br>    <span class="hljs-keyword">if</span> (res.aliasComponent != <span class="hljs-literal">null</span><br>            &amp;&amp; !realResult.getPackageName().startsWith(<span class="hljs-string">&quot;!&quot;</span>)<br>            &amp;&amp; !realResult.getPackageName().startsWith(<span class="hljs-string">&quot;?&quot;</span>)) &#123;<br>        <span class="hljs-keyword">return</span> res.aliasComponent;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> realResult;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处的retrieveServiceLocked()方法会查找是否有与参数service对应的ServiceRecord，如果没有找到，就会调用PackageManagerService去获取参数service对应的Service信息，并封装到ServiceRecord中，最后将ServiceRecord封装为ServiceLookupResult返回。其中ServiceRecord用于描述一个Service，和ActivityRecord类似。</p><p>在注释2处通过注释1处返回的ServiceLookupResult得到参数service对应的ServiceRecord，并传入到注释3处的startServiceInnerLocked()方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br><span class="hljs-keyword">private</span> ComponentName <span class="hljs-title function_">startServiceInnerLocked</span><span class="hljs-params">(ServiceRecord r, Intent service,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> callingUid, <span class="hljs-type">int</span> callingPid, String callingProcessName,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> callingProcessState, <span class="hljs-type">boolean</span> fgRequired, <span class="hljs-type">boolean</span> callerFg,</span><br><span class="hljs-params">        BackgroundStartPrivileges backgroundStartPrivileges, String callingPackage)</span><br>        <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    ...<br>    <span class="hljs-type">ComponentName</span> <span class="hljs-variable">cmp</span> <span class="hljs-operator">=</span> startServiceInnerLocked(smap, service, r, callerFg, addToStarting,<br>            callingUid, callingProcessName, callingProcessState,<br>            wasStartRequested, callingPackage);<br>    <span class="hljs-keyword">return</span> cmp;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续调用startServiceInnerLocked()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br>ComponentName <span class="hljs-title function_">startServiceInnerLocked</span><span class="hljs-params">(ServiceMap smap, Intent service, ServiceRecord r,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> callerFg, <span class="hljs-type">boolean</span> addToStarting, <span class="hljs-type">int</span> callingUid, String callingProcessName,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> callingProcessState, <span class="hljs-type">boolean</span> wasStartRequested, String callingPackage)</span><br>        <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    ...<br>    <span class="hljs-type">String</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> bringUpServiceLocked(r, service.getFlags(), callerFg,<br>            <span class="hljs-literal">false</span> <span class="hljs-comment">/* whileRestarting */</span>,<br>            <span class="hljs-literal">false</span> <span class="hljs-comment">/* permissionsReviewRequired */</span>,<br>            <span class="hljs-literal">false</span> <span class="hljs-comment">/* packageFrozen */</span>,<br>            <span class="hljs-literal">true</span> <span class="hljs-comment">/* enqueueOomAdj */</span>);  <span class="hljs-comment">// 1</span><br>    ...<br>    <span class="hljs-keyword">if</span> (error != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComponentName</span>(<span class="hljs-string">&quot;!!&quot;</span>, error);<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> r.name;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处调用了bringUpServiceLocked()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">bringUpServiceLocked</span><span class="hljs-params">(ServiceRecord r, <span class="hljs-type">int</span> intentFlags, <span class="hljs-type">boolean</span> execInFg,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> whileRestarting, <span class="hljs-type">boolean</span> permissionsReviewRequired, <span class="hljs-type">boolean</span> packageFrozen,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> enqueueOomAdj)</span><br>        <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-keyword">return</span> bringUpServiceInnerLocked(r, intentFlags, execInFg, whileRestarting,<br>                permissionsReviewRequired, packageFrozen, enqueueOomAdj);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用bringUpServiceInnerLocked()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">bringUpServiceInnerLocked</span><span class="hljs-params">(ServiceRecord r, <span class="hljs-type">int</span> intentFlags, <span class="hljs-type">boolean</span> execInFg,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> whileRestarting, <span class="hljs-type">boolean</span> permissionsReviewRequired, <span class="hljs-type">boolean</span> packageFrozen,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> enqueueOomAdj)</span><br>        <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">procName</span> <span class="hljs-operator">=</span> r.processName;  <span class="hljs-comment">// 1</span><br>    ...<br>    ProcessRecord app;<br><br>    <span class="hljs-keyword">if</span> (!isolated) &#123;<br>        app = mAm.getProcessRecordLocked(procName, r.appInfo.uid);  <span class="hljs-comment">// 2</span><br>        ...<br>        <span class="hljs-keyword">if</span> (app != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">IApplicationThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> app.getThread();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> app.getPid();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">UidRecord</span> <span class="hljs-variable">uidRecord</span> <span class="hljs-operator">=</span> app.getUidRecord();<br>            <span class="hljs-keyword">if</span> (thread != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 3</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    ...<br>                    realStartServiceLocked(r, app, thread, pid, uidRecord, execInFg,<br>                            enqueueOomAdj);  <span class="hljs-comment">// 4</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (TransactionTooLargeException e) &#123;<br>                    <span class="hljs-keyword">throw</span> e;<br>                &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>                    Slog.w(TAG, <span class="hljs-string">&quot;Exception when starting service &quot;</span> + r.shortInstanceName, e);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br><br>    <br>    <span class="hljs-keyword">if</span> (app == <span class="hljs-literal">null</span> &amp;&amp; !permissionsReviewRequired &amp;&amp; !packageFrozen) &#123;  <span class="hljs-comment">// 5</span><br>        <span class="hljs-keyword">if</span> (r.isSdkSandbox) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            app = mAm.startProcessLocked(procName, r.appInfo, <span class="hljs-literal">true</span>, intentFlags,<br>                    hostingRecord, ZYGOTE_POLICY_FLAG_EMPTY, <span class="hljs-literal">false</span>, isolated);  <span class="hljs-comment">// 6</span><br>        &#125;<br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处得到ServiceRecord的processName值并赋给procName，其中processName用来描述Service想要在哪个进程中运行，默认是当前进程，我们也可以在AndroidManifest.xml文件中设置android:process属性来新开启一个进程运行Service。</p><p>在注释2处将procName和Service的uid传入到AMS的getProcessRecordLocked()方法中，查询是否存在一个与Service对应的ProcessRecord类型的对象app，ProcessRecord主要用来描述运行的应用程序进程的信息。</p><p>在注释5处判断Service对应的app为null则说明用来运行Service的应用程序进程不存在，则调用注释6处的AMS的startProcessLocked()方法来创建对应的应用程序进程。</p><p>这里只讨论没有设置android:process属性，即应用程序进程存在的情况。在注释3处判断如果用来运行Service的应用程序进程存在，则调用注释4处的realStartServiceLocked()方法来启动Service。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActiveServices.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">realStartServiceLocked</span><span class="hljs-params">(ServiceRecord r, ProcessRecord app,</span><br><span class="hljs-params">        IApplicationThread thread, <span class="hljs-type">int</span> pid, UidRecord uidRecord, <span class="hljs-type">boolean</span> execInFg,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> enqueueOomAdj)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        thread.scheduleCreateService(r, r.serviceInfo,<br>                <span class="hljs-literal">null</span> <span class="hljs-comment">/* compatInfo (unused but need to keep method signature) */</span>,<br>                app.mState.getReportedProcState());<br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (DeadObjectException e) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在realStartServiceLocked()中调用了thread的scheduleCreateService()方法。其中thread是IApplicationThread类型的，它的实现是ActivityThread的内部类ApplicationThread。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread$ApplicationThread<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduleCreateService</span><span class="hljs-params">(IBinder token,</span><br><span class="hljs-params">        ServiceInfo info, CompatibilityInfo compatInfo, <span class="hljs-type">int</span> processState)</span> &#123;<br>    updateProcessState(processState, <span class="hljs-literal">false</span>);<br>    <span class="hljs-type">CreateServiceData</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateServiceData</span>();<br>    s.token = token;<br>    s.info = info;<br><br>    sendMessage(H.CREATE_SERVICE, s);<br>&#125;<br></code></pre></td></tr></table></figure><p>scheduleCreateService()方法将启动Service的参数封装成CreateServiceData，sendMessage()方法向H类发送类型为CREATE_SERVICE的消息，并将CreateServiceData传递过去。sendMessage()方法有多个重载方法，最终调用的sendMessage()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> what, Object obj, <span class="hljs-type">int</span> arg1, <span class="hljs-type">int</span> arg2, <span class="hljs-type">boolean</span> async)</span> &#123;<br>    ...<br>    <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> Message.obtain();<br>    msg.what = what;<br>    msg.obj = obj;<br>    msg.arg1 = arg1;<br>    msg.arg2 = arg2;<br>    <span class="hljs-keyword">if</span> (async) &#123;<br>        msg.setAsynchronous(<span class="hljs-literal">true</span>);<br>    &#125;<br>    mH.sendMessage(msg);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的mH指的是H，它是ActivityThread的内部类并继承自Handler，是应用程序进程中主线程的消息管理类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">H</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span> &#123;<br>        ...<br>        <span class="hljs-keyword">switch</span> (msg.what) &#123;<br>            ...<br>            <span class="hljs-keyword">case</span> CREATE_SERVICE:<br>                ...<br>                handleCreateService((CreateServiceData)msg.obj);<br>                ...<br>                <span class="hljs-keyword">break</span>;<br>            ...<br>        &#125;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>handleMessage()方法根据消息类型为CREATE_SERVICE，会调用handleCreateService()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleCreateService</span><span class="hljs-params">(CreateServiceData data)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">LoadedApk</span> <span class="hljs-variable">packageInfo</span> <span class="hljs-operator">=</span> getPackageInfoNoCheck(data.info.applicationInfo);  <span class="hljs-comment">// 1</span><br>    <span class="hljs-type">Service</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-keyword">final</span> java.lang.ClassLoader cl;<br>        <span class="hljs-comment">// 2</span><br>        <span class="hljs-keyword">if</span> (data.info.splitName != <span class="hljs-literal">null</span>) &#123;<br>            cl = packageInfo.getSplitClassLoader(data.info.splitName);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cl = packageInfo.getClassLoader();<br>        &#125;<br>        service = packageInfo.getAppFactory()<br>                .instantiateService(cl, data.info.name, data.intent);  <span class="hljs-comment">// 3</span><br>        <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> ContextImpl.getImpl(service<br>                .createServiceBaseContext(<span class="hljs-built_in">this</span>, packageInfo));  <span class="hljs-comment">// 4</span><br>        <span class="hljs-keyword">if</span> (data.info.splitName != <span class="hljs-literal">null</span>) &#123;<br>            context = (ContextImpl) context.createContextForSplit(data.info.splitName);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (data.info.attributionTags != <span class="hljs-literal">null</span> &amp;&amp; data.info.attributionTags.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">attributionTag</span> <span class="hljs-operator">=</span> data.info.attributionTags[<span class="hljs-number">0</span>];<br>            context = (ContextImpl) context.createAttributionContext(attributionTag);<br>        &#125;<br>        <span class="hljs-comment">// Service resources must be initialized with the same loaders as the application</span><br>        <span class="hljs-comment">// context.</span><br>        context.getResources().addLoaders(<br>                app.getResources().getLoaders().toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourcesLoader</span>[<span class="hljs-number">0</span>]));<br><br>        context.setOuterContext(service);<br>        service.attach(context, <span class="hljs-built_in">this</span>, data.info.name, data.token, app,<br>                ActivityManager.getService());  <span class="hljs-comment">// 5</span><br>        <span class="hljs-keyword">if</span> (!service.isUiContext()) &#123; <span class="hljs-comment">// WindowProviderService is a UI Context.</span><br>            <span class="hljs-type">VirtualDeviceManager</span> <span class="hljs-variable">vdm</span> <span class="hljs-operator">=</span> context.getSystemService(VirtualDeviceManager.class);<br>            <span class="hljs-keyword">if</span> (mLastReportedDeviceId == Context.DEVICE_ID_DEFAULT<br>                    || vdm.isValidVirtualDeviceId(mLastReportedDeviceId)) &#123;<br>                service.updateDeviceId(mLastReportedDeviceId);<br>            &#125;<br>        &#125;<br>        service.onCreate();  <span class="hljs-comment">// 6</span><br>        mServicesData.put(data.token, data);<br>        mServices.put(data.token, service);  <span class="hljs-comment">// 7</span><br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处获取要启动Service的应用程序的LoadedApk，LoadedApk是一个APK文件的描述类；</p><p>注释2处获取类加载器；</p><p>注释3处根据CreateServiceData对象中存储的Service信息，创建Service实例；</p><p>注释4处创建Service的上下文环境ContextImpl对象；</p><p>注释5处通过Service的attach()方法来初始化Service；</p><p>注释6处调用Service的onCreate()方法，这样Service就启动了；</p><p>注释7处将启动的Service加入到ActivityThread的成员变量mServices中，其中mService是ArrayMap类型。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>启动流程</tag>
      
      <tag>Service</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WMS的创建</title>
    <link href="/2024/03/10/WMS%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
    <url>/2024/03/10/WMS%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><h4 id="WMS的创建过程"><a href="#WMS的创建过程" class="headerlink" title="WMS的创建过程"></a>WMS的创建过程</h4><p>WMS是在SystemServer中创建的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/java/com/android/server/SystemServer.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startBootstrapServices</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> TimingsTraceAndSlog t)</span> &#123;<br>    ...<br>    t.traceBegin(<span class="hljs-string">&quot;StartWatchdog&quot;</span>);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Watchdog</span> <span class="hljs-variable">watchdog</span> <span class="hljs-operator">=</span> Watchdog.getInstance();  <span class="hljs-comment">// 1</span><br>    watchdog.start();<br>    mDumper.addDumpable(watchdog);<br>    t.traceEnd();<br>    ...<br>    t.traceBegin(<span class="hljs-string">&quot;InitWatchdog&quot;</span>);<br>    watchdog.init(mSystemContext, mActivityManagerService);  <span class="hljs-comment">// 2</span><br>    t.traceEnd();<br>    ...<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startOtherServices</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> TimingsTraceAndSlog t)</span> &#123;<br>    ...<br>    <span class="hljs-type">WindowManagerService</span> <span class="hljs-variable">wm</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    ...<br>    <span class="hljs-type">InputManagerService</span> <span class="hljs-variable">inputManager</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    ...<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        t.traceBegin(<span class="hljs-string">&quot;StartInputManagerService&quot;</span>);<br>        inputManager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputManagerService</span>(context);  <span class="hljs-comment">// 3</span><br>        t.traceEnd();<br>        ...<br>        t.traceBegin(<span class="hljs-string">&quot;StartWindowManagerService&quot;</span>);<br>        <span class="hljs-comment">// WMS needs sensor service ready</span><br>        mSystemServiceManager.startBootPhase(t, SystemService.PHASE_WAIT_FOR_SENSOR_SERVICE);<br>        wm = WindowManagerService.main(context, inputManager, !mFirstBoot,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhoneWindowManager</span>(), mActivityManagerService.mActivityTaskManager);  <span class="hljs-comment">// 4</span><br>        ServiceManager.addService(Context.WINDOW_SERVICE, wm, <span class="hljs-comment">/* allowIsolated= */</span> <span class="hljs-literal">false</span>,<br>                DUMP_FLAG_PRIORITY_CRITICAL | DUMP_FLAG_PROTO);  <span class="hljs-comment">// 5</span><br>        ServiceManager.addService(Context.INPUT_SERVICE, inputManager,<br>                <span class="hljs-comment">/* allowIsolated= */</span> <span class="hljs-literal">false</span>, DUMP_FLAG_PRIORITY_CRITICAL);  <span class="hljs-comment">// 6</span><br>        t.traceEnd();<br>        <br>        t.traceBegin(<span class="hljs-string">&quot;SetWindowManagerService&quot;</span>);<br>        mActivityManagerService.setWindowManager(wm);<br>        t.traceEnd();<br>        <br>        t.traceBegin(<span class="hljs-string">&quot;WindowManagerServiceOnInitReady&quot;</span>);<br>        wm.onInitReady();  <span class="hljs-comment">// 7</span><br>        t.traceEnd();<br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>        ...<br>    &#125;<br>    ...<br>    t.traceBegin(<span class="hljs-string">&quot;MakeDisplayReady&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        wm.displayReady();  <span class="hljs-comment">// 8</span><br>    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>        ...<br>    &#125;<br>    t.traceEnd();<br>    ...<br>    t.traceBegin(<span class="hljs-string">&quot;MakeWindowManagerServiceReady&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        wm.systemReady();  <span class="hljs-comment">// 9</span><br>    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>        ...<br>    &#125;<br>    t.traceEnd();<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1、2处分别得到Watchdog实例并对它进行初始化，Watchdog用来监控系统的一些关键服务的运行状况。</p><p>注释3处创建了IMS，并赋值给IMS类型的inputManager对象。</p><p>注释4处执行了WMS的main()方法，其内部会创建WMS，需要注意的是main()方法其中一个传入的参数就是在注释3处创建的IMS，WMS是输入事件的中转站，其内部包含了IMS引用并不意外。WMS的main()方法是运行在SystemServer的run()方法中的，换句话说就是运行在“system_server”线程中。</p><p>在注释5、6处分别将WMS和IMS注册到ServiceManager中，这样如果某个客户端想要使用WMS，就需要先去ServiceManager中查询信息，然后根据信息与WMS所在的进程建立通信通路，客户端就可以使用WMS了。</p><p>注释7处用来初始化窗口管理策略的接口类，以及将WMS添加到Watchdog中。</p><p>注释8处用来初始化屏幕显示信息。</p><p>注释9处用来通知WMS，系统的初始化工作已经完成，其内部调用了WindowManagerPolicy的systemReady()方法。</p><ol><li>WindowManagerService.main()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WindowManagerService <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Context context, <span class="hljs-keyword">final</span> InputManagerService im,</span><br><span class="hljs-params">        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> showBootMsgs, WindowManagerPolicy policy,</span><br><span class="hljs-params">        ActivityTaskManagerService atm)</span> &#123;<br>    <span class="hljs-keyword">return</span> main(context, im, showBootMsgs, policy, atm, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DisplayWindowSettingsProvider</span>(),<br>            SurfaceControl.Transaction::<span class="hljs-keyword">new</span>, SurfaceControl.Builder::<span class="hljs-keyword">new</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates and returns an instance of the WindowManagerService. This call allows the caller</span><br><span class="hljs-comment"> * to override factories that can be used to stub native calls during test.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@VisibleForTesting</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WindowManagerService <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Context context, <span class="hljs-keyword">final</span> InputManagerService im,</span><br><span class="hljs-params">        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> showBootMsgs, WindowManagerPolicy policy, ActivityTaskManagerService atm,</span><br><span class="hljs-params">        DisplayWindowSettingsProvider displayWindowSettingsProvider,</span><br><span class="hljs-params">        Supplier&lt;SurfaceControl.Transaction&gt; transactionFactory,</span><br><span class="hljs-params">        Function&lt;SurfaceSession, SurfaceControl.Builder&gt; surfaceControlFactory)</span> &#123;<br>    <span class="hljs-keyword">final</span> WindowManagerService[] wms = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowManagerService</span>[<span class="hljs-number">1</span>];<br>    DisplayThread.getHandler().runWithScissors(() -&gt;  <span class="hljs-comment">// 1</span><br>            wms[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowManagerService</span>(context, im, showBootMsgs, policy, atm,<br>                    displayWindowSettingsProvider, transactionFactory,<br>                    surfaceControlFactory), <span class="hljs-number">0</span>);  <span class="hljs-comment">// 2</span><br>    <span class="hljs-keyword">return</span> wms[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处调用了DisplayThread的getHandler()方法，用来得到DisplayThread的Handler实例。DisplayThread是一个单例的前台线程，这个线程用来处理需要低延时显示的相关操作，并只能由WindowManager、DisplayManager和InputManager实时执行快速操作。</p><p>注释2处创建了WMS的实例，这个过程运行在Runnable的run()方法中，而Runnable则传到了DisplayThread对应的Handler的runWithScissors()方法中，说明WMS的创建是运行在android.displ                                                                                                                                                                                                                   ay线程中的。需要注意的是，runWithScissors()方法的第二个参数传入的是0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/os/Handler.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">runWithScissors</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Runnable r, <span class="hljs-type">long</span> timeout)</span> &#123;<br>    <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;runnable must not be null&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (timeout &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;timeout must be non-negative&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (Looper.myLooper() == mLooper) &#123;  <span class="hljs-comment">// 1</span><br>        r.run();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-type">BlockingRunnable</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockingRunnable</span>(r);<br>    <span class="hljs-keyword">return</span> br.postAndWait(<span class="hljs-built_in">this</span>, timeout);<br>&#125;<br></code></pre></td></tr></table></figure><p>开头对传入的Runnable和timeout进行了判断，如果Runnable为null或者timeout小于0则抛出异常。在注释1处根据每个线程只有一个Looper的原理来判断当前的线程（system_server线程）是否是Handler所指向的线程（android.display线程），如果是则直接执行Runnable的run()方法，如果不是则调用BlockingRunnable的postAndWait()方法，并将当前线程的Runnable作为参数传进去，BlockingRunnable是Handler的内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/os/Handler.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockingRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Runnable mTask;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> mDone;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BlockingRunnable</span><span class="hljs-params">(Runnable task)</span> &#123;<br>        mTask = task;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            mTask.run();  <span class="hljs-comment">// 1</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                mDone = <span class="hljs-literal">true</span>;<br>                notifyAll();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">postAndWait</span><span class="hljs-params">(Handler handler, <span class="hljs-type">long</span> timeout)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!handler.post(<span class="hljs-built_in">this</span>)) &#123;  <span class="hljs-comment">// 2</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">if</span> (timeout &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">expirationTime</span> <span class="hljs-operator">=</span> SystemClock.uptimeMillis() + timeout;<br>                <span class="hljs-keyword">while</span> (!mDone) &#123;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">delay</span> <span class="hljs-operator">=</span> expirationTime - SystemClock.uptimeMillis();<br>                    <span class="hljs-keyword">if</span> (delay &lt;= <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// timeout</span><br>                    &#125;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        wait(delay);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException ex) &#123;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span> (!mDone) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        wait();  <span class="hljs-comment">// 3</span><br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException ex) &#123;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在注释2处将当前的BlockingRunnable添加到Handler的任务队列中。前面的runWithScissors()方法的第二个参数为0，因此timeout等于0，这样如果mDone为false的话会一直调用注释3处的wait()方法使得当前线程（system_server线程）进入等待状态，那么等待的是哪个线程呢？我们往上看，在注释1处执行了传入的Runnable的run()方法（运行在android.display线程），执行完毕后在finally代码块中将mDone设置为true，并调用notifyAll()方法唤醒处于等待状态的线程，这样就不会继续调用注释3处的wait()方法。因此得出结论，system_server线程等待的就是android.display线程，这是因为android.display线程内部执行了WMS的创建，而WMS的创建优先级要更高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">WindowManagerService</span><span class="hljs-params">(Context context, InputManagerService inputManager,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> showBootMsgs, WindowManagerPolicy policy, ActivityTaskManagerService atm,</span><br><span class="hljs-params">        DisplayWindowSettingsProvider displayWindowSettingsProvider,</span><br><span class="hljs-params">        Supplier&lt;SurfaceControl.Transaction&gt; transactionFactory,</span><br><span class="hljs-params">        Function&lt;SurfaceSession, SurfaceControl.Builder&gt; surfaceControlFactory)</span> &#123;<br>    ...<br>    mInputManager = inputManager; <span class="hljs-comment">// 1</span><br>    ...<br>    mAnimator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAnimator</span>(<span class="hljs-built_in">this</span>);  <span class="hljs-comment">// 2</span><br>    ...<br>    mActivityManager = ActivityManager.getService();  <span class="hljs-comment">// 3</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处用来保存传进来的IMS，这样WMS就持有了IMS的引用。</p><p>注释2处创建了WindowAnimator，它用于管理所有的窗口动画。</p><p>注释3处得到AMS实例，并赋值给mActivityManager，这样WMS就持有了AMS的引用。</p><ol start="2"><li>WindowManagerService.onInitReady()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onInitReady</span><span class="hljs-params">()</span> &#123;<br>initPolicy();  <span class="hljs-comment">// 1</span><br>Watchdog.getInstance().addMonitor(<span class="hljs-built_in">this</span>);  <span class="hljs-comment">// 2</span><br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处初始化了窗口管理策略的接口类WindowManagerPolicy（WMP），它用来定义一个窗口策略所要遵循的通用规范。</p><p>注释2处将自身也就是WMS通过addMonitor()方法添加到Watchdog中，Watchdog用来监控系统的一些关键服务的运行状况（比如传入的WMS的运行状况），这些被监控的服务都会实现Watchdog.Monitor接口。Watchdog每分钟都会对被监控的系统服务进行检查，如果被监控的系统出现了死锁，则会杀死Watchdog所在的进程，也就是SystemServer进程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initPolicy</span><span class="hljs-params">()</span> &#123;<br>    UiThread.getHandler().runWithScissors(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            WindowManagerPolicyThread.set(Thread.currentThread(), Looper.myLooper());<br>            mPolicy.init(mContext, WindowManagerService.<span class="hljs-built_in">this</span>);  <span class="hljs-comment">// 1</span><br>        &#125;<br>    &#125;, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>initPolicy()方法和此前讲的WMS的main()方法的实现类似，在注释1处执行了WMP的init()方法，WMP是一个接口，init()方法具体在PhoneWindowManager（PWM）中实现。PWM的init()方法运行在android.ui线程中，它的优先级要高于initPolicy()方法所在的android.display线程，因此android.display线程要等PWM的init()方法执行完毕后，处于等待状态的android.display线程才会被唤醒从而继续执行下面的代码。</p><h4 id="线程间关系"><a href="#线程间关系" class="headerlink" title="线程间关系"></a>线程间关系</h4><p>本文共提到了三个线程，分别是system_server、android.display和android.ui，为了便于理解，下面给出这三个线程之间的关系。</p><img src="https://s2.loli.net/2024/01/02/s1EaPDyCghtw9Fi.jpg" style="zoom:50%;" /><p>从上图可以看出，三个线程之间的关系可以分为三个步骤来实现：</p><ol><li>首先在system_server线程中执行了SystemServer的startOtherServices()方法，在startOtherServices()方法中会调用WMS的main()方法，main()方法会创建WMS，创建的过程在android.display线程中实现，创建WMS的优先级更高，因此system_server线程要等WMS创建完成后，处于等待状态的system_server线程才会被唤醒从而继续执行下面的代码。</li><li>在WMS的构造方法中会调用WMS的initPolicy()方法，在initPolicy()方法中又会调用PWM.init()方法，PWM的init()方法在android.ui线程中运行，它的优先级要高于android.display线程，因此android.display线程要等PWM的init()方法执行完毕后，处于等待状态的android.display线程才会被唤醒从而继续执行下面的代码。</li><li>PWM的init()方法执行完毕后，android.display线程就完成了WMS的创建，等待的system_server线程被唤醒后继续执行WMS的main()方法后的代码逻辑，比如WMS的displayReady()方法用来初始化屏幕显示信息（SystemServer的startOtherServices()方法的注释8处）。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Window</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SystemServer启动流程</title>
    <link href="/2024/03/10/SystemServer%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/03/10/SystemServer%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U。</p><p>SystemServer进程是Android系统中的核心进程，由Zygote进程fork出。</p><p>在SystemServer进程中，启动了很多关键的服务，如AMS、PMS、WMS等，还启动出了WatchDog，用于监测系统服务。</p></blockquote><p><img src="https://s2.loli.net/2023/12/26/LkBgVdRKZiHwA2W.jpg"></p><h3 id="创建SystemServer"><a href="#创建SystemServer" class="headerlink" title="创建SystemServer"></a>创建SystemServer</h3><h4 id="forkSystemServer"><a href="#forkSystemServer" class="headerlink" title="forkSystemServer"></a>forkSystemServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Runnable <span class="hljs-title function_">forkSystemServer</span><span class="hljs-params">(String abiList, String socketName,</span><br><span class="hljs-params">        ZygoteServer zygoteServer)</span> &#123;<br>    <span class="hljs-comment">// 配置进程的能力集</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">capabilities</span> <span class="hljs-operator">=</span> posixCapabilitiesAsBits(<br>            OsConstants.CAP_IPC_LOCK,<br>            OsConstants.CAP_KILL,<br>            OsConstants.CAP_NET_ADMIN,<br>            OsConstants.CAP_NET_BIND_SERVICE,<br>            OsConstants.CAP_NET_BROADCAST,<br>            OsConstants.CAP_NET_RAW,<br>            OsConstants.CAP_SYS_MODULE,<br>            OsConstants.CAP_SYS_NICE,<br>            OsConstants.CAP_SYS_PTRACE,<br>            OsConstants.CAP_SYS_TIME,<br>            OsConstants.CAP_SYS_TTY_CONFIG,<br>            OsConstants.CAP_WAKE_ALARM,<br>            OsConstants.CAP_BLOCK_SUSPEND<br>    );<br>    <br>    ...<br><br>    <span class="hljs-comment">// 创建args数组，用来保存启动SystemServer的启动参数</span><br>    String[] args = &#123;<br>            <span class="hljs-string">&quot;--setuid=1000&quot;</span>,<br>            <span class="hljs-string">&quot;--setgid=1000&quot;</span>,<br>            <span class="hljs-string">&quot;--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,&quot;</span><br>                    + <span class="hljs-string">&quot;1024,1032,1065,3001,3002,3003,3005,3006,3007,3009,3010,3011,3012&quot;</span>,<br>            <span class="hljs-string">&quot;--capabilities=&quot;</span> + capabilities + <span class="hljs-string">&quot;,&quot;</span> + capabilities,<br>            <span class="hljs-string">&quot;--nice-name=system_server&quot;</span>,<br>            <span class="hljs-string">&quot;--runtime-args&quot;</span>,<br>            <span class="hljs-string">&quot;--target-sdk-version=&quot;</span> + VMRuntime.SDK_VERSION_CUR_DEVELOPMENT,<br>            <span class="hljs-string">&quot;com.android.server.SystemServer&quot;</span>,<br>    &#125;;<br>    ZygoteArguments parsedArgs;<br><br>    <span class="hljs-type">int</span> pid;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br><br>        <span class="hljs-comment">// JNI调用nativeForkSystemServer()函数，派生出SystemServer进程</span><br>        pid = Zygote.forkSystemServer(<br>                parsedArgs.mUid, parsedArgs.mGid,<br>                parsedArgs.mGids,<br>                parsedArgs.mRuntimeFlags,<br>                <span class="hljs-literal">null</span>,<br>                parsedArgs.mPermittedCapabilities,<br>                parsedArgs.mEffectiveCapabilities);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>    &#125;<br><br>    <span class="hljs-comment">// 当前代码逻辑运行在子进程（SystemServer）</span><br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (hasSecondZygote(abiList)) &#123;<br>            waitForSecondaryZygote(socketName);<br>        &#125;<br>        <span class="hljs-comment">// 销毁zygoteServer,保留和AMS通信的socket（runSelectLoop）</span><br>        <span class="hljs-comment">// 当SystemServer创建过后，zygoteServerSocket就没有用处了，进行关闭</span><br>        zygoteServer.closeServerSocket();<br>        <span class="hljs-comment">// 处理SystemServer进程初始化工作并启动SystemServer进程</span><br>        <span class="hljs-comment">// 启动了一个binder线程池供SystemServer进程和其他进程通信使用</span><br>        <span class="hljs-comment">// 最后调用RuntimeInit.applicationInit()执行进程启动自身初始化工作</span><br>        <span class="hljs-comment">// applicationInit()最后是通过反射调用了SystemServer.java中的main()工作</span><br>        <span class="hljs-keyword">return</span> handleSystemServerProcess(parsedArgs);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="handleSystemServerProcess"><a href="#handleSystemServerProcess" class="headerlink" title="handleSystemServerProcess()"></a>handleSystemServerProcess()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Runnable <span class="hljs-title function_">handleSystemServerProcess</span><span class="hljs-params">(ZygoteArguments parsedArgs)</span> &#123;<br>    ...<br><br>    <span class="hljs-keyword">if</span> (parsedArgs.mNiceName != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 设置进程名字为niceName: system_server</span><br>        Process.setArgV0(parsedArgs.mNiceName);<br>    &#125;<br><br>    <span class="hljs-comment">// /system/framework/services.jar</span><br>    <span class="hljs-comment">// /system/framework/ethernet-service.jar</span><br>    <span class="hljs-comment">// /system/framework/wifi-service.jar</span><br>    <span class="hljs-comment">// /system/framework/com.android.location.provider.jar</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">systemServerClasspath</span> <span class="hljs-operator">=</span> Os.getenv(<span class="hljs-string">&quot;SYSTEMSERVERCLASSPATH&quot;</span>);<br>    ...<br><br>    <span class="hljs-keyword">if</span> (parsedArgs.mInvokeWith != <span class="hljs-literal">null</span>) &#123;<br>        <br>        ...<br>            <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 创建类加载器并赋予当前线程</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> getOrCreateSystemServerClassLoader();<br>        <span class="hljs-keyword">if</span> (cl != <span class="hljs-literal">null</span>) &#123;<br>            Thread.currentThread().setContextClassLoader(cl);<br>        &#125;<br><br>        <span class="hljs-comment">// 将剩余参数&#x27;com.android.server.SystemServer&#x27;传入zygoteInit</span><br>        <span class="hljs-keyword">return</span> ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,<br>                parsedArgs.mDisabledCompatChanges,<br>                parsedArgs.mRemainingArgs, cl);<br>    &#125;<br><br>    <span class="hljs-comment">/* should never reach here */</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="zygoteInit"><a href="#zygoteInit" class="headerlink" title="zygoteInit()"></a>zygoteInit()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runnable <span class="hljs-title function_">zygoteInit</span><span class="hljs-params">(<span class="hljs-type">int</span> targetSdkVersion, </span><br><span class="hljs-params">        <span class="hljs-type">long</span>[] disabledCompatChanges,</span><br><span class="hljs-params">        String[] argv, ClassLoader classLoader)</span> &#123;<br>    ...<br><br>    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="hljs-string">&quot;ZygoteInit&quot;</span>);<br>    <span class="hljs-comment">// 初始化Android Log输出流，重定向System.out和System.err到Android Log</span><br>    RuntimeInit.redirectLogStreams();<br><br>    <span class="hljs-comment">// 初始化通用的运行环境，如设置默认的未捕捉异常的Handler,设置时区,重置Log配置等</span><br>    RuntimeInit.commonInit();<br>    <span class="hljs-comment">// 通过JNI初始化Zygote</span><br>    ZygoteInit.nativeZygoteInit();<br>    <br>    <span class="hljs-comment">// 应用初始化</span><br>    <span class="hljs-keyword">return</span> RuntimeInit.applicationInit(targetSdkVersion, disabledCompatChanges, argv, classLoader);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="applicationInit"><a href="#applicationInit" class="headerlink" title="applicationInit()"></a>applicationInit()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/core/java/com/android/internal/os/RuntimeInit.java<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Runnable <span class="hljs-title function_">applicationInit</span><span class="hljs-params">(<span class="hljs-type">int</span> targetSdkVersion, <span class="hljs-type">long</span>[] disabledCompatChanges,</span><br><span class="hljs-params">        String[] argv, ClassLoader classLoader)</span> &#123;<br>    <span class="hljs-comment">// 设置关闭应用程序是否调用AppRuntime.onExit()</span><br>    nativeSetExitWithoutCleanup(<span class="hljs-literal">true</span>);<br><br>    VMRuntime.getRuntime().setTargetSdkVersion(targetSdkVersion);<br>    VMRuntime.getRuntime().setDisabledCompatChanges(disabledCompatChanges);<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Arguments</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Arguments</span>(argv);<br><br>    <span class="hljs-comment">// The end of of the RuntimeInit event (see #zygoteInit).</span><br>    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);<br><br>    <span class="hljs-comment">// 调用findStaticMain()反射获取到SystemServer的main方法</span><br>    <span class="hljs-keyword">return</span> findStaticMain(args.startClass, args.startArgs, classLoader);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="findStaticMain"><a href="#findStaticMain" class="headerlink" title="findStaticMain()"></a>findStaticMain()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/core/java/com/android/internal/os/RuntimeInit.java<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Runnable <span class="hljs-title function_">findStaticMain</span><span class="hljs-params">(String className, String[] argv,</span><br><span class="hljs-params">        ClassLoader classLoader)</span> &#123;<br>    Class&lt;?&gt; cl;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 反射得到SystemServer类</span><br>        cl = Class.forName(className, <span class="hljs-literal">true</span>, classLoader);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;<br>        ...<br>    &#125;<br><br>    Method m;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 反射获取SystemServer.main()方法</span><br>        m = cl.getMethod(<span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String[].class &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException ex) &#123;<br>        ...<br>    &#125;<br><br>    ...<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodAndArgsCaller</span>(m, argv);<br>&#125;<br></code></pre></td></tr></table></figure><p>此处的作用是先反射得到SystemServer类并获取其main()方法，将其传给MethodAndArgsCaller()并返回。MethodAndArgsCaller()是一个Runnale实现类，其run()方法里反射调用传进去的Method，在这里就是SystemServer.main()方法，最后run()在ZygoteInit.main()中调用。</p><h3 id="解析SystemServer"><a href="#解析SystemServer" class="headerlink" title="解析SystemServer"></a>解析SystemServer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/core/java/com/android/server/SystemServer.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemServer</span>().run();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;      <br>        ...<br>        <span class="hljs-comment">// 变更虚拟机的库文件</span><br>        SystemProperties.set(<span class="hljs-string">&quot;persist.sys.dalvik.vm.lib.2&quot;</span>, VMRuntime.getRuntime().vmLibrary());<br><br>        <span class="hljs-comment">// 清除vm内存增长上限，因为启动过程需要较多的虚拟机内存空间</span><br>        VMRuntime.getRuntime().clearGrowthLimit();<br>        ...        <br>        <span class="hljs-comment">// 创建消息Looper</span><br>        Looper.prepareMainLooper();<br>        ...<br>        <span class="hljs-comment">// 加载android_server.so库</span><br>        System.loadLibrary(<span class="hljs-string">&quot;android_servers&quot;</span>);<br>        ...<br>        <span class="hljs-comment">// 初始化系统Context</span><br>        createSystemContext();<br>        ...<br>        <span class="hljs-comment">// 创建SystemServiceManager</span><br>        mSystemServiceManager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemServiceManager</span>(mSystemContext);<br>        mSystemServiceManager.setStartInfo(mRuntimeRestart,<br>                mRuntimeStartElapsedTime, mRuntimeStartUptime);<br>        mDumper.addDumpable(mSystemServiceManager);<br><br>        <span class="hljs-comment">// 将mSystemServiceManager添加到本地服务的成员sLocalServiceObjects</span><br>        LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);<br>        <span class="hljs-comment">// 准备线程池</span><br>        <span class="hljs-type">SystemServerInitThreadPool</span> <span class="hljs-variable">tp</span> <span class="hljs-operator">=</span> SystemServerInitThreadPool.start();<br>        mDumper.addDumpable(tp);<br>        ...<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        t.traceEnd();  <span class="hljs-comment">// InitBeforeStartServices</span><br>    &#125;<br><br>    <span class="hljs-comment">// Setup the default WTF handler</span><br>    RuntimeInit.setDefaultApplicationWtfHandler(SystemServer::handleEarlySystemWtf);<br><br>    <span class="hljs-comment">// Start services.</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        t.traceBegin(<span class="hljs-string">&quot;StartServices&quot;</span>);<br>        <span class="hljs-comment">// 启动引导服务</span><br>        startBootstrapServices(t);<br>        <span class="hljs-comment">// 启动核心服务</span><br>        startCoreServices(t);<br>        <span class="hljs-comment">// 启动其他服务</span><br>        startOtherServices(t);<br>        startApexServices(t);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        Slog.e(<span class="hljs-string">&quot;System&quot;</span>, <span class="hljs-string">&quot;******************************************&quot;</span>);<br>        Slog.e(<span class="hljs-string">&quot;System&quot;</span>, <span class="hljs-string">&quot;************ Failure starting system services&quot;</span>, ex);<br>        <span class="hljs-keyword">throw</span> ex;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        t.traceEnd(); <span class="hljs-comment">// StartServices</span><br>    &#125;<br>    ...<br>    <span class="hljs-comment">// Loop forever.</span><br>    Looper.loop();<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Main thread loop unexpectedly exited&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="系统服务启动"><a href="#系统服务启动" class="headerlink" title="系统服务启动"></a>系统服务启动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/services/core/java/com/android/server/SystemServiceManager.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startService</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> SystemService service)</span> &#123;<br>    ...<br>    <span class="hljs-comment">// 注册Service，mServices是一个存储SystemService类型的ArrayList</span><br>    mServices.add(service);<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> SystemClock.elapsedRealtime();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 启动Service</span><br>        service.onStart();<br>    &#125; <span class="hljs-keyword">catch</span> (RuntimeException ex) &#123;<br>        ...<br>    &#125;<br>    warnIfTooLong(SystemClock.elapsedRealtime() - time, service, <span class="hljs-string">&quot;onStart&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SystemServer的启动过程主要做了以下事情：</p><ol><li>初始化一些系统变量和运行环境；</li><li>启动Binder线程池，这样就可以和其他进程进行通信；</li><li>创建SystemServiceManager，其用于对系统的服务进行创建、启动和生命周期管理；</li><li>启动各种系统服务。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>启动流程</tag>
      
      <tag>SystemServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WMS及其成员</title>
    <link href="/2024/03/10/WMS%E5%8F%8A%E5%85%B6%E6%88%90%E5%91%98/"/>
    <url>/2024/03/10/WMS%E5%8F%8A%E5%85%B6%E6%88%90%E5%91%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><h4 id="WMS的职责"><a href="#WMS的职责" class="headerlink" title="WMS的职责"></a>WMS的职责</h4><img src="https://s2.loli.net/2023/12/28/GzweqyZ6pVBrTvo.jpg" style="zoom:60%;" /><ol><li>窗口管理</li></ol><p>WMS是窗口的管理者，它负责窗口的启动、添加和删除，另外窗口的大小和层级也是由WMS进行管理的。窗口管理的核心成员有DisplayContent、WindowToken和WindowState。</p><ol start="2"><li>窗口动画</li></ol><p>窗口间进行切换时，使用窗口动画可以显得更炫一些，窗口动画由WMS的动画子系统来负责，动画子系统的管理者为WindowAnimator。</p><ol start="3"><li>输入系统的中转站</li></ol><p>通过对窗口的触摸从而产生触摸事件，InputManagerService（IMS）会对触摸事件进行处理，它会寻找一个最合适的窗口来处理触摸反馈信息，WMS是窗口的管理者，它作为输入系统的中转站再合适不过了。</p><ol start="4"><li>Surface管理</li></ol><p>窗口并不具备绘制的功能，因此每个窗口都需要有一块Surface来供自己绘制，为每个窗口分配Surface是由WMS来完成的。</p><h4 id="WMS的重要成员"><a href="#WMS的重要成员" class="headerlink" title="WMS的重要成员"></a>WMS的重要成员</h4><ul><li>mPolicy: WindowManagerPolicy</li></ul><p>mPolicy是WindowManagerPolicy（WMP）类型的变量。WindowManagerPolicy是窗口管理策略的接口类，用来定义一个窗口策略所要遵循的通用规范，并提供了WindowManager所有的特定的UI行为。它的具体实现类为PhoneWindowManager，这个实现类在WMS创建时被创建。WMP允许定制窗口层级和特殊窗口类型以及关键的调度和布局。</p><ul><li>mSessions: ArraySet</li></ul><p>mSessions是ArraySet类型的变量，元素类型为Session，它主要用于进程间通信，其他的应用程序进程想要和WMS进程进行通信就需要经过Session，并且每个应用程序进程都会对应一个Session，WMS保存这些Session用来记录所有向WMS提出窗口管理服务的客户端。</p><ul><li>mWindowMap: HashMap</li></ul><p>mWindowMap是HashMap类型的变量，用来保存WMS中各种窗口的集合。key值的类型为IBinder，value值的类型为WindowState。WindowState用于保存窗口的信息，在WMS中它用来描述一个窗口。</p><ul><li>mResizingWindows: ArrayList</li></ul><p>mResizingWindows是ArrayList类型的变量，元素类型为WindowState。mResizingWindows是用来存储正在调整大小的窗口的列表。与mResizingWindows类型的还有mForceRemoves、mDestroySurface等，其中mForceRemoves是在内存耗尽时设置的，里面存有需要强制删除的窗口，mDestroySurface里面存有需要被销毁的Surface。</p><ul><li>mAnimator: WindowAnimator</li></ul><p>mAnimator是WindowAnimator类型的变量，用于管理窗口的动画以及特效动画。</p><ul><li>mH: H</li></ul><p>mH是H类型的变量，系统的Handler类，用于将任务加入到主线程的消息队列中，这样代码逻辑就会在主线程中执行。</p><ul><li>mInputManager: InputManagerService</li></ul><p>mInputManager是InputManagerService类型的变量，输入系统的管理者。InputManagerService（IMS）会对触摸事件进行处理，它会寻找一个最合适的窗口来处理触摸反馈信息，WMS是窗口的管理者，因此WMS作为输入系统的中转站是再合适不过了。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Window</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Window的属性</title>
    <link href="/2024/03/10/Window%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
    <url>/2024/03/10/Window%E7%9A%84%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>WMS是Window的最终管理者，Window好比是员工，WMS是老板，为了方便老板管理员工则需要定义一些“协议”，这些“协议”就是Window的属性，它们被定义在WindowManager的内部类LayoutParams中，了解Window的属性能够更好地理解WMS的内部原理。Window的属性有很多种，与应用开发最密切的有三种，分别是Type（Window的类型）、Flag（Window的标志）和SoftInputMode（软键盘相关模式），下面分别介绍这三种Window的属性。</p><h4 id="Window的类型和显示次序"><a href="#Window的类型和显示次序" class="headerlink" title="Window的类型和显示次序"></a>Window的类型和显示次序</h4><p>Window的类型有很多种，比如应用程序窗口、系统错误窗口、输入法窗口、PopupWindow、Toast、Dialog等。总的来说，Window分为三大类型，分别是Application Window（应用程序窗口）、Sub Window（子窗口）、System Window（系统窗口），每个大类型中又包含了很多种类型，它们都定义在WindowManager的静态内部类LayoutParams中。</p><ol><li>应用程序窗口</li></ol><p>Activity就是一个典型的应用程序窗口，应用程序窗口包含的类型如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 应用程序窗口类型初始值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">FIRST_APPLICATION_WINDOW</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 窗口的基础值，其他的窗口值要大于这个值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_BASE_APPLICATION</span>   <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 普通的应用程序窗口类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_APPLICATION</span>        <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-comment">// 应用程序启动窗口类型，用于系统在应用程序窗口启动前显示的窗口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_APPLICATION_STARTING</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_DRAWN_APPLICATION</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-comment">// 应用程序窗口类型结束值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LAST_APPLICATION_WINDOW</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br></code></pre></td></tr></table></figure><p>应用程序窗口包含了以上几种Type值，应用程序窗口的Type值范围为1～99，这个数值的大小涉及窗口的层级。</p><ol start="2"><li>子窗口</li></ol><p>子窗口，顾名思义，它不能独立存在，需要附着在其他窗口才可以， PopupWindow就属于子窗口。子窗口的类型定义如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 子窗口类型初始值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">FIRST_SUB_WINDOW</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_APPLICATION_PANEL</span> <span class="hljs-operator">=</span> FIRST_SUB_WINDOW;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_APPLICATION_MEDIA</span> <span class="hljs-operator">=</span> FIRST_SUB_WINDOW + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_APPLICATION_SUB_PANEL</span> <span class="hljs-operator">=</span> FIRST_SUB_WINDOW + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_APPLICATION_ATTACHED_DIALOG</span> <span class="hljs-operator">=</span> FIRST_SUB_WINDOW + <span class="hljs-number">3</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_APPLICATION_MEDIA_OVERLAY</span>  <span class="hljs-operator">=</span> FIRST_SUB_WINDOW + <span class="hljs-number">4</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_APPLICATION_ABOVE_SUB_PANEL</span> <span class="hljs-operator">=</span> FIRST_SUB_WINDOW + <span class="hljs-number">5</span>;<br><span class="hljs-comment">// 子窗口类型结束值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LAST_SUB_WINDOW</span> <span class="hljs-operator">=</span> <span class="hljs-number">1999</span>;<br></code></pre></td></tr></table></figure><p>可以看出子窗口的Type值范围为1000～1999。</p><ol start="3"><li>系统窗口</li></ol><p>Toast、输入法窗口、系统音量条窗口、系统错误窗口都属于系统窗口。系统窗口的类型定义如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 系统窗口类型初始值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">FIRST_SYSTEM_WINDOW</span>     <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_STATUS_BAR</span>         <span class="hljs-operator">=</span> FIRST_SYSTEM_WINDOW;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_SEARCH_BAR</span>         <span class="hljs-operator">=</span> FIRST_SYSTEM_WINDOW+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_PHONE</span>              <span class="hljs-operator">=</span> FIRST_SYSTEM_WINDOW+<span class="hljs-number">2</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_SYSTEM_ALERT</span>       <span class="hljs-operator">=</span> FIRST_SYSTEM_WINDOW+<span class="hljs-number">3</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_KEYGUARD</span>           <span class="hljs-operator">=</span> FIRST_SYSTEM_WINDOW+<span class="hljs-number">4</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TYPE_TOAST</span>              <span class="hljs-operator">=</span> FIRST_SYSTEM_WINDOW+<span class="hljs-number">5</span>;<br>...<br><span class="hljs-comment">// 系统窗口类型结束值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LAST_SYSTEM_WINDOW</span>      <span class="hljs-operator">=</span> <span class="hljs-number">2999</span>;<br></code></pre></td></tr></table></figure><p>这里只列出部分系统窗口的类型值，系统窗口的Type值范围为2000～2999。</p><ol start="4"><li>窗口显示次序</li></ol><p>当一个进程向WMS申请一个窗口时，WMS会为窗口确定显示次序。为了方便窗口显示次序的管理，手机屏幕可以虚拟地用X、Y、Z轴来表示，其中Z轴垂直于屏幕，从屏幕内指向屏幕外，这样确定窗口显示次序也就是确定窗口在Z轴上的次序，这个次序称为Z-Oder。Type值是Z-Oder排序的依据，我们知道应用程序窗口的Type值范围为1～99，子窗口1000～1999，系统窗口2000～2999，在一般情况下，Type值越大则Z-Oder排序越靠前，就越靠近用户。当多个窗口的Type值相同，WMS会结合各种情况给出最终的Z-Oder。</p><h4 id="Window的标志"><a href="#Window的标志" class="headerlink" title="Window的标志"></a>Window的标志</h4><p>Window的标志也就是Flag，用于控制Window的显示，同样被定义在WindowManager的内部类LayoutParams中。这里列出几个常用的：</p><table><thead><tr><th>Flag</th><th>描述</th></tr></thead><tbody><tr><td>FLAG_ALLOW_LOCK_WHILE_SCREEN_ON</td><td>只要窗口可见，就允许在开启状态的屏幕上锁屏</td></tr><tr><td>FLAG_NOT_FOCUSABLE</td><td>窗口不能获得输入焦点，设置该标志的同时，FLAG_NOT_TOUCH_MODAL也会被设置</td></tr><tr><td>FLAG_NOT_TOUCHABLE</td><td>窗口不接收任何触摸事件</td></tr><tr><td>FLAG_NOT_TOUCH_MODAL</td><td>将该窗口区域外的触摸事件传递给其他的Window，而自己只会处理窗口区域内的触摸事件</td></tr><tr><td>FLAG_KEEP_SCREEN_ON</td><td>只要窗口可见，屏幕就会一直亮着</td></tr><tr><td>FLAG_LAYOUT_NO_LIMITS</td><td>允许窗口超过屏幕之外</td></tr><tr><td>FLAG_FULLSCREEN</td><td>隐藏所有的屏幕装饰窗口，比如在游戏、播放器中的全屏显示</td></tr><tr><td>FLAG_SHOW_WHEN_LOCKED</td><td>窗口可以在锁屏的窗口之上显示</td></tr><tr><td>FLAG_IGNORE_CHEEK_PRESSES</td><td>当用户的脸贴近屏幕时（比如打电话），不会去相应此事件</td></tr><tr><td>FLAG_TURN_SCREEN_ON</td><td>窗口显示时将屏幕点亮</td></tr></tbody></table><p>设置Window的Flag有三种方法。</p><ol><li><p>通过Window的addFlags()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Window</span> <span class="hljs-variable">mWindow</span> <span class="hljs-operator">=</span> getWindow();<br>mWindow.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);<br></code></pre></td></tr></table></figure></li><li><p>通过Window的setFlags()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Window</span> <span class="hljs-variable">mWindow</span> <span class="hljs-operator">=</span> getWindow();<br>mWindow.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,<br>        WindowManager.LayoutParams.FLAG_FULLSCREEN);<br></code></pre></td></tr></table></figure><p>其实Window的addFlags()方法内部会调用setFlags()方法，因此这两种方法区别不大。</p></li><li><p>给LayoutParams设置Flag，并通过WindowManager的addView()方法进行添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">WindowManager.<span class="hljs-type">LayoutParams</span> <span class="hljs-variable">mWindowLayoutParams</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowManager</span>.LayoutParams();<br>mWindowLayoutParams.flags = WindowManager.LayoutParams.FLAG_FULLSCREEN;<br><span class="hljs-type">WindowManager</span> <span class="hljs-variable">mWindowManager</span> <span class="hljs-operator">=</span> (WindowManager) getSystemService(Context.WINDOW_SERVICE);<br><span class="hljs-type">TextView</span> <span class="hljs-variable">mTextView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextView</span>(<span class="hljs-built_in">this</span>);<br>mWindowManager.addView(mTextView, mWindowLayoutParams);<br></code></pre></td></tr></table></figure></li></ol><h4 id="软键盘相关模式"><a href="#软键盘相关模式" class="headerlink" title="软键盘相关模式"></a>软键盘相关模式</h4><p>窗口和窗口的叠加是十分常见的场景，但如果其中的窗口是软键盘窗口，可能就会出现一些问题，比如典型的用户登录界面，默认的情况弹出的软键盘窗口可能会盖住输入框下方的按钮，这样用户体验会非常糟糕。为了使得软键盘窗口能够按照期望来显示，WindowManager的静态内部类LayoutParams中定义了软键盘相关模式。</p><table><thead><tr><th>SoftInputMode</th><th>描述</th></tr></thead><tbody><tr><td>SOFT_INPUT_STATE_UNSPECIFIED</td><td>没有指定状态，系统会选择一个合适的状态或依赖于主题的设置</td></tr><tr><td>SOFT_INPUT_STATE_UNCHANGED</td><td>不会改变软键盘状态</td></tr><tr><td>SOFT_INPUT_STATE_HIDDEN</td><td>当用户进入该窗口时，软键盘默认隐藏</td></tr><tr><td>SOFT_INPUT_STATE_ALWAYS_HIDDEN</td><td>当窗口获取焦点时，软键盘总是被隐藏</td></tr><tr><td>SOFT_INPUT_ADJUST_RESIZE</td><td>当软键盘弹出时，窗口会调整大小</td></tr><tr><td>SOFT_INPUT_ADJUST_PAN</td><td>当软键盘弹出时，窗口不需要调整大小，要确保输入焦点是可见的</td></tr></tbody></table><p>从上面给出的SoftInputMode，可以发现，它们与AndroidManifest中Activity的属性android:windowSoftInputMode是对应的。因此除了在AndroidManifest中为Activity设置android:windowSoftInputMode以外，还可以在Java代码中为Window设置SoftInputMode，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Window</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Window的操作</title>
    <link href="/2024/03/10/Window%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/03/10/Window%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>Window的操作包括对Window的添加、更新和删除。对于Window的操作，最终都是交由WMS来进行处理的。Window的操作分为两大部分，一部分是WindowManager处理部分，另一部分是WMS处理部分。我们知道Window分为三大类，分别是Application Window（应用程序窗口）、Sub Window（子窗口）和System Window（系统窗口），对于不同类型的Window添加过程会有所不同，但是对于WMS处理部分，添加的过程基本上是一样的，WMS对于这三大类的Window基本上是“一视同仁”的，如下图。</p><img src="https://s2.loli.net/2023/12/27/bwHXhjU24NpDLqr.jpg" style="zoom:60%;" /><h4 id="系统窗口的添加过程"><a href="#系统窗口的添加过程" class="headerlink" title="系统窗口的添加过程"></a>系统窗口的添加过程</h4><p>这里以系统窗口StatusBar为例，StatusBar是SystemUI的重要组成部分，具体就是指系统状态栏，用于显示时间、电量和信号等信息。</p><p><img src="https://s2.loli.net/2023/12/27/nKkuiBsDlYT1G9Q.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createAndAddWindows</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> RegisterStatusBarResult result)</span> &#123;<br>    makeStatusBarView(result);  <span class="hljs-comment">// 1</span><br>    mNotificationShadeWindowController.attach();<br>    mStatusBarWindowController.attach();  <span class="hljs-comment">// 2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处构建StatusBar的视图。</p><p>注释2处添加StatusBar的视图。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/window/StatusBarWindowController.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    mLp = getBarLayoutParams(mContext.getDisplay().getRotation());  <span class="hljs-comment">// 1</span><br>    ...<br><br>    mWindowManager.addView(mStatusBarWindowView, mLp);  <span class="hljs-comment">// 2</span><br>    mLpChanged.copyFrom(mLp);<br><br>    mContentInsetsProvider.addCallback(<span class="hljs-built_in">this</span>::calculateStatusBarLocationsForAllRotations);<br>    calculateStatusBarLocationsForAllRotations();<br>    mIsAttached = <span class="hljs-literal">true</span>;<br>    apply(mCurrentState);<br>&#125;<br><br><span class="hljs-keyword">private</span> WindowManager.LayoutParams <span class="hljs-title function_">getBarLayoutParams</span><span class="hljs-params">(<span class="hljs-type">int</span> rotation)</span> &#123;<br>    WindowManager.<span class="hljs-type">LayoutParams</span> <span class="hljs-variable">lp</span> <span class="hljs-operator">=</span> getBarLayoutParamsForRotation(rotation);<br>    lp.paramsForRotation = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowManager</span>.LayoutParams[<span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">rot</span> <span class="hljs-operator">=</span> Surface.ROTATION_0; rot &lt;= Surface.ROTATION_270; rot++) &#123;<br>        lp.paramsForRotation[rot] = getBarLayoutParamsForRotation(rot);<br>    &#125;<br>    <span class="hljs-keyword">return</span> lp;<br>&#125;<br><br><span class="hljs-keyword">private</span> WindowManager.LayoutParams <span class="hljs-title function_">getBarLayoutParamsForRotation</span><span class="hljs-params">(<span class="hljs-type">int</span> rotation)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> SystemBarUtils.getStatusBarHeightForRotation(mContext, rotation);<br>    WindowManager.<span class="hljs-type">LayoutParams</span> <span class="hljs-variable">lp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowManager</span>.LayoutParams(<br>            WindowManager.LayoutParams.MATCH_PARENT,<br>            height,<br>            WindowManager.LayoutParams.TYPE_STATUS_BAR,  <span class="hljs-comment">// 3</span><br>            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE<br>                    | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH<br>                    | WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS,<br>            PixelFormat.TRANSLUCENT);<br>    lp.privateFlags |= PRIVATE_FLAG_COLOR_SPACE_AGNOSTIC;<br>    lp.token = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Binder</span>();<br>    lp.gravity = Gravity.TOP;<br>    lp.setFitInsetsTypes(<span class="hljs-number">0</span> <span class="hljs-comment">/* types */</span>);<br>    lp.setTitle(<span class="hljs-string">&quot;StatusBar&quot;</span>);<br>    lp.packageName = mContext.getPackageName();<br>    lp.layoutInDisplayCutoutMode = LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">InsetsFrameProvider</span> <span class="hljs-variable">gestureInsetsProvider</span> <span class="hljs-operator">=</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsetsFrameProvider</span>(mInsetsSourceOwner, <span class="hljs-number">0</span>, mandatorySystemGestures());<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">safeTouchRegionHeight</span> <span class="hljs-operator">=</span> mContext.getResources().getDimensionPixelSize(<br>            com.android.internal.R.dimen.display_cutout_touchable_region_size);<br>    <span class="hljs-keyword">if</span> (safeTouchRegionHeight &gt; <span class="hljs-number">0</span>) &#123;<br>        gestureInsetsProvider.setMinimalInsetsSizeInDisplayCutoutSafe(<br>                Insets.of(<span class="hljs-number">0</span>, safeTouchRegionHeight, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>    &#125;<br>    lp.providedInsets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsetsFrameProvider</span>[] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsetsFrameProvider</span>(mInsetsSourceOwner, <span class="hljs-number">0</span>, statusBars())<br>                    .setInsetsSize(getInsets(height)),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsetsFrameProvider</span>(mInsetsSourceOwner, <span class="hljs-number">0</span>, tappableElement())<br>                    .setInsetsSize(getInsets(height)),<br>            gestureInsetsProvider<br>    &#125;;<br>    <span class="hljs-keyword">return</span> lp;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处通过getBarLayoutParams()创建LayoutParams来配置StatusBar视图的属性，包括Width、Height、Type、Flag、Gravity等。注释3处还设置了TYPE_STATUS_BAR，表示StatusBar视图的窗口类型是状态栏。</p><p>注释2处调用了WindowManager的addView()方法，addView()方法定义在WindowManager的父类接口ViewManager中，而addView()方法则是在WindowManagerImpl中实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/WindowManagerImpl.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addView</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> View view, <span class="hljs-meta">@NonNull</span> ViewGroup.LayoutParams params)</span> &#123;<br>    android.util.SeempLog.record_vg_layout(<span class="hljs-number">383</span>,params);<br>    applyTokens(params);<br>    mGlobal.addView(view, params, mContext.getDisplayNoVerify(), mParentWindow,<br>            mContext.getUserId());<br>&#125;<br></code></pre></td></tr></table></figure><p>addView()方法的第一个参数是View，说明窗口也是以View的形式存在的。addView()方法中会调用WindowManagerGlobal的addView()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/WindowManagerGlobal.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addView</span><span class="hljs-params">(View view, ViewGroup.LayoutParams params,</span><br><span class="hljs-params">        Display display, Window parentWindow, <span class="hljs-type">int</span> userId)</span> &#123;<br>    ... <span class="hljs-comment">// 参数检查</span><br><br>    <span class="hljs-keyword">final</span> WindowManager.<span class="hljs-type">LayoutParams</span> <span class="hljs-variable">wparams</span> <span class="hljs-operator">=</span> (WindowManager.LayoutParams) params;<br>    <span class="hljs-keyword">if</span> (parentWindow != <span class="hljs-literal">null</span>) &#123;<br>        parentWindow.adjustLayoutParamsForSubWindow(wparams);  <span class="hljs-comment">// 1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// If there&#x27;s no parent, then hardware acceleration for this view is</span><br>        <span class="hljs-comment">// set from the application&#x27;s hardware acceleration setting.</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> view.getContext();<br>        <span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span><br>                &amp;&amp; (context.getApplicationInfo().flags<br>                        &amp; ApplicationInfo.FLAG_HARDWARE_ACCELERATED) != <span class="hljs-number">0</span>) &#123;<br>            wparams.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;<br>        &#125;<br>    &#125;<br><br>    ViewRootImpl root;<br>    <span class="hljs-type">View</span> <span class="hljs-variable">panelParentView</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">synchronized</span> (mLock) &#123;<br>        ...<br>        <span class="hljs-comment">// 2</span><br>        <span class="hljs-keyword">if</span> (windowlessSession == <span class="hljs-literal">null</span>) &#123;<br>            root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ViewRootImpl</span>(view.getContext(), display);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ViewRootImpl</span>(view.getContext(), display,<br>                    windowlessSession, <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowlessWindowLayout</span>());<br>        &#125;<br><br>        view.setLayoutParams(wparams);<br>        ...<br>        mViews.add(view);  <span class="hljs-comment">// 3</span><br>        mRoots.add(root);  <span class="hljs-comment">// 4</span><br>        mParams.add(wparams);  <span class="hljs-comment">// 5</span><br><br>        <span class="hljs-comment">// do this last because it fires off messages to start doing things</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            root.setView(view, wparams, panelParentView, userId);  <span class="hljs-comment">// 6</span><br>        &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>WindowManagerGlobal中维护了三个和Window操作相关的列表，分别是：View列表（ArrayList&lt;View&gt; mViews）、布局参数列表 （ArrayList&lt;WindowManager.LayoutParams&gt; mParams）和ViewRootImpl列表（ArrayList&lt;ViewRootImpl&gt; mRoots）。</p><p>addView()首先会对参数view、params和display进行检查。</p><p>注释1处，如果当前窗口要作为子窗口，就会根据父窗口对子窗口的WindowManager.LayoutParams类型的wparams对象进行相应调整。注释3处将添加的View保存到View列表中。注释5处将窗口的参数保存到布局参数列表中。</p><p>在注释2处创建了ViewRootImpl并赋值给root，紧接着在注释4处将root存入到ViewRootImpl列表中。</p><p>注释6处将窗口和窗口的参数通过setView()方法设置到ViewRootImpl中，可见我们添加窗口这一操作是通过ViewRootImpl来进行的。ViewRootImpl身负了很多职责，主要有以下几点：</p><ul><li>View树的根并管理View树；</li><li>触发View的测量、布局和绘制；</li><li>输入事件的中转站；</li><li>管理Surface；</li><li>负责与WMS进行进程间通信。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/ViewRootImpl.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setView</span><span class="hljs-params">(View view, WindowManager.LayoutParams attrs, View panelParentView,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> userId)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-keyword">if</span> (mView == <span class="hljs-literal">null</span>) &#123;<br>            ...<br>            <span class="hljs-keyword">try</span> &#123;<br>                ...<br>                res = mWindowSession.addToDisplayAsUser(mWindow, mWindowAttributes,<br>                        getHostVisibility(), mDisplay.getDisplayId(), userId,<br>                        mInsetsController.getRequestedVisibleTypes(), inputChannel, mTempInsets,<br>                        mTempControls, attachedFrame, compatScale);<br>                ...<br>            &#125; <span class="hljs-keyword">catch</span> (RemoteException | RuntimeException e) &#123;<br>                ...<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                ...<br>            &#125;<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用mWindowSession的addToDisplayAsUser()方法，mWindowSession是IWindowSession类型的，它是一个Binder对象，用于进行进程间通信，IWindowSession是Client端的代理，它的Server端的实现为Session，此前的代码逻辑都是运行在本地进程的，而Session的addToDisplayAsUser()方法则运行在WMS所在的进程（SystemServer进程）中。</p><img src="https://s2.loli.net/2023/12/27/ICf2YOJdMFAU5zt.jpg" style="zoom:75%;" /><p>从图中可以看出，本地进程的ViewRootImpl要想和WMS进行通信需要经过Session，那么Session为何包含在WMS中呢？我们接着往下看Session的addToDisplayAsUser()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/Session.java<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addToDisplayAsUser</span><span class="hljs-params">(IWindow window, WindowManager.LayoutParams attrs,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> viewVisibility, <span class="hljs-type">int</span> displayId, <span class="hljs-type">int</span> userId, <span class="hljs-meta">@InsetsType</span> <span class="hljs-type">int</span> requestedVisibleTypes,</span><br><span class="hljs-params">        InputChannel outInputChannel, InsetsState outInsetsState,</span><br><span class="hljs-params">        InsetsSourceControl.Array outActiveControls, Rect outAttachedFrame,</span><br><span class="hljs-params">        <span class="hljs-type">float</span>[] outSizeCompatScale)</span> &#123;<br>    <span class="hljs-keyword">return</span> mService.addWindow(<span class="hljs-built_in">this</span>, window, attrs, viewVisibility, displayId, userId,<br>            requestedVisibleTypes, outInputChannel, outInsetsState, outActiveControls,<br>            outAttachedFrame, outSizeCompatScale);<br>&#125;<br></code></pre></td></tr></table></figure><p>在addToDisplayAsUser()方法中调用了WMS的addWindow()方法，并将自身也就是Session作为参数传了进去，每个应用程序进程都会对应一个Session，WMS会用ArrayList来保存这些Session，这就是为什么WMS包含Session的原因。这样剩下的工作就交给WMS来处理，在WMS中会为这个添加的窗口分配Surface，并确定窗口显示次序，可见负责显示界面的是画布Surface，而不是窗口本身。WMS会将它所管理的Surface交由SurfaceFlinger处理，SurfaceFlinger会将这些Surface混合并绘制到屏幕上。</p><h4 id="Activity的添加过程"><a href="#Activity的添加过程" class="headerlink" title="Activity的添加过程"></a>Activity的添加过程</h4><p>无论是哪种窗口，它的添加过程在WMS处理部分中基本是类似的，只不过会在权限和窗口显示次序等方面会有些不同。但是在WindowManager处理部分会有所不同，这里以最典型的应用程序窗口Activity为例，Activity在启动过程中，如果Activity所在的进程不存在则会创建新的进程，创建新的进程之后就会运行代表主线程的实例ActivityThread，ActivityThread管理着当前应用程序进程的线程，这在Activity的启动过程中运用得很明显，当界面要与用户进行交互时，会调用ActivithThread的handleResumeActivity()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleResumeActivity</span><span class="hljs-params">(ActivityClientRecord r, <span class="hljs-type">boolean</span> finalStateRequest,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> isForward, <span class="hljs-type">boolean</span> shouldSendCompatFakeFocus, String reason)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">if</span> (!performResumeActivity(r, finalStateRequest, reason)) &#123;  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    ...<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Activity</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> r.activity;<br><br>    ...<br>    <span class="hljs-keyword">if</span> (r.window == <span class="hljs-literal">null</span> &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;<br>        r.window = r.activity.getWindow();<br>        <span class="hljs-type">View</span> <span class="hljs-variable">decor</span> <span class="hljs-operator">=</span> r.window.getDecorView();<br>        ...<br>        <span class="hljs-type">ViewManager</span> <span class="hljs-variable">wm</span> <span class="hljs-operator">=</span> a.getWindowManager();  <span class="hljs-comment">// 2</span><br>        ...<br>        <span class="hljs-keyword">if</span> (a.mVisibleFromClient) &#123;<br>            <span class="hljs-keyword">if</span> (!a.mWindowAdded) &#123;<br>                a.mWindowAdded = <span class="hljs-literal">true</span>;<br>                wm.addView(decor, l);  <span class="hljs-comment">// 3</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ...<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!willBeVisible) &#123;<br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处的performResumeActivity()方法最终会调用Activity的onResume()方法。</p><p>注释2处得到ViewManager类型的wm对象，注释3处调用了ViewManager的addView()方法，而addView()方法则是在WindowManagerImpl中实现的，此后的过程在上面的系统窗口StatusBar的添加过程中已经讲过，唯一需要注意的是ViewManager的addView()方法的第一个参数为DecorView，这说明Activity窗口中会包含DecorView。</p><h4 id="Window的更新过程"><a href="#Window的更新过程" class="headerlink" title="Window的更新过程"></a>Window的更新过程</h4><p><img src="https://s2.loli.net/2023/12/27/Rwc8Y5zdnsveihG.jpg"></p><p>Window的更新过程和Window的添加过程是类似的。需要调用ViewManager的updateViewLayout()方法，updateViewLayout()方法在WindowManagerImpl中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/WindowManagerImpl.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateViewLayout</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> View view, <span class="hljs-meta">@NonNull</span> ViewGroup.LayoutParams params)</span> &#123;<br>    android.util.SeempLog.record_vg_layout(<span class="hljs-number">384</span>,params);<br>    applyTokens(params);<br>    mGlobal.updateViewLayout(view, params);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用WindowManagerGlobal的updateViewLayout()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/WindowManagerGlobal.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateViewLayout</span><span class="hljs-params">(View view, ViewGroup.LayoutParams params)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">final</span> WindowManager.<span class="hljs-type">LayoutParams</span> <span class="hljs-variable">wparams</span> <span class="hljs-operator">=</span> (WindowManager.LayoutParams)params;<br><br>    view.setLayoutParams(wparams);  <span class="hljs-comment">// 1</span><br><br>    <span class="hljs-keyword">synchronized</span> (mLock) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> findViewLocked(view, <span class="hljs-literal">true</span>);  <span class="hljs-comment">// 2</span><br>        <span class="hljs-type">ViewRootImpl</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> mRoots.get(index);  <span class="hljs-comment">// 3</span><br>        mParams.remove(index);  <span class="hljs-comment">// 4</span><br>        mParams.add(index, wparams);  <span class="hljs-comment">// 5</span><br>        root.setLayoutParams(wparams, <span class="hljs-literal">false</span>);  <span class="hljs-comment">// 6</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处将更新的参数设置到View中。</p><p>注释2处得到要更新的窗口在View列表中的索引，注释3处在ViewRootImpl列表中根据索引得到窗口的ViewRootImpl。</p><p>注释4和5处用于更新布局参数列表，注释6处调用ViewRootImpl的setLayoutParams()方法将更新的参数设置到ViewRootImpl中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/ViewRootImpl.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLayoutParams</span><span class="hljs-params">(WindowManager.LayoutParams attrs, <span class="hljs-type">boolean</span> newView)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        ...<br>        scheduleTraversals();<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ViewRootImpl的setLayoutParams()方法在最后会调用ViewRootImpl的scheduleTraversals()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/ViewRootImpl.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduleTraversals</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (!mTraversalScheduled) &#123;<br>        mTraversalScheduled = <span class="hljs-literal">true</span>;<br>        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();<br>        mChoreographer.postCallback(<br>                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class="hljs-literal">null</span>);  <span class="hljs-comment">// 1</span><br>        notifyRendererOfFramePending();<br>        pokeDrawLockIfNeeded();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处的Choreographer译为“舞蹈指导”，用于接收显示系统的VSync信号，在下一个帧渲染时控制执行一些操作。Choreographer的postCallback()方法用于发起添加回调，这个添加的回调将在下一帧被渲染时执行。这个添加的回调指的是注释1处的TraversalRunnable类型的mTraversalRunnable。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/ViewRootImpl.java<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TraversalRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        doTraversal();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在TraversalRunnable的run()方法中调用了doTraversal()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/ViewRootImpl.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">doTraversal</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (mTraversalScheduled) &#123;<br>        ...<br>        performTraversals();<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>doTraversal()方法中又调用了performTraversals()方法，performTraversals()方法使得ViewTree开始View的工作流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/ViewRootImpl.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performTraversals</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    <span class="hljs-keyword">if</span> (mFirst || windowShouldResize || viewVisibilityChanged || params != <span class="hljs-literal">null</span><br>            || mForceNextWindowRelayout) &#123;<br>        ...<br>        <span class="hljs-keyword">try</span> &#123;<br>            ...<br>            relayoutResult = relayoutWindow(params, viewVisibility, insetsPending);  <span class="hljs-comment">// 1</span><br>            ...<br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            ...<br>        &#125;<br>        ...<br>        <span class="hljs-keyword">if</span> (!mStopped || mReportNextDraw) &#123;<br>            <span class="hljs-keyword">if</span> (mWidth != host.getMeasuredWidth() || mHeight != host.getMeasuredHeight()<br>                    || dispatchApplyInsets || updatedConfiguration) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">childWidthMeasureSpec</span> <span class="hljs-operator">=</span> getRootMeasureSpec(mWidth, lp.width,<br>                        lp.privateFlags);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">childHeightMeasureSpec</span> <span class="hljs-operator">=</span> getRootMeasureSpec(mHeight, lp.height,<br>                        lp.privateFlags);<br>                ...<br>                 <span class="hljs-comment">// Ask host how big it wants to be</span><br>                performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);  <span class="hljs-comment">// 2</span><br>                ...<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">if</span> (didLayout) &#123;<br>        performLayout(lp, mWidth, mHeight);  <span class="hljs-comment">// 3</span><br>        ...<br>    &#125;<br>    ...<br><br>    <span class="hljs-keyword">if</span> (!isViewVisible) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cancelAndRedraw) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>        <span class="hljs-keyword">if</span> (!performDraw() &amp;&amp; mActiveSurfaceSyncGroup != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 4</span><br>            mActiveSurfaceSyncGroup.markSyncReady();<br>        &#125;<br>    &#125;<br><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处的relayoutWindow()方法内部会调用IWindowSession的relayout()方法来更新Window视图，最终会调用WMS的relayoutWindow()方法。</p><p>注释2、3、4处分别调用performMeasure()、performLayout()、performDraw()方法，它们的内部又会调用View的measure()、layout()、draw()方法，这样就完成了View的工作流程。在performTraversals()方法中更新了Window视图，又执行Window中的View的工作流程，这样就完成了Window的更新。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Window</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Window相关类</title>
    <link href="/2024/03/10/Window%E7%9B%B8%E5%85%B3%E7%B1%BB/"/>
    <url>/2024/03/10/Window%E7%9B%B8%E5%85%B3%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><h4 id="Window、WindowManager和WMS的关系"><a href="#Window、WindowManager和WMS的关系" class="headerlink" title="Window、WindowManager和WMS的关系"></a>Window、WindowManager和WMS的关系</h4><p>Window是一个抽象类，具体的实现类为PhoneWindow，它对View进行管理。</p><p>WindowManager是一个接口类，继承自接口ViewManager，它是用来管理Window的，它的实现类为WindowManagerImpl。如果我们想要对Window（View）进行添加、更新和删除操作就可以使用WindowManager，WindowManager会将具体的工作交由WMS来处理，WindowManager和WMS通过Binder来进行跨进程通信，WMS作为系统服务有很多API是不会暴露给WindowManager的。</p><img src="https://s2.loli.net/2023/12/26/zcaJ2lviuVyeD3g.jpg" style="zoom:67%;" /><p>Window包含了View并对View进行管理，Window用虚线来表示是因为Window是一个抽象概念，用来描述一个窗口，并不是真实存在的，Window的实体其实也是View。WindowManager用来管理Window，而WindowManager所提供的功能最终会由WMS进行处理。</p><h4 id="WindowManager相关方法"><a href="#WindowManager相关方法" class="headerlink" title="WindowManager相关方法"></a>WindowManager相关方法</h4><p>WindowManager是一个接口类，继承自接口ViewManager，ViewManager中定义了三个方法，分别用来添加、更新和删除View。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/ViewManager.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ViewManager</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addView</span><span class="hljs-params">(View view, ViewGroup.LayoutParams params)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateViewLayout</span><span class="hljs-params">(View view, ViewGroup.LayoutParams params)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeView</span><span class="hljs-params">(View view)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>WindowManager也继承了这些方法，而这些方法传入的参数都是View类型，说明Window是以View的形式存在的。WindowManager在继承ViewManager的同时，又加入很多功能，包括Window的类型和层级相关的常量、内部类以及一些方法，其中有两个方法是根据Window的特性加入的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/WindowManager.java<br><span class="hljs-keyword">public</span> Display <span class="hljs-title function_">getDefaultDisplay</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeViewImmediate</span><span class="hljs-params">(View view)</span>;<br></code></pre></td></tr></table></figure><p>getDefaultDisplay()方法能够得知这个WindowManager实例将Window添加到哪个屏幕上了，换句话说，就是得到WindowManager所管理的屏幕（Display）。</p><p>removeViewImmediate()方法则规定在这个方法返回前要立即执行View.onDetachedFromWindow()，来完成传入的View相关的销毁工作。</p><h4 id="PhoneWindow相关方法"><a href="#PhoneWindow相关方法" class="headerlink" title="PhoneWindow相关方法"></a>PhoneWindow相关方法</h4><p>PhoneWindow是在Activity创建的attach()方法中创建的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/Activity.java<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Context context, ActivityThread aThread,</span><br><span class="hljs-params">        Instrumentation instr, IBinder token, <span class="hljs-type">int</span> ident,</span><br><span class="hljs-params">        Application application, Intent intent, ActivityInfo info,</span><br><span class="hljs-params">        CharSequence title, Activity parent, String id,</span><br><span class="hljs-params">        NonConfigurationInstances lastNonConfigurationInstances,</span><br><span class="hljs-params">        Configuration config, String referrer, IVoiceInteractor voiceInteractor,</span><br><span class="hljs-params">        Window window, ActivityConfigCallback activityConfigCallback, IBinder assistToken,</span><br><span class="hljs-params">        IBinder shareableActivityToken)</span> &#123;<br>    ...<br>    mWindow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhoneWindow</span>(<span class="hljs-built_in">this</span>, window, activityConfigCallback);  <span class="hljs-comment">// 1</span><br>    ...<br>    mWindow.setWindowManager(<br>            (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),<br>            mToken, mComponent.flattenToString(),<br>            (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class="hljs-number">0</span>);  <span class="hljs-comment">// 2</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处创建了PhoneWindow，注释2处调用PhoneWindow#setWindowManager()方法，这个方法在PhoneWindow的父类Window中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/Window.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWindowManager</span><span class="hljs-params">(WindowManager wm, IBinder appToken, String appName,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> hardwareAccelerated)</span> &#123;<br>    mAppToken = appToken;<br>    mAppName = appName;<br>    mHardwareAccelerated = hardwareAccelerated;<br>    <span class="hljs-keyword">if</span> (wm == <span class="hljs-literal">null</span>) &#123;<br>        wm = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);  <span class="hljs-comment">// 1</span><br>    &#125;<br>    mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(<span class="hljs-built_in">this</span>);  <span class="hljs-comment">// 2</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>如果传入的WindowManager为null，就会在注释1处调用Context#getSystemService()方法，并传入服务的名称Context。WINDOW_SERVICE（值为window），具体在ContextImpl中实现。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ContextImpl.java<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getSystemService</span><span class="hljs-params">(String name)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">return</span> SystemServiceRegistry.getSystemService(<span class="hljs-built_in">this</span>, name);<br>&#125;<br></code></pre></td></tr></table></figure><p> 调用SystemServiceRegistry#getSystemService()方法。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/SystemServiceRegistry.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getSystemService</span><span class="hljs-params">(ContextImpl ctx, String name)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">final</span> ServiceFetcher&lt;?&gt; fetcher = SYSTEM_SERVICE_FETCHERS.get(name);<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> fetcher.getService(ctx);<br>    ...<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p> SYSTEM_SERVICE_FETCHERS是一个ArrayMap，其Key为系统服务名，Value为ServiceFetcher对象。</p><ul><li><p>SYSTEM_SERVICE_FETCHERS是在什么时候被赋值的？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/SystemServiceRegistry.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerService</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String serviceName,</span><br><span class="hljs-params">        <span class="hljs-meta">@NonNull</span> Class&lt;T&gt; serviceClass, <span class="hljs-meta">@NonNull</span> ServiceFetcher&lt;T&gt; serviceFetcher)</span> &#123;<br>    SYSTEM_SERVICE_NAMES.put(serviceClass, serviceName);<br>    SYSTEM_SERVICE_FETCHERS.put(serviceName, serviceFetcher);<br>    SYSTEM_SERVICE_CLASS_NAMES.put(serviceName, serviceClass.getSimpleName());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>registerService()方法是什么时候被调用的？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/SystemServiceRegistry.java<br><span class="hljs-keyword">static</span> &#123;<br>    ...<br>    registerService(Context.WINDOW_SERVICE, WindowManager.class,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CachedServiceFetcher</span>&lt;WindowManager&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> WindowManager <span class="hljs-title function_">createService</span><span class="hljs-params">(ContextImpl ctx)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowManagerImpl</span>(ctx);  <span class="hljs-comment">// 1</span><br>        &#125;&#125;);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在SystemServiceRegistry的静态代码块中会调用多个registerService()方法，registerService()方法内部会将传入的服务的名称存入到SYSTEM_SERVICE_FETCHERS中。从注释1处可以看出，传入的Context.WINDOW_SERVICE对应的就是WindowManagerImpl实例。</p></li></ul></li><li><p>mContext.getSystemService()得到WindowManagerImpl实例后转为WindowManager类型，在注释2处调用了WindowManagerImpl#createLocalWindowManager()方法。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/WindowManagerImpl.java<br><span class="hljs-keyword">public</span> WindowManagerImpl <span class="hljs-title function_">createLocalWindowManager</span><span class="hljs-params">(Window parentWindow)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowManagerImpl</span>(mContext, parentWindow, mWindowContextToken);<br>&#125;<br></code></pre></td></tr></table></figure><p> createLocalWindowManager()方法同样也是创建WindowManagerImpl，不同的是这次创建WindowManagerImpl时将创建它的Window作为参数传了进来，这样WindowManagerImpl就持有了Window的引用，可以对Window进行操作，比如在Window中添加View，会调用WindowManagerImpl的addView()方法，如下所示：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/WindowManagerImpl.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addView</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> View view, <span class="hljs-meta">@NonNull</span> ViewGroup.LayoutParams params)</span> &#123;<br>    android.util.SeempLog.record_vg_layout(<span class="hljs-number">383</span>,params);<br>    applyTokens(params);<br>    mGlobal.addView(view, params, mContext.getDisplayNoVerify(), mParentWindow,<br>            mContext.getUserId());  <span class="hljs-comment">// 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p> 注释1处调用了WindowManagerGlobal的addView()方法，其中参数mParentWindow就是上面提到的Window，可以看出WindowManagerImpl虽然是WindowManage的实现类，但是没有实现什么功能，而是将功能实现委托给了WindowManagerGlobal，这里用到的是桥接模式。</p></li></ol><p>我们来查看WindowManagerImpl中是如何定义WindowManagerGlobal的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowManagerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WindowManager</span> &#123;<br>    <span class="hljs-meta">@UnsupportedAppUsage</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">WindowManagerGlobal</span> <span class="hljs-variable">mGlobal</span> <span class="hljs-operator">=</span> WindowManagerGlobal.getInstance();  <span class="hljs-comment">// 1</span><br>    <span class="hljs-meta">@UiContext</span><br>    <span class="hljs-meta">@VisibleForTesting</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Context mContext;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Window mParentWindow;  <span class="hljs-comment">// 2</span><br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">WindowManagerImpl</span><span class="hljs-params">(Context context, Window parentWindow,</span><br><span class="hljs-params">            <span class="hljs-meta">@Nullable</span> IBinder windowContextToken)</span> &#123;<br>        mContext = context;<br>        mParentWindow = parentWindow;  <span class="hljs-comment">// 3</span><br>        mWindowContextToken = windowContextToken;<br>        mWindowMetricsController = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowMetricsController</span>(mContext);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处可以看出WindowManagerGlobal是一个单例，说明在一个进程中只有一个WindowManagerGlobal实例。</p><p>注释2处结合注释3处说明这个WindowManagerImpl实例会作为哪个Window的子Window，这也就说明在一个进程中WindowManagerImpl可能会有多个实例。</p><p>通过如上的源码分析，WindowManager的关联类如下图所示：</p><p><img src="https://s2.loli.net/2023/12/26/3aeDTIOg9qxCkcV.jpg"></p><p>从图中可以看出，PhoneWindow继承自Window，Window通过setWindowManager()方法与WindowManager发生关联。WindowManager继承自接口ViewManager，WindowManagerImpl是WindowManager接口的实现类，但是具体的功能都会委托给WindowManagerGlobal来实现。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Window</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Window的删除过程</title>
    <link href="/2024/03/10/Window%E7%9A%84%E5%88%A0%E9%99%A4%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/03/10/Window%E7%9A%84%E5%88%A0%E9%99%A4%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>删除Window需要先调用WindowManagerImpl的removeView()方法，在removeView()方法中又调用WindowManagerGlobal的removeView()方法。为了表述得更易于理解，将要删除的Window（View）简称为V。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/WindowManagerGlobal.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeView</span><span class="hljs-params">(View view, <span class="hljs-type">boolean</span> immediate)</span> &#123;<br>    <span class="hljs-keyword">if</span> (view == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;view must not be null&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">synchronized</span> (mLock) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> findViewLocked(view, <span class="hljs-literal">true</span>);  <span class="hljs-comment">// 1</span><br>        <span class="hljs-type">View</span> <span class="hljs-variable">curView</span> <span class="hljs-operator">=</span> mRoots.get(index).getView();<br>        removeViewLocked(index, immediate);  <span class="hljs-comment">// 2</span><br>        <span class="hljs-keyword">if</span> (curView == view) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Calling with view &quot;</span> + view<br>                + <span class="hljs-string">&quot; but the ViewAncestor is attached to &quot;</span> + curView);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处找到V在View列表中的索引，注释2处调用removeViewLocked()方法并将这个索引传进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/WindowManagerGlobal.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeViewLocked</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">boolean</span> immediate)</span> &#123;<br>    <span class="hljs-type">ViewRootImpl</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> mRoots.get(index);  <span class="hljs-comment">// 1</span><br>    <span class="hljs-type">View</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> root.getView();<br><br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>        root.getImeFocusController().onWindowDismissed();  <span class="hljs-comment">// 2</span><br>    &#125;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">deferred</span> <span class="hljs-operator">=</span> root.die(immediate);  <span class="hljs-comment">// 3</span><br>    <span class="hljs-keyword">if</span> (view != <span class="hljs-literal">null</span>) &#123;<br>        view.assignParent(<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> (deferred) &#123;<br>            mDyingViews.add(view);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处根据传入的索引在ViewRootImpl列表中获得V的ViewRootImpl。</p><p>注释2处结束V的输入法相关的逻辑。</p><p>注释3处调用ViewRootImpl的die()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/ViewRootImpl.java<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">die</span><span class="hljs-params">(<span class="hljs-type">boolean</span> immediate)</span> &#123;<br>    <span class="hljs-comment">// Make sure we do execute immediately if we are in the middle of a traversal or the damage</span><br>    <span class="hljs-comment">// done by dispatchDetachedFromWindow will cause havoc on return.</span><br>    <span class="hljs-keyword">if</span> (immediate &amp;&amp; !mIsInTraversal) &#123;  <span class="hljs-comment">// 1</span><br>        doDie();  <span class="hljs-comment">// 2</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!mIsDrawing) &#123;<br>        destroyHardwareRenderer();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Log.e(mTag, <span class="hljs-string">&quot;Attempting to destroy the window while drawing!\n&quot;</span> +<br>                <span class="hljs-string">&quot;  window=&quot;</span> + <span class="hljs-built_in">this</span> + <span class="hljs-string">&quot;, title=&quot;</span> + mWindowAttributes.getTitle());<br>    &#125;<br>    mHandler.sendEmptyMessage(MSG_DIE);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处如果immediate为true（需要立即执行），并且mIsInTraversal值为false则执行注释2处的代码，mIsInTraversal在执行ViewRootImpl的performTraversals()方法时会被设置为true，在performTraversals()执行完时被设置为false，因此注释1处可以理解为die()方法需要立即执行并且此时ViewRootImpl不再执行performTraversals()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/ViewRootImpl.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">doDie</span><span class="hljs-params">()</span> &#123;<br>    checkThread();  <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">if</span> (LOCAL_LOGV) Log.v(mTag, <span class="hljs-string">&quot;DIE in &quot;</span> + <span class="hljs-built_in">this</span> + <span class="hljs-string">&quot; of &quot;</span> + mSurface);<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-keyword">if</span> (mRemoved) &#123;  <span class="hljs-comment">// 2</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        mRemoved = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 3</span><br>        mOnBackInvokedDispatcher.detachFromWindow();<br>        <span class="hljs-keyword">if</span> (mAdded) &#123;  <span class="hljs-comment">// 4</span><br>            dispatchDetachedFromWindow();  <span class="hljs-comment">// 5</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (mAdded &amp;&amp; !mFirst) &#123;  <span class="hljs-comment">// 6</span><br>            destroyHardwareRenderer();<br><br>            <span class="hljs-keyword">if</span> (mView != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">viewVisibility</span> <span class="hljs-operator">=</span> mView.getVisibility();<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">viewVisibilityChanged</span> <span class="hljs-operator">=</span> mViewVisibility != viewVisibility;<br>                <span class="hljs-keyword">if</span> (mWindowAttributesChanged || viewVisibilityChanged) &#123;<br>                    <span class="hljs-comment">// If layout params have been changed, first give them</span><br>                    <span class="hljs-comment">// to the window manager to make sure it has the correct</span><br>                    <span class="hljs-comment">// animation info.</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">if</span> ((relayoutWindow(mWindowAttributes, viewVisibility, <span class="hljs-literal">false</span>)<br>                                &amp; WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME) != <span class="hljs-number">0</span>) &#123;<br>                            mWindowSession.finishDrawing(<br>                                mWindow, <span class="hljs-literal">null</span> <span class="hljs-comment">/* postDrawTransaction */</span>, Integer.MAX_VALUE);<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>                    &#125;<br>                &#125;<br><br>                destroySurface();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// If our window is removed, we might not get notified about losing control.</span><br>        <span class="hljs-comment">// Invoking this can release the leashes as soon as possible instead of relying on GC.</span><br>        mInsetsController.onControlsChanged(<span class="hljs-literal">null</span>);<br><br>        mAdded = <span class="hljs-literal">false</span>;<br>        AnimationHandler.removeRequestor(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (mActiveSurfaceSyncGroup != <span class="hljs-literal">null</span>) &#123;<br>        mActiveSurfaceSyncGroup.markSyncReady();<br>        mActiveSurfaceSyncGroup = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (mHasPendingTransactions) &#123;<br>        mPendingTransaction.apply();<br>    &#125;<br>    WindowManagerGlobal.getInstance().doRemoveView(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处用于检查执行doDie()方法的线程的正确性，在checkThread()的内部会判断执行doDie()方法的线程是否是创建V的原始线程，如果不是就会抛出异常，这是因为只有创建V的原始线程才能够操作V。</p><p>注释2、3的代码用于防止doDie()方法被重复调用。</p><p>注释4处V有子View就会调用注释5处的dispatchDetachedFromWindow()方法来销毁View。</p><p>注释6处如果V有子View并且不是第一次被添加，就会执行后面的代码逻辑。</p><p>注释7处WindowManagerGlobal的doRemoveView()方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/WindowManagerGlobal.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">doRemoveView</span><span class="hljs-params">(ViewRootImpl root)</span> &#123;<br>    <span class="hljs-type">boolean</span> allViewsRemoved;<br>    <span class="hljs-keyword">synchronized</span> (mLock) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> mRoots.indexOf(root);  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span>) &#123;<br>            mRoots.remove(index);<br>            mParams.remove(index);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">View</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> mViews.remove(index);<br>            mDyingViews.remove(view);<br>        &#125;<br>        ...<br>&#125;<br></code></pre></td></tr></table></figure><p>WindowManagerGlobal中维护了和Window操作相关的三个列表，doRemoveView()方法会从这三个列表中清除V对应的元素。</p><p>注释1处找到V对应的ViewRootImpl在ViewRootImpl列表中的索引，接着根据这个索引从ViewRootImpl列表、布局参数列表和View列表中删除与V对应的元素。</p><p>我们接着回到ViewRootImpl的doDie()方法，查看注释5处的dispatchDetachedFromWindow()方法做了什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/ViewRootImpl.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatchDetachedFromWindow</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        mWindowSession.remove(mWindow);<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>调用IWindowSession的remove()方法，IWindowSession在Server端的实现为Session。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/Session.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(IWindow window)</span> &#123;<br>    mService.removeWindow(<span class="hljs-built_in">this</span>, window);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用WMS的remove()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeWindow</span><span class="hljs-params">(Session session, IWindow client)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (mGlobalLock) &#123;<br>        <span class="hljs-type">WindowState</span> <span class="hljs-variable">win</span> <span class="hljs-operator">=</span> windowForClientLocked(session, client, <span class="hljs-literal">false</span>);  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">if</span> (win != <span class="hljs-literal">null</span>) &#123;<br>            win.removeIfPossible();  <span class="hljs-comment">// 2</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Remove embedded window map if the token belongs to an embedded window</span><br>        mEmbeddedWindowController.remove(client);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处用于获取Window对应的WindowState，WindowState用于保存窗口的信息，在WMS中它用来描述一个窗口。接着在注释2处调用WindowState的removeIfPossible()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/WindowState.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeIfPossible</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        removeImmediately();  <span class="hljs-comment">// 1</span><br>        ...<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>removeIfPossible()方法和它的名字一样，并不是直接执行删除操作的，而是进行多个条件判断过滤，满足其中一个条件就会return，推迟删除操作。比如V正在运行一个动画，这时就得推迟删除操作，直到动画完成。通过这些条件判断过滤就会执行注释1处的removeImmediately()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/WindowState.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeImmediately</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (mRemoved) &#123;  <span class="hljs-comment">// 1</span><br>        <span class="hljs-comment">// Nothing to do.</span><br>        ProtoLog.v(WM_DEBUG_ADD_REMOVE,<br>                <span class="hljs-string">&quot;WS.removeImmediately: %s Already removed...&quot;</span>, <span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    mRemoved = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 2</span><br>    ...<br>    <span class="hljs-built_in">super</span>.removeImmediately();<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">DisplayContent</span> <span class="hljs-variable">dc</span> <span class="hljs-operator">=</span> getDisplayContent();<br>    ...<br>    dc.getDisplayPolicy().removeWindowLw(<span class="hljs-built_in">this</span>);  <span class="hljs-comment">// 3</span><br><br>    disposeInputChannel();<br>    mOnBackInvokedCallbackInfo = <span class="hljs-literal">null</span>;<br><br>    mSession.windowRemovedLocked();  <span class="hljs-comment">// 4</span><br>    ...<br>    mWmService.postWindowRemoveCleanupLocked(<span class="hljs-built_in">this</span>);  <span class="hljs-comment">// 5</span><br>&#125;<br></code></pre></td></tr></table></figure><p>removeImmediately()方法如同它的名字一样，用于立即进行删除操作。</p><p>注释1处的mRemoved为true意味着正在执行删除Window操作。注释1、2处的代码用于防止重复删除操作。</p><p>注释3处如果当前要删除的Window是StatusBar、NavigationBar或NotificationShade，就会将这个Window从对应的控制器中删除。</p><p>注释4处将V对应的Session从WMS的ArraySet&lt;Session&gt; mSessions中删除并清除Session对应的SurfaceSession资源（SurfaceSession是SurfaceFlinger的一个连接，通过这个连接可以创建一个或者多个Surface并渲染到屏幕上）。</p><p>注释5处调用了WMS的postWindowRemoveCleanupLocked()方法用于对V进行一些集中的清理工作。</p><ul><li>总结<ol><li>检查删除线程的正确性，如果不正确就抛出异常；</li><li>从ViewRootImpl列表、布局参数列表和View列表中删除与V对应的元素。</li><li>判断是否可以直接执行删除操作，如果不能就退出删除操作。</li><li>执行删除操作，清理和释放与V相关的一切资源。</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Window</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Window的添加过程（WMS处理部分）</title>
    <link href="/2024/03/10/Window%E7%9A%84%E6%B7%BB%E5%8A%A0%E8%BF%87%E7%A8%8B%EF%BC%88WMS%E5%A4%84%E7%90%86%E9%83%A8%E5%88%86%EF%BC%89/"/>
    <url>/2024/03/10/Window%E7%9A%84%E6%B7%BB%E5%8A%A0%E8%BF%87%E7%A8%8B%EF%BC%88WMS%E5%A4%84%E7%90%86%E9%83%A8%E5%88%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>我们知道Window的操作分为两大部分，一部分是WindowManager处理部分，另一部分是WMS处理部分。对于WMS处理部分，无论是系统窗口还是Activity，它们的Window的添加过程都会调用WMS的addWindow()方法。</p><h4 id="addWindow-方法part1"><a href="#addWindow-方法part1" class="headerlink" title="addWindow()方法part1"></a>addWindow()方法part1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addWindow</span><span class="hljs-params">(Session session, IWindow client, LayoutParams attrs, <span class="hljs-type">int</span> viewVisibility,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> displayId, <span class="hljs-type">int</span> requestUserId, <span class="hljs-meta">@InsetsType</span> <span class="hljs-type">int</span> requestedVisibleTypes,</span><br><span class="hljs-params">        InputChannel outInputChannel, InsetsState outInsetsState,</span><br><span class="hljs-params">        InsetsSourceControl.Array outActiveControls, Rect outAttachedFrame,</span><br><span class="hljs-params">        <span class="hljs-type">float</span>[] outSizeCompatScale)</span> &#123;<br>    outActiveControls.set(<span class="hljs-literal">null</span>);<br>    <span class="hljs-type">int</span>[] appOp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isRoundedCornerOverlay</span> <span class="hljs-operator">=</span> (attrs.privateFlags<br>            &amp; PRIVATE_FLAG_IS_ROUNDED_CORNERS_OVERLAY) != <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> mPolicy.checkAddPermission(attrs.type, isRoundedCornerOverlay, attrs.packageName,<br>            appOp);  <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">if</span> (res != ADD_OKAY) &#123;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">synchronized</span> (mGlobalLock) &#123;<br>        <span class="hljs-keyword">if</span> (!mDisplayReady) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Display has not been initialialized&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">DisplayContent</span> <span class="hljs-variable">displayContent</span> <span class="hljs-operator">=</span> getDisplayContentOrCreate(displayId, attrs.token);  <span class="hljs-comment">// 2</span><br><br>        <span class="hljs-keyword">if</span> (displayContent == <span class="hljs-literal">null</span>) &#123;<br>            ProtoLog.w(WM_ERROR, <span class="hljs-string">&quot;Attempted to add window to a display that does &quot;</span><br>                    + <span class="hljs-string">&quot;not exist: %d. Aborting.&quot;</span>, displayId);<br>            <span class="hljs-keyword">return</span> WindowManagerGlobal.ADD_INVALID_DISPLAY;<br>        &#125;<br>        ...<br>        <span class="hljs-keyword">if</span> (type &gt;= FIRST_SUB_WINDOW &amp;&amp; type &lt;= LAST_SUB_WINDOW) &#123;  <span class="hljs-comment">// 3</span><br>            parentWindow = windowForClientLocked(<span class="hljs-literal">null</span>, attrs.token, <span class="hljs-literal">false</span>);  <span class="hljs-comment">// 4</span><br>            <span class="hljs-keyword">if</span> (parentWindow == <span class="hljs-literal">null</span>) &#123;<br>                ProtoLog.w(WM_ERROR, <span class="hljs-string">&quot;Attempted to add window with token that is not a window: &quot;</span><br>                        + <span class="hljs-string">&quot;%s.  Aborting.&quot;</span>, attrs.token);<br>                <span class="hljs-keyword">return</span> WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (parentWindow.mAttrs.type &gt;= FIRST_SUB_WINDOW<br>                    &amp;&amp; parentWindow.mAttrs.type &lt;= LAST_SUB_WINDOW) &#123;<br>                ProtoLog.w(WM_ERROR, <span class="hljs-string">&quot;Attempted to add window with token that is a sub-window: &quot;</span><br>                        + <span class="hljs-string">&quot;%s.  Aborting.&quot;</span>, attrs.token);<br>                <span class="hljs-keyword">return</span> WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN;<br>            &#125;<br>        &#125;<br><br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>WMS的addWindow()返回的是addWindow的各种状态，比如添加Window成功，无效的display等，这些状态被定义在WindowManagerGlobal中。</p><p>在注释1处根据Window的属性，调用WMP的checkAddPermission()方法来检查权限，具体在PhoneWindowManager的checkAddPermission()方法中实现，如果没有权限则不会执行后续的代码逻辑。</p><p>在注释2处通过displayId来获得窗口要添加到哪个DisplayContent上，如果没有找到DisplayContent，则返回WindowManagerGlobal.ADD_INVALID_DISPLAY这一状态，其中DisplayContent用来描述一块屏幕。</p><p>在注释3处，type代表一个窗口的类型，它的数值介于FIRST_SUB_WINDOW和LAST_SUB_WINDOW之间（1000～1999），这个数值定义在WindowManager中，说明这个窗口是一个子窗口。</p><p>在注释4处，attrs.token是IBinder类型的对象，windowForClientLocked()方法内部会根据attrs.token作为key值从mWindowMap中得到该子窗口的父窗口。接着对父窗口进行判断，如果父窗口为null或者type的取值范围不正确则会返回错误的状态。</p><h4 id="addWindow-方法part2"><a href="#addWindow-方法part2" class="headerlink" title="addWindow()方法part2"></a>addWindow()方法part2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addWindow</span><span class="hljs-params">(Session session, IWindow client, LayoutParams attrs, <span class="hljs-type">int</span> viewVisibility,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> displayId, <span class="hljs-type">int</span> requestUserId, <span class="hljs-meta">@InsetsType</span> <span class="hljs-type">int</span> requestedVisibleTypes,</span><br><span class="hljs-params">        InputChannel outInputChannel, InsetsState outInsetsState,</span><br><span class="hljs-params">        InsetsSourceControl.Array outActiveControls, Rect outAttachedFrame,</span><br><span class="hljs-params">        <span class="hljs-type">float</span>[] outSizeCompatScale)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">synchronized</span> (mGlobalLock) &#123;<br>        ...<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">hasParent</span> <span class="hljs-operator">=</span> parentWindow != <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// Use existing parent window token for child windows since they go in the same token</span><br>        <span class="hljs-comment">// as there parent window so we can apply the same policy on them.</span><br>        <span class="hljs-type">WindowToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> displayContent.getWindowToken(<br>                hasParent ? parentWindow.mAttrs.token : attrs.token);  <span class="hljs-comment">// 1</span><br>        <span class="hljs-comment">// If this is a child window, we want to apply the same type checking rules as the</span><br>        <span class="hljs-comment">// parent window type.</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">rootType</span> <span class="hljs-operator">=</span> hasParent ? parentWindow.mAttrs.type : type;  <span class="hljs-comment">// 2</span><br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">addToastWindowRequiresToken</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">IBinder</span> <span class="hljs-variable">windowContextToken</span> <span class="hljs-operator">=</span> attrs.mWindowContextToken;<br><br>        <span class="hljs-keyword">if</span> (token == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 3</span><br>             <span class="hljs-keyword">if</span> (!unprivilegedAppCanCreateTokenWith(parentWindow, callingUid, type,<br>                    rootType, attrs.token, attrs.packageName)) &#123;<br>                <span class="hljs-keyword">return</span> WindowManagerGlobal.ADD_BAD_APP_TOKEN;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (hasParent) &#123;<br>                <span class="hljs-comment">// Use existing parent window token for child windows.</span><br>                token = parentWindow.mToken;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mWindowContextListenerController.hasListener(windowContextToken)) &#123;<br>                <span class="hljs-comment">// Respect the window context token if the user provided it.</span><br>                <span class="hljs-keyword">final</span> <span class="hljs-type">IBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> attrs.token != <span class="hljs-literal">null</span> ? attrs.token : windowContextToken;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">Bundle</span> <span class="hljs-variable">options</span> <span class="hljs-operator">=</span> mWindowContextListenerController<br>                        .getOptions(windowContextToken);<br>                token = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowToken</span>.Builder(<span class="hljs-built_in">this</span>, binder, type)<br>                        .setDisplayContent(displayContent)<br>                        .setOwnerCanManageAppTokens(session.mCanAddInternalSystemWindow)<br>                        .setRoundedCornerOverlay(isRoundedCornerOverlay)<br>                        .setFromClientToken(<span class="hljs-literal">true</span>)<br>                        .setOptions(options)<br>                        .build();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">IBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> attrs.token != <span class="hljs-literal">null</span> ? attrs.token : client.asBinder();<br>                token = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowToken</span>.Builder(<span class="hljs-built_in">this</span>, binder, type)<br>                        .setDisplayContent(displayContent)<br>                        .setOwnerCanManageAppTokens(session.mCanAddInternalSystemWindow)<br>                        .setRoundedCornerOverlay(isRoundedCornerOverlay)<br>                        .build();<br>            &#125;<br>        &#125;<br>    ... <span class="hljs-comment">// 省略一些else if</span><br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处通过displayContent的getWindowToken()方法得到WindowToken。</p><p>注释2处，如果有父窗口就将父窗口的type值赋值给rootType，如果没有，将当前窗口的type值赋值给rootType。</p><p>注释3处，如果WindowToken为null，则创建WindowToken。</p><h4 id="addWindow-方法part3"><a href="#addWindow-方法part3" class="headerlink" title="addWindow()方法part3"></a>addWindow()方法part3</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addWindow</span><span class="hljs-params">(Session session, IWindow client, LayoutParams attrs, <span class="hljs-type">int</span> viewVisibility,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> displayId, <span class="hljs-type">int</span> requestUserId, <span class="hljs-meta">@InsetsType</span> <span class="hljs-type">int</span> requestedVisibleTypes,</span><br><span class="hljs-params">        InputChannel outInputChannel, InsetsState outInsetsState,</span><br><span class="hljs-params">        InsetsSourceControl.Array outActiveControls, Rect outAttachedFrame,</span><br><span class="hljs-params">        <span class="hljs-type">float</span>[] outSizeCompatScale)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">synchronized</span> (mGlobalLock) &#123;<br>        ...<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">WindowState</span> <span class="hljs-variable">win</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowState</span>(<span class="hljs-built_in">this</span>, session, client, token, parentWindow,<br>                appOp[<span class="hljs-number">0</span>], attrs, viewVisibility, session.mUid, userId,<br>                session.mCanAddInternalSystemWindow);  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">if</span> (win.mDeathRecipient == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 2</span><br>            <span class="hljs-comment">// Client has apparently died, so there is no reason to</span><br>            <span class="hljs-comment">// continue.</span><br>            ProtoLog.w(WM_ERROR, <span class="hljs-string">&quot;Adding window client %s&quot;</span><br>                    + <span class="hljs-string">&quot; that is dead, aborting.&quot;</span>, client.asBinder());<br>            <span class="hljs-keyword">return</span> WindowManagerGlobal.ADD_APP_EXITING;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (win.getDisplayContent() == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 3</span><br>            ProtoLog.w(WM_ERROR, <span class="hljs-string">&quot;Adding window to Display that has been removed.&quot;</span>);<br>            <span class="hljs-keyword">return</span> WindowManagerGlobal.ADD_INVALID_DISPLAY;<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">DisplayPolicy</span> <span class="hljs-variable">displayPolicy</span> <span class="hljs-operator">=</span> displayContent.getDisplayPolicy();<br>        displayPolicy.adjustWindowParamsLw(win, win.mAttrs);  <span class="hljs-comment">// 4</span><br>        attrs.flags = sanitizeFlagSlippery(attrs.flags, win.getName(), callingUid, callingPid);<br>        attrs.inputFeatures = sanitizeSpyWindow(attrs.inputFeatures, win.getName(), callingUid,<br>                callingPid);<br>        win.setRequestedVisibleTypes(requestedVisibleTypes);<br><br>        res = displayPolicy.validateAddingWindowLw(attrs, callingPid, callingUid);  <span class="hljs-comment">// 5</span><br>        ...<br>        win.attach();<br>        mWindowMap.put(client.asBinder(), win);  <span class="hljs-comment">// 6</span><br>        win.initAppOpsState();<br>        ...<br>        win.mToken.addWindow(win);  <span class="hljs-comment">// 7</span><br>        displayPolicy.addWindowLw(win, attrs);<br>        displayPolicy.setDropInputModePolicy(win, win.mAttrs);<br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处创建了WindowState，它存有窗口的所有的状态信息，在WMS中它代表一个窗口。在创建WindowState传入的参数中，this指的是WMS，client指的是IWindow，IWindow会将WMS中窗口管理的操作回调给ViewRootImpl，token指的是WindowToken。</p><p>注释2、3处分别判断请求添加窗口的客户端是否已经死亡、窗口的DisplayContent是否为null，如果是则不会再执行下面的代码逻辑。</p><p>注释4处调用了DisplayPolicy的adjustWindowParamsLw()方法，此方法会根据窗口的type对窗口的LayoutParams的一些成员变量进行修改。</p><p>注释5处检查Window是否可以被添加到系统中。</p><p>注释6处将WindowState添加到mWindowMap中。</p><p>注释7处将WindowState添加到该WindowState对应的WindowToken中（实际是保存在WindowToken的父类WindowContainer中），这样WindowToken就包含了同一个组件的WindowState。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Window</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rc文件</title>
    <link href="/2024/03/10/rc%E6%96%87%E4%BB%B6/"/>
    <url>/2024/03/10/rc%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>rc文件由安卓初始化语言编写，是配置文件，不是程序，不会被编译&#x2F;链接。可用于初始化系统服务、设置属性、创建系统资源等操作。rc文件在Init进程中完成扫描、解析、加载、执行等操作。</p><p>官方文档为<code>system/core/init/README.md</code>。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><p>语法组成</p><ul><li><p>由五部分组成</p><ol><li>Action（行为）</li><li>Commands（命令）</li><li>Services（服务）</li><li>Options（选项）</li><li>Imports（导入）</li></ol></li><li><p>Comments（注释）：以#开头的行，表示注释（允许前导空格）。</p></li><li><p>Section（段落&#x2F;分组）</p><p>rc文件的基本单位，有三种类型：on、service、import</p></li><li><p>关键字和参数以空格分割，每个语句以行为单位。</p></li><li><p>C语言风格的反斜杠转义字符（“\”）可以用来为参数添加空格。</p></li><li><p>为了防止字符串中的空格把其切割成多个部分，需要对其使用双引号。</p></li><li><p>行尾的反斜杠用来表示下面一行是同一行。</p></li><li><p>Actions和Services暗示着一个新语句的开始，这两个关键字后面跟着的Commands或者Options都属于这个新语句。</p></li><li><p>Actions和Services有唯一的名字，如果出现和已有动作或者服务重名的，将会被当成错误忽略掉。</p></li></ul></li><li><p>on</p><ul><li><code>on early-init</code>：Init之前，加载完所有rc文件后即执行，init.rc在early-init执行的是<code>start ueventd</code>。</li><li><code>on init</code>：在&#x2F;init.conf（启动配置文件）被装载之后，加载propety各项属性文件之前执行，在Init变为property service之前都属于Init阶段。</li><li><code>late-init</code>：初始化之后执行。</li><li><code>on early-boot</code>：启动属性服务后即执行。</li><li><code>on boot</code>：boot的时候执行。</li><li><code>on property:xxxxx=x</code>：当某个属性设置为预期值时执行。</li><li><code>device-added-&lt;path&gt;</code>：指定设备被添加时触发。</li><li><code>device-removed-&lt;path&gt;</code> ：指定设备被移除时触发。</li><li><code>service-exited-&lt;name&gt; </code>：在特定服务（service）退出时触发。</li></ul></li><li><p>Trigger</p><p>触发器，本质上是字符串，用于匹配包含该字符串的事件（Event）。</p><ol><li><p>属性触发器</p><p>属性变为指定的属性值时触发。</p></li><li><p>事件触发器</p><p>通过QueueEventTrigger函数（C++），或trigger command触发。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">on</span> xxx:<br>trigger sss<br></code></pre></td></tr></table></figure></li></ol><p>Trigger可以由多个属性触发器 + 一个事件触发器组成。</p></li><li><p>Command</p><p>命令。</p><table><thead><tr><th>命令</th><th align="left">描述</th></tr></thead><tbody><tr><td>&#96;bootchart [start</td><td align="left">stop]&#96;</td></tr><tr><td><code>chmod &lt;octal-mode&gt; &lt;path&gt;</code></td><td align="left">设置文件权限</td></tr><tr><td><code>chown &lt;owner&gt; &lt;group&gt; &lt;path&gt;</code></td><td align="left">设置文件所有者和所有组</td></tr><tr><td><code>class_start &lt;serviceclass&gt;</code></td><td align="left">对于所有属于该class的service，若没有在运行中，则启动它们</td></tr><tr><td><code>class_stop &lt;serviceclass&gt;</code></td><td align="left">对于所有属于该class的service，若在运行中，则终止它们，且将状态改为不可用（disabled）</td></tr><tr><td><code>class_reset &lt;serviceclass&gt;</code></td><td align="left">终止，但不设置成disabled</td></tr><tr><td><code>class_restart [--only-enabled] &lt;serviceclass&gt;</code></td><td align="left">重新启动指定类的所有服务。如果指定了“–only-enabled”，则跳过禁用的服务。</td></tr><tr><td><code>copy &lt;src&gt; &lt;dst&gt;</code></td><td align="left">复制文件，可用于二进制、大量文件场景。复制后文件权限为0600，若目标文件已存在则终止操作</td></tr><tr><td><code>copy_per_line &lt;src&gt; &lt;dst&gt;</code></td><td align="left">逐行复制文件</td></tr><tr><td><code>domainname &lt;name&gt;</code></td><td align="left">设置域名</td></tr><tr><td><code>enable &lt;servicename&gt;</code></td><td align="left">将disabled的service设置为enable状态，如果service预期运行，则运行它</td></tr><tr><td><code>exec [ &lt;seclabel&gt; [ &lt;user&gt; [ &lt;group&gt;\ ] ] ] -- &lt;command&gt; [ &lt;argument&gt;\*] </code></td><td align="left">创建进程（fork）并且执行命令，可选参数为seclabel（安全上下文，security context），用户和组。Init进程会阻塞直至命令运行结束</td></tr><tr><td><code>exec_background [ &lt;seclabel&gt; [ &lt;user&gt; [ &lt;group&gt;\* ] ] ] -- &lt;command&gt; [ &lt;argument&gt;\* ]</code></td><td align="left">与“exec”命令的处理方式类似。不同之处在于，Init 不会停止执行命令，直到进程退出“exec_background”</td></tr><tr><td><code>exec_start &lt;service&gt;</code></td><td align="left">启动一个已声明的service，并阻塞Init直至该service运行结束。它与<code>exec</code>命令类似，只不过启动对象是已声明的service</td></tr><tr><td><code>export &lt;name&gt; &lt;value&gt;</code></td><td align="left">设置global域下的环境变量，所有进程（因为它们都是Init的子进程）都可与读取到该变量</td></tr><tr><td><code>hostname &lt;name&gt;</code></td><td align="left">设置host name</td></tr><tr><td><code>ifup &lt;interface&gt;</code></td><td align="left">启用网络</td></tr><tr><td><code>insmod [-f] &lt;path&gt; [&lt;options&gt;]</code></td><td align="left">安装module到路径path</td></tr><tr><td><code>interface_start &lt;name&gt;</code> <code>interface_restart &lt;name&gt;</code> <code>interface_stop &lt;name&gt;</code></td><td align="left">找到提供接口name的服务（如果存在），并分别对其运行“start”、“restart”或“stop”命令</td></tr><tr><td><code>load_exports &lt;path&gt;</code></td><td align="left">打开位于path的文件，并导出其中声明的全局环境变量</td></tr><tr><td><code>load_persist_props</code></td><td align="left">当&#x2F;data被解密时，加载persistent属性。在默认的init.rc中会执行该逻辑</td></tr><tr><td><code>loglevel &lt;level&gt;</code></td><td align="left">设置内核日志级别</td></tr><tr><td><code>mark_post_data</code></td><td align="left">&#x2F;data被挂载后标记point</td></tr><tr><td><code>mkdir &lt;path&gt; [mode] [owner] [group]</code></td><td align="left">创建目录，可选参数为读写权限、拥有者、组别，其默认值分别为755、root、root group</td></tr><tr><td><code>mount_all &lt;fstab&gt; [ &lt;path&gt; ]\* [--&lt;option&gt;]</code></td><td align="left">在fs_mgr-format的fstab上执行fs_mgr_mount_all，导入指定path下的.rc文件。可选参数为”early”和”late”</td></tr><tr><td><code>mount &lt;type&gt; &lt;device&gt; &lt;dir&gt; [ &lt;flag&gt;\* ] [&lt;options&gt;]</code></td><td align="left">将设备挂载到指定目录，flags包括”ro”, “rw”, “remount”, “noatime”等。options包括”barier&#x3D;1”, “noauto_da_alloc”等。</td></tr><tr><td><code>perform_apex_config</code></td><td align="left">挂载 APEX 后执行任务</td></tr><tr><td><code>restart [--only-if-running] &lt;service&gt;</code></td><td align="left">停止并重新启动正在运行的服务，如果服务当前正在重新启动，则不执行任何操作，否则，它只是启动服务。如果指定了“–only-if-running”，则仅当服务已在运行时重新启动服务。</td></tr><tr><td><code>restorecon &lt;path&gt; [ &lt;path&gt;\* ]</code></td><td align="left">恢复目录下的文件</td></tr><tr><td><code>restorecon_recursive &lt;path&gt; [ &lt;path&gt;\* ]</code></td><td align="left">递归恢复目录下的文件</td></tr><tr><td><code>rm &lt;path&gt;</code></td><td align="left">对于指定path调用unlink</td></tr><tr><td><code>rmdir &lt;path&gt;</code></td><td align="left">对于指定path调用rmdir</td></tr><tr><td>&#96;readahead &lt;file</td><td align="left">dir&gt; [–fully]&#96;</td></tr><tr><td><code>setprop &lt;name&gt; &lt;value&gt;</code></td><td align="left">设置属性值</td></tr><tr><td><code>setrlimit &lt;resource&gt; &lt;cur&gt; &lt;max&gt;</code></td><td align="left">设置资源的rlimit</td></tr><tr><td><code>start &lt;service&gt;</code></td><td align="left">开启service， 注意这个操作不是阻塞的，意味着start顺序不表示运行顺序，如果service之间有依赖顺序，须谨慎使用</td></tr><tr><td><code>stop &lt;service&gt;</code></td><td align="left">停止服务</td></tr><tr><td><code>swapon_all &lt;fstab&gt;</code></td><td align="left">在指定的fstab文件上调用fs_mgr_swapon_all</td></tr><tr><td><code>symlink &lt;target&gt; &lt;path&gt;</code></td><td align="left">创建符号链接</td></tr><tr><td><code>sysclktz &lt;mins_west_of_gmt&gt;</code></td><td align="left">设置系统时钟基础值（如果是GMT则为0）</td></tr><tr><td><code>trigger &lt;event&gt;</code></td><td align="left">触发一个事件，用于action之间互相触发</td></tr><tr><td><code>umount &lt;path&gt;</code></td><td align="left">卸载挂载在path上的文件系统</td></tr><tr><td><code>umount_all [ &lt;fstab&gt; ]</code></td><td align="left">对给定的 fstab 文件调用 fs_mgr_umount_all</td></tr><tr><td><code>verity_update_state</code></td><td align="left">更新dm-verity状态并设置 adb remount 使用的 partition.<em>mount-point</em>.verified属性</td></tr><tr><td><code>wait &lt;path&gt; [ &lt;timeout&gt; ]</code></td><td align="left">轮询指定path的文件是否存在，直到它出现或者超时，默认超时时间为5s</td></tr><tr><td><code>wait_for_prop &lt;name&gt; &lt;value&gt;</code></td><td align="left">等待直至属性被定义为指定值</td></tr><tr><td><code>write &lt;path&gt; &lt;content&gt;</code></td><td align="left">打开path的文件并写入一个string，若文件不存在则先创建它。若文件存在则续写</td></tr></tbody></table></li><li><p>Action</p><ol><li>Action是一系列Command的集合；</li><li>每个Action拥有一个Trigger，Trigger用来决定Action什么时候被执行；</li><li>当Trigger被触发，相应的Action会被添加到任务队列中（队尾插入），如果已在队列中则忽略；</li><li>Action中的每条命令，将会被顺序取出并执行。</li></ol><ul><li><p>语法格式</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">on</span> <span class="hljs-variable">&lt;trigger&gt;</span> [&amp;&amp; <span class="hljs-variable">&lt;trigger&gt;</span>]*<br><span class="hljs-variable">&lt;command&gt;</span><br><span class="hljs-variable">&lt;command&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>例子</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">on</span> zygote-start &amp;&amp; property:ro.crypto.<span class="hljs-keyword">state</span>=unsupport<br>start netd<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Option</p><p>Option是Services的修饰符（选项），通过Option告知Init如何对待Services。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>capabilities &lt;capability&gt; [&lt;capability&gt;\*]</code></td><td>当运行该service时，设置capability，capability是Linux系统中以”CAP_”为前缀的属性</td></tr><tr><td><code>class &lt;name&gt; [ &lt;name&gt;\* ]</code></td><td>声明service的类名，用来给service归类，所有在同一类名下的service可以被同时开启&#x2F;终止。默认类名是<code>default</code>。 例如可以将开机过程中的动画service归入<code>amination</code>类</td></tr><tr><td><code>console [&lt;console&gt;]</code></td><td>表明service需要在console环境下使用，可选参数声明了默认console以外的环境。通常默认的console是<code>/dev/console</code>。</td></tr><tr><td><code>critical [window=&lt;fatal crash window mins&gt;] [target=&lt;fatal reboot target&gt;]</code></td><td>这是对设备至关重要的一个服务。如果它在四分钟内退出超过四次，则设备将重启进入恢复模式。</td></tr><tr><td><code>disabled</code></td><td>表明service不会自动启动，必须显式地通过名字来启动</td></tr><tr><td><code>enter_namespace &lt;type&gt; &lt;path&gt;</code></td><td>进入位于path的type类型的命名空间</td></tr><tr><td><code>file &lt;path&gt; &lt;type&gt;</code></td><td>打开一个文件，并将fd传给启动的进程。type取值为”r”、”w”或者”rw”</td></tr><tr><td><code>gentle_kill</code></td><td>此服务停止时将发送 SIGTERM 而不是 SIGKILL。200 毫秒超时后，将发送 SIGKILL。</td></tr><tr><td><code>group &lt;groupname&gt; [&lt;groupbame&gt;\*]</code></td><td>在执行该service前，切换组为<code>&lt;groupname&gt;</code>，默认是root。除了（必需的）第一个组名之外，其他组名用于设置进程的补充组（通过 setgroups()）。</td></tr><tr><td><code>interface &lt;interface name&gt; &lt;instance name&gt;</code></td><td>将此服务与其提供的 AIDL 或 HIDL 服务列表相关联</td></tr><tr><td><code>ioprio &lt;class&gt; &lt;priority&gt;</code></td><td>设置IO优先级</td></tr><tr><td><code>keycodes &lt;keycode&gt; [ &lt;keycode&gt;\* ]</code></td><td>设置将触发此服务的键码。如果同时按下与设置的键码对应的所有键，则服务将启动。通常用于启动bugreport服务。</td></tr><tr><td><code>memcg.limit_in_bytes &lt;value&gt;</code></td><td>设置子进程的memory.limit_in_bytes ，不小于0</td></tr><tr><td><code>memcg.limit_property &lt;value&gt;</code></td><td>设置子进程的memory.limit_in_bytes为指定属性的值</td></tr><tr><td><code>memcg.soft_limit_in_bytes &lt;value&gt;</code></td><td>设置子进程的memory.soft_limit_in_bytes ，不小于0</td></tr><tr><td><code>memcg.swappiness &lt;value&gt;</code></td><td>设置子进程的memory.swappiness，不小于0</td></tr><tr><td>&#96;namespace &lt;pid</td><td>mnt&gt;&#96;</td></tr><tr><td><code>oneshot</code></td><td>当service退出时，不主动重启</td></tr><tr><td><code>onrestart</code></td><td>当service重启（restart） 时，执行该command</td></tr><tr><td><code>oom_score_adjust &lt;value&gt;</code></td><td>设置子进程的&#x2F;proc&#x2F;self&#x2F;oom_score_adj ，取值范围-1000~1000</td></tr><tr><td><code>override</code></td><td>此service旨在覆盖具有相同名称的服务的先前定义</td></tr><tr><td><code>priority &lt;priority&gt;</code></td><td>设置service进程的优先级，范围-20~19，默认优先级是0</td></tr><tr><td><code>reboot_on_failure &lt;target&gt;</code></td><td>如果无法启动此进程，或者进程终止时退出码不是 CLD_EXITED 或状态不是“0”，使用 target中指定的目标重启系统</td></tr><tr><td><code>restart_period &lt;seconds&gt;</code></td><td>如果非一次性服务退出，它将在其开始时间加上此时间段重新启动</td></tr><tr><td><code>rlimit &lt;resource&gt; &lt;cur&gt; &lt;max&gt;</code></td><td>将给定的 rlimit 应用于服务</td></tr><tr><td><code>seclabel &lt;seclabel&gt;</code></td><td>在运行该service之前，修改<code>seclabel</code>属性，通常从rootfs启动的service会使用该选项，如ueventd, adbd</td></tr><tr><td><code>setenv &lt;name&gt; &lt;value&gt;</code></td><td>表明在service的进程中设置一个环境属性</td></tr><tr><td><code>shutdown &lt;shutdown_behavior&gt;</code></td><td>设置该service进程的关机行为。若未声明，当关机时该service被SIGTERM和SIGKILL信号终止。被声明为<code>critical</code>的service不会在关机期间被终止，直至完全关机。被声明为<code>shutdown critical</code>的service会在关机期间启动（如果它没有在运行）</td></tr><tr><td><code>sigstop</code></td><td>在调用 exec 之前立即将 SIGSTOP 发送到服务，用于调试</td></tr><tr><td><code>socket &lt;name&gt; &lt;type&gt; &lt;perm&gt; [&lt;user&gt;[&lt;group&gt;[&lt;seclabel&gt;]]]</code></td><td>启动一个名为<code>/dev/socket/name</code>的socket，并且将它的fd传给当前进程，type必须是”dgram”、”stream”、或者”seqpacket”，seclabel是SELinux的设置</td></tr><tr><td><code>stdio_to_kmsg</code></td><td>将 stdout 和 stderr 重定向到 devkmsg_debug</td></tr><tr><td><code>task_profiles &lt;profile&gt; [ &lt;profile&gt;\* ]</code></td><td>设置任务配置文件</td></tr><tr><td><code>timeout_period &lt;seconds&gt;</code></td><td>提供超时，超过该时间点后，服务将被终止</td></tr><tr><td><code>updatable</code></td><td>标记该服务可以在启动序列中稍后被 APEX 覆盖（通过“覆盖”选项）</td></tr><tr><td><code>user &lt;username&gt;</code></td><td>在执行该service前，切换用户为<code>&lt;username&gt;</code>，默认是root</td></tr><tr><td><code>writepid &lt;file&gt; [ &lt;file&gt;\* ]</code></td><td>将创建子进程时，将其pid写入指定的文件</td></tr></tbody></table></li><li><p>Services</p><p>Services指一些Programs（程序），这些程序由Init启动&#x2F;重启。</p><ul><li><p>语法格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">service <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">pathname</span>&gt;</span> [<span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>]*<br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>例子</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">service gocsdk /system/bin/gocsdk<br>    <span class="hljs-keyword">class</span> <span class="hljs-symbol">main</span><br>    <span class="hljs-symbol">disabled</span><br>    <span class="hljs-symbol">oneshot</span><br></code></pre></td></tr></table></figure><p>gocsdk是服务的名字，这个可执行文件的位置在&#x2F;system&#x2F;bin&#x2F;gocsdk。disabled、oneshot是options，用来描述service的特点。</p></li></ul></li><li><p>Import</p><p>引入其他rc文件。</p><ul><li><p>语法格式</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> &lt;path&gt;<br></code></pre></td></tr></table></figure></li><li><p>如果path传入的是一个目录，则解析该目录下全部配置文件，非递归，嵌套目录不会被解析。</p></li><li><p>Init进程只在三个时间点执行import指令：</p><ol><li>在启动过程中解析系统根目录的&#x2F;init.rc，或者是ro.boot.init_rc属性指明的rc文件；</li><li>在解析完&#x2F;init.rc，启动第一阶段时解析&#x2F;{system,vendor,odm}&#x2F;etc&#x2F;init&#x2F;文件；</li><li>在mount_all指令中解析&#x2F;{system,vendor,odm}&#x2F;etc&#x2F;init&#x2F;。</li></ol></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zygote的启动流程</title>
    <link href="/2024/03/10/Zygote%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/03/10/Zygote%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>Zygote是由Init进程通过解析init.zygote.rc文件而创建的，Zygote所对应的可执行程序是app_process，所对应的源文件是app_main.cpp，进程名为zygote。Zygote启动过程的时序图如下：</p><p><img src="https://s2.loli.net/2023/12/26/iaxbjwnLkFK6753.jpg"></p><h3 id="app-main"><a href="#app-main" class="headerlink" title="app_main"></a>app_main</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++">/frameworks/base/cmds/app_process/app_main.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* <span class="hljs-type">const</span> argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 参数解析</span><br>    ...<br>        <br>    <span class="hljs-comment">// 根据参数，设置对应标志位</span><br>    <span class="hljs-keyword">while</span> (i &lt; argc) &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* arg = argv[i++];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(arg, <span class="hljs-string">&quot;--zygote&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            zygote = <span class="hljs-literal">true</span>;<br>            niceName = ZYGOTE_NICE_NAME;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(arg, <span class="hljs-string">&quot;--start-system-server&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            startSystemServer = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(arg, <span class="hljs-string">&quot;--application&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            application = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(arg, <span class="hljs-string">&quot;--nice-name=&quot;</span>, <span class="hljs-number">12</span>) == <span class="hljs-number">0</span>) &#123;<br>            niceName.<span class="hljs-built_in">setTo</span>(arg + <span class="hljs-number">12</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(arg, <span class="hljs-string">&quot;--&quot;</span>, <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) &#123;<br>            className.<span class="hljs-built_in">setTo</span>(arg);<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            --i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    ...<br>        <br>    <span class="hljs-keyword">if</span> (!niceName.<span class="hljs-built_in">isEmpty</span>()) &#123;<br>        runtime.<span class="hljs-built_in">setArgv0</span>(niceName.<span class="hljs-built_in">string</span>(), <span class="hljs-literal">true</span> <span class="hljs-comment">/* setProcName */</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (zygote) &#123;  <span class="hljs-comment">// 如果运行在Zygote进程中</span><br>        runtime.<span class="hljs-built_in">start</span>(<span class="hljs-string">&quot;com.android.internal.os.ZygoteInit&quot;</span>, args, zygote);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className) &#123;<br>        runtime.<span class="hljs-built_in">start</span>(<span class="hljs-string">&quot;com.android.internal.os.RuntimeInit&quot;</span>, args, zygote);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Error: no class name or --zygote supplied.\n&quot;</span>);<br>        <span class="hljs-built_in">app_usage</span>();<br>        <span class="hljs-built_in">LOG_ALWAYS_FATAL</span>(<span class="hljs-string">&quot;app_process: no class name or --zygote supplied.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Zygote进程都是通过fork自身来创建子进程的，这样Zygote进程以及它的子进程都可以进入app_main.cpp的main函数，因此main函数中为了区分当前运行在哪个进程，会判断参数arg中是否包含了”–zygote”，如果包含了则说明main函数是运行在Zygote进程中的；如果包含了”–start-system-server”，则说明main函数是运行在SystemServer进程中。</li><li>runtime是AppRuntime对象，AppRuntime中没有对应函数，而AppRuntime继承自AndroidRuntime，所以<code>runtime.start()</code>调用的是AndroidRuntime类中的start函数。</li></ul><h3 id="AndroidRuntime"><a href="#AndroidRuntime" class="headerlink" title="AndroidRuntime"></a>AndroidRuntime</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs c++">/frameworks/base/core/jni/AndroidRuntime.<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AndroidRuntime::start</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* className, <span class="hljs-type">const</span> Vector&lt;String8&gt;&amp; options, <span class="hljs-type">bool</span> zygote)</span></span><br><span class="hljs-function"></span>&#123;<br>    ...<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">const</span> String8 <span class="hljs-title">startSystemServer</span><span class="hljs-params">(<span class="hljs-string">&quot;start-system-server&quot;</span>)</span></span>;<br>    <span class="hljs-comment">// Whether this is the primary zygote, meaning the zygote which will fork system server.</span><br>    <span class="hljs-type">bool</span> primary_zygote = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; options.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-comment">// 传入的参数有start-system-server, primary_zygote设置为true</span><br>        <span class="hljs-keyword">if</span> (options[i] == startSystemServer) &#123;<br>            primary_zygote = <span class="hljs-literal">true</span>;<br>           <span class="hljs-comment">/* track our progress through the boot sequence */</span><br>           <span class="hljs-type">const</span> <span class="hljs-type">int</span> LOG_BOOT_PROGRESS_START = <span class="hljs-number">3000</span>;<br>           <span class="hljs-built_in">LOG_EVENT_LONG</span>(LOG_BOOT_PROGRESS_START,  <span class="hljs-built_in">ns2ms</span>(<span class="hljs-built_in">systemTime</span>(SYSTEM_TIME_MONOTONIC)));<br>        &#125;<br>    &#125;<br><br>    ... <span class="hljs-comment">// 设置环境变量，只列举ANDROID_ROOT，其他的省略</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* rootDir = <span class="hljs-built_in">getenv</span>(<span class="hljs-string">&quot;ANDROID_ROOT&quot;</span>);<br>    <span class="hljs-keyword">if</span> (rootDir == <span class="hljs-literal">NULL</span>) &#123;<br>        rootDir = <span class="hljs-string">&quot;/system&quot;</span>;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">hasDir</span>(<span class="hljs-string">&quot;/system&quot;</span>)) &#123;<br>            <span class="hljs-built_in">LOG_FATAL</span>(<span class="hljs-string">&quot;No root directory specified, and /system does not exist.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">setenv</span>(<span class="hljs-string">&quot;ANDROID_ROOT&quot;</span>, rootDir, <span class="hljs-number">1</span>);<br>    &#125;<br>    ...<br>        <br>    JniInvocation jni_invocation;<br>    jni_invocation.<span class="hljs-built_in">Init</span>(<span class="hljs-literal">NULL</span>);<br>    JNIEnv* env;<br>    <span class="hljs-comment">// 启动Java虚拟机</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">startVm</span>(&amp;mJavaVM, &amp;env, zygote, primary_zygote) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">onVmCreated</span>(env);<br><br>    <span class="hljs-comment">// 为Java虚拟机注册JNI方法</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">startReg</span>(env) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;Unable to register all android natives\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * We want to call main() with a String array with arguments in it.</span><br><span class="hljs-comment">     * At present we have two arguments, the class name and an option string.</span><br><span class="hljs-comment">     * Create an array to hold them.</span><br><span class="hljs-comment">     */</span><br>    jclass stringClass;<br>    jobjectArray strArray;<br>    jstring classNameStr;<br><br>    stringClass = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;java/lang/String&quot;</span>);<br>    <span class="hljs-built_in">assert</span>(stringClass != <span class="hljs-literal">NULL</span>);<br>    strArray = env-&gt;<span class="hljs-built_in">NewObjectArray</span>(options.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>, stringClass, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">assert</span>(strArray != <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">// 从app_main的main函数得知className为com.android.internal.os.ZygoteInit</span><br>    classNameStr = env-&gt;<span class="hljs-built_in">NewStringUTF</span>(className);<br>    <span class="hljs-built_in">assert</span>(classNameStr != <span class="hljs-literal">NULL</span>);<br>    env-&gt;<span class="hljs-built_in">SetObjectArrayElement</span>(strArray, <span class="hljs-number">0</span>, classNameStr);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; options.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        jstring optionsStr = env-&gt;<span class="hljs-built_in">NewStringUTF</span>(options.<span class="hljs-built_in">itemAt</span>(i).<span class="hljs-built_in">string</span>());<br>        <span class="hljs-built_in">assert</span>(optionsStr != <span class="hljs-literal">NULL</span>);<br>        env-&gt;<span class="hljs-built_in">SetObjectArrayElement</span>(strArray, i + <span class="hljs-number">1</span>, optionsStr);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Start VM.  This thread becomes the main thread of the VM, and will</span><br><span class="hljs-comment">     * not return until the VM exits.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 将className的&quot;.&quot;替换为&quot;/&quot;</span><br>    <span class="hljs-type">char</span>* slashClassName = <span class="hljs-built_in">toSlashClassName</span>(className != <span class="hljs-literal">NULL</span> ? className : <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">// 找到ZygoteInit</span><br>    jclass startClass = env-&gt;<span class="hljs-built_in">FindClass</span>(slashClassName);<br>    <span class="hljs-keyword">if</span> (startClass == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;JavaVM unable to locate class &#x27;%s&#x27;\n&quot;</span>, slashClassName);<br>        <span class="hljs-comment">/* keep going */</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 找到ZygoteInit的main方法</span><br>        jmethodID startMeth = env-&gt;<span class="hljs-built_in">GetStaticMethodID</span>(startClass, <span class="hljs-string">&quot;main&quot;</span>,<br>            <span class="hljs-string">&quot;([Ljava/lang/String;)V&quot;</span>);<br>        <span class="hljs-keyword">if</span> (startMeth == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;JavaVM unable to find main() in &#x27;%s&#x27;\n&quot;</span>, className);<br>            <span class="hljs-comment">/* keep going */</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 通过JNI调用ZygoteInit的main方法</span><br>            env-&gt;<span class="hljs-built_in">CallStaticVoidMethod</span>(startClass, startMeth, strArray);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>            <span class="hljs-keyword">if</span> (env-&gt;<span class="hljs-built_in">ExceptionCheck</span>())<br>                <span class="hljs-built_in">threadExitUncaughtException</span>(env);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        &#125;<br>    &#125;<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>主要做了三件事：</p><ol><li>启动Java虚拟机</li><li>注册JNI函数</li><li>通过JNI调用ZygoteInit类的main方法</li></ol></li><li><p>最后通过JNI调用ZygoteInit的main方法，是因为ZygoteInit的main方法是Java语言编写的，当前的运行逻辑是在Native中，这就需要通过JNI来调用Java，这样Zygote就从Native层进入了Java框架层。此前是没有任何代码进入Java框架层的，是Zygote开创了Java框架层。</p></li></ul><h3 id="ZygoteInit"><a href="#ZygoteInit" class="headerlink" title="ZygoteInit"></a>ZygoteInit</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argv)</span> &#123;<br>    <span class="hljs-type">ZygoteServer</span> <span class="hljs-variable">zygoteServer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// 标记Zygote开始</span><br>    ZygoteHooks.startZygoteNoThreadCreation();<br><br>    <span class="hljs-comment">// 设置Zygote自己的用户组pid</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        Os.setpgid(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (ErrnoException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Failed to setpgid(0,0)&quot;</span>, ex);<br>    &#125;<br><br>    Runnable caller;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 读取系统是否已经启动完成</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> SystemClock.elapsedRealtime();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isRuntimeRestarted</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>.equals(<br>                SystemProperties.get(<span class="hljs-string">&quot;sys.boot_completed&quot;</span>));<br><br>        <span class="hljs-comment">// 将行为写入trace log，标记目前处于ZygoteInit阶段</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">bootTimeTag</span> <span class="hljs-operator">=</span> Process.is64Bit() ? <span class="hljs-string">&quot;Zygote64Timing&quot;</span> : <span class="hljs-string">&quot;Zygote32Timing&quot;</span>;<br>        <span class="hljs-type">TimingsTraceLog</span> <span class="hljs-variable">bootTimingsTraceLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimingsTraceLog</span>(bootTimeTag,<br>                Trace.TRACE_TAG_DALVIK);<br>        bootTimingsTraceLog.traceBegin(<span class="hljs-string">&quot;ZygoteInit&quot;</span>);<br>        RuntimeInit.preForkInit();<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">startSystemServer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// zygote进程就是一个socket，名称就叫zygote</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">zygoteSocketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zygote&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">abiList</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">enableLazyPreload</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 解析参数设置对应标志位</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; argv.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;start-system-server&quot;</span>.equals(argv[i])) &#123;<br>                startSystemServer = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;--enable-lazy-preload&quot;</span>.equals(argv[i])) &#123;<br>                enableLazyPreload = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (argv[i].startsWith(ABI_LIST_ARG)) &#123;<br>                abiList = argv[i].substring(ABI_LIST_ARG.length());<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (argv[i].startsWith(SOCKET_NAME_ARG)) &#123;<br>                zygoteSocketName = argv[i].substring(SOCKET_NAME_ARG.length());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Unknown command line argument: &quot;</span> + argv[i]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isPrimaryZygote</span> <span class="hljs-operator">=</span> zygoteSocketName.equals(Zygote.PRIMARY_SOCKET_NAME);<br>        <span class="hljs-keyword">if</span> (!isRuntimeRestarted) &#123;<br>            <span class="hljs-keyword">if</span> (isPrimaryZygote) &#123;<br>                FrameworkStatsLog.write(FrameworkStatsLog.BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED,<br>                        BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__ZYGOTE_INIT_START,<br>                        startTime);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (zygoteSocketName.equals(Zygote.SECONDARY_SOCKET_NAME)) &#123;<br>                FrameworkStatsLog.write(FrameworkStatsLog.BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED,<br>                        BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__SECONDARY_ZYGOTE_INIT_START,<br>                        startTime);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (abiList == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;No ABI list supplied.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// In some configurations, we avoid preloading resources and classes eagerly.</span><br>        <span class="hljs-comment">// In such cases, we will preload things prior to our first fork.</span><br>        <span class="hljs-keyword">if</span> (!enableLazyPreload) &#123;<br>            bootTimingsTraceLog.traceBegin(<span class="hljs-string">&quot;ZygotePreload&quot;</span>);<br>            EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_START,<br>                    SystemClock.uptimeMillis());<br>            <span class="hljs-comment">// 预加载资源</span><br>            preload(bootTimingsTraceLog);<br>            EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_END,<br>                    SystemClock.uptimeMillis());<br>            bootTimingsTraceLog.traceEnd(); <span class="hljs-comment">// ZygotePreload</span><br>        &#125;<br><br>        <span class="hljs-comment">// Do an initial gc to clean up after startup</span><br>        bootTimingsTraceLog.traceBegin(<span class="hljs-string">&quot;PostZygoteInitGC&quot;</span>);<br>        gcAndFinalize();<br>        bootTimingsTraceLog.traceEnd(); <span class="hljs-comment">// PostZygoteInitGC</span><br><br>        bootTimingsTraceLog.traceEnd(); <span class="hljs-comment">// ZygoteInit</span><br><br>        <span class="hljs-comment">// 创建一个用于和SystemServer通信的socket</span><br>        <span class="hljs-comment">// 当SystemServer fork出来后，socket进程将关闭</span><br>        Zygote.initNativeState(isPrimaryZygote);<br><br>        ZygoteHooks.stopZygoteNoThreadCreation();<br><br>        <span class="hljs-comment">// 创建ZygoteServer</span><br>        zygoteServer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteServer</span>(isPrimaryZygote);<br><br>        <span class="hljs-keyword">if</span> (startSystemServer) &#123;<br>            <span class="hljs-comment">// 调用native函数fork server_server进程</span><br>            <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> forkSystemServer(abiList, zygoteSocketName, zygoteServer);<br><br>            <span class="hljs-comment">// &#123;@code r == null&#125; in the parent (zygote) process, and &#123;@code r != null&#125; in the</span><br>            <span class="hljs-comment">// child (system_server) process.</span><br>            <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>) &#123;<br>                r.run();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        Log.i(TAG, <span class="hljs-string">&quot;Accepting command socket connections&quot;</span>);<br><br>        <span class="hljs-comment">// Zygote进入死循环</span><br>        caller = zygoteServer.runSelectLoop(abiList);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;System zygote died with fatal exception&quot;</span>, ex);<br>        <span class="hljs-keyword">throw</span> ex;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (zygoteServer != <span class="hljs-literal">null</span>) &#123;<br>            zygoteServer.closeServerSocket();<br>        &#125;<br>    &#125;<br>    <br>    ...<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>主要做了四件事：<ol><li>预加载资源；</li><li>创建一个server端的socket：ZygoteServer，接收应用进程fork请求；</li><li>fork出SystemServer进程；</li><li>进入死循环，poll阻塞接收fork请求。</li></ol></li><li>创建了2个socket，一个是systemServer socket，通过Zygote.initNativeState(isPrimaryZygote)来创建；一个是zygote socket，通过new ZygoteServer()来创建。</li></ul><h3 id="ZygoteServer"><a href="#ZygoteServer" class="headerlink" title="ZygoteServer"></a>ZygoteServer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/core/java/com/android/internal/os/ZygoteServer.java<br><span class="hljs-title function_">ZygoteServer</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isPrimaryZygote)</span> &#123;<br>    mUsapPoolEventFD = Zygote.getUsapPoolEventFD();<br><br>    <span class="hljs-comment">// 创建socket，名称为zygote，路径：/dev/sockets/zygote</span><br>    <span class="hljs-keyword">if</span> (isPrimaryZygote) &#123;<br>        mZygoteSocket = Zygote.createManagedSocketFromInitSocket(Zygote.PRIMARY_SOCKET_NAME);<br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/core/java/com/android/internal/os/Zygote.java<br><span class="hljs-keyword">static</span> LocalServerSocket <span class="hljs-title function_">createManagedSocketFromInitSocket</span><span class="hljs-params">(String socketName)</span> &#123;<br>    <span class="hljs-type">int</span> fileDesc;<br>    <span class="hljs-comment">// 拼接socket的名称，fullSocketName = &quot;ANDROID_SOCKET_zygote&quot;</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">fullSocketName</span> <span class="hljs-operator">=</span> ANDROID_SOCKET_PREFIX + socketName;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 得到socket的环境变量的值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> System.getenv(fullSocketName);<br>        <span class="hljs-comment">// 将socket环境变量的值转换为文件描述符的参数</span><br>        fileDesc = Integer.parseInt(env);<br>    &#125; <span class="hljs-keyword">catch</span> (RuntimeException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Socket unset or invalid: &quot;</span> + fullSocketName, ex);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 创建文件描述符</span><br>        <span class="hljs-type">FileDescriptor</span> <span class="hljs-variable">fd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileDescriptor</span>();<br>        fd.setInt$(fileDesc);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalServerSocket</span>(fd);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>            <span class="hljs-string">&quot;Error building socket from file descriptor: &quot;</span> + fileDesc, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/core/java/android/net/LocalServerSocket.java<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LocalServerSocket</span><span class="hljs-params">(FileDescriptor fd)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 创建服务端socket并持续监听</span><br>    impl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalSocketImpl</span>(fd);<br>    impl.listen(LISTEN_BACKLOG);<br>    localAddress = impl.getSockAddress();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Zygote运行于单独的进程中，是所有应用程序进程的孵化器。</li><li>Zygote进程启动做了以下几件事：<ol><li>创建AppRuntime并调用其start方法，启动Zygote进程；</li><li>创建Java虚拟机并为Java虚拟机注册JNI方法；</li><li>通过JNI调用ZygoteInit的main函数进入Zygote的Java框架层；</li><li>预加载资源；</li><li>创建服务端socket，fork出SystemServer进程；</li><li>进入死循环，poll接收fork请求。</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>启动流程</tag>
      
      <tag>Zygote</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>根Activity的启动过程</title>
    <link href="/2024/03/10/%E6%A0%B9Activity%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/03/10/%E6%A0%B9Activity%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>Activity的启动过程分为两种，一种是根Activity的启动过程，另一种是普通Activity的启动过程。根Activity指的是应用程序启动的第一个Activity，因此根Activity的启动过程一般情况下也可以理解为应用程序的启动过程。</p><p>原本四大组件的通信都是 AMS 来处理，后期AMS过于臃肿，将Activity相关工作转移到了ATMS中。</p><h4 id="Launcher请求ATMS过程"><a href="#Launcher请求ATMS过程" class="headerlink" title="Launcher请求ATMS过程"></a>Launcher请求ATMS过程</h4><p>Launcher启动后会将已安装应用程序的快捷图标显示到桌面上，这些应用程序的快捷图标就是启动根Activity的入口，当我们点击某个应用程序的快捷图标时，就会通过Launcher请求ATMS来启动该应用程序。</p><p><img src="https://s2.loli.net/2023/12/26/ySlvwHXFW9Kg2me.jpg"></p><p>当我们点击应用程序的快捷图标时，就会调用Launcher#startActivitySafely()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">packages/apps/Launcher3/src/com/android/launcher3/Launcher.java        <br><span class="hljs-keyword">public</span> RunnableList <span class="hljs-title function_">startActivitySafely</span><span class="hljs-params">(View v, Intent intent, ItemInfo item)</span> &#123;<br>    ...<br>    <span class="hljs-type">RunnableList</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.startActivitySafely(v, intent, item);<br>    ...<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用了super.startActivitySafely()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Launcher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">StatefulActivity</span>&lt;LauncherState&gt;<br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LauncherExterns</span>, Callbacks, InvariantDeviceProfile.OnIDPChangeListener,<br>        PluginListener&lt;LauncherOverlayPlugin&gt; &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatefulActivity</span>&lt;STATE_TYPE <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseState</span>&lt;STATE_TYPE&gt;&gt;<br>        <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDraggingActivity</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDraggingActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseActivity</span><br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnColorsChangedListener</span>, DisplayInfoChangeListener &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Activity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActivityContext</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>由继承关系可知，调用的是ActivityContext#startActivitySafely()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">packages/apps/Launcher3/src/com/android/launcher3/views/ActivityContext.java<br><span class="hljs-keyword">default</span> RunnableList <span class="hljs-title function_">startActivitySafely</span><span class="hljs-params">(</span><br><span class="hljs-params">        View v, Intent intent, <span class="hljs-meta">@Nullable</span> ItemInfo item)</span> &#123;<br>    ...<br>    <span class="hljs-comment">// Prepare intent</span><br>    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  <span class="hljs-comment">// 1</span><br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isShortcut</span> <span class="hljs-operator">=</span> (item <span class="hljs-keyword">instanceof</span> WorkspaceItemInfo)<br>                &amp;&amp; (item.itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT<br>                || item.itemType == LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT)<br>                &amp;&amp; !((WorkspaceItemInfo) item).isPromise();<br>        <span class="hljs-keyword">if</span> (isShortcut) &#123;<br>            <span class="hljs-comment">// Shortcuts need some special checks due to legacy reasons.</span><br>            startShortcutIntentSafely(intent, optsBundle, item);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span> || user.equals(Process.myUserHandle())) &#123;<br>            <span class="hljs-comment">// Could be launching some bookkeeping activity</span><br>            context.startActivity(intent, optsBundle);  <span class="hljs-comment">// 2</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            context.getSystemService(LauncherApps.class).startMainActivity(<br>                    intent.getComponent(), user, intent.getSourceBounds(), optsBundle);<br>        &#125;<br>        ...<br>        <span class="hljs-keyword">return</span> options.onEndCallback;<br>    &#125; <span class="hljs-keyword">catch</span> (NullPointerException | ActivityNotFoundException | SecurityException e) &#123;<br>        ...<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处将Flag设置为Intent.FLAG_ACTIVITY_NEW_TASK，这样根Activity会在新的任务栈中启动；</p><p>注释2处会调用Context#startActivity()，Context是抽象类，其中定义了抽象方法startActivity()，在其子类Activity中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/Activity.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startActivity</span><span class="hljs-params">(Intent intent, <span class="hljs-meta">@Nullable</span> Bundle options)</span> &#123;<br>    getAutofillClientController().onStartActivity(intent, mIntent);<br>    <span class="hljs-keyword">if</span> (options != <span class="hljs-literal">null</span>) &#123;<br>        startActivityForResult(intent, -<span class="hljs-number">1</span>, options);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Note we want to go through this call for compatibility with</span><br>        <span class="hljs-comment">// applications that may have overridden the method.</span><br>        startActivityForResult(intent, -<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在startActivity()中调用startActivityForResult()，它的第二个参数为-1，表示Launcher不需要知道Activity启动的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/Activity.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startActivityForResult</span><span class="hljs-params">(<span class="hljs-meta">@RequiresPermission</span> Intent intent, <span class="hljs-type">int</span> requestCode,</span><br><span class="hljs-params">        <span class="hljs-meta">@Nullable</span> Bundle options)</span> &#123;<br>    <span class="hljs-keyword">if</span> (mParent == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 1</span><br>        options = transferSpringboardActivityOptions(options);<br>        Instrumentation.<span class="hljs-type">ActivityResult</span> <span class="hljs-variable">ar</span> <span class="hljs-operator">=</span><br>            mInstrumentation.execStartActivity(<br>                <span class="hljs-built_in">this</span>, mMainThread.getApplicationThread(), mToken, <span class="hljs-built_in">this</span>,<br>                intent, requestCode, options);<br>        ...<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处的mParent是Activity类型的，表示当前Activity的父类。因为目前根Activity还没有创建出来，因此，mParent &#x3D;&#x3D; null为true。接着调用Instrumentation#execStartActivity()。Instrumentation主要用来监控应用程序和系统的交互。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/Instrumentation.java<br><span class="hljs-keyword">public</span> ActivityResult <span class="hljs-title function_">execStartActivity</span><span class="hljs-params">(</span><br><span class="hljs-params">        Context who, IBinder contextThread, IBinder token, Activity target,</span><br><span class="hljs-params">        Intent intent, <span class="hljs-type">int</span> requestCode, Bundle options)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ActivityTaskManager.getService().startActivity(whoThread,<br>                who.getOpPackageName(), who.getAttributionTag(), intent,<br>                intent.resolveTypeIfNeeded(who.getContentResolver()), token,<br>                target != <span class="hljs-literal">null</span> ? target.mEmbeddedID : <span class="hljs-literal">null</span>, requestCode, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>, options);<br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Failure from system&quot;</span>, e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先调用ActivityTaskManager#getService()来获取ATMS的代理对象，接着调用startActivity()。</p><p>先来看一下ActivityTaskManager#getService()做了什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityTaskManager.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IActivityTaskManager <span class="hljs-title function_">getService</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> IActivityTaskManagerSingleton.get();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton&lt;IActivityTaskManager&gt; IActivityTaskManagerSingleton =<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>&lt;IActivityTaskManager&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> IActivityTaskManager <span class="hljs-title function_">create</span><span class="hljs-params">()</span> &#123;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">IBinder</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ServiceManager.getService(Context.ACTIVITY_TASK_SERVICE);  <span class="hljs-comment">// 1</span><br>                    <span class="hljs-keyword">return</span> IActivityTaskManager.Stub.asInterface(b);  <span class="hljs-comment">// 2</span><br>                &#125;<br>            &#125;;<br></code></pre></td></tr></table></figure><p>getService()调用了IActivityTaskManagerSingleton#get()。IActivityTaskManagerSingleton是一个Singleton类。在注释1处得到名为”activity_task”的Service引用，也就是IBinder类型的ATMS引用。接着在注释2处将它转换为IActivityTaskManager类型的对象。这段代码采用的是AIDL，IActivityTaskManager.java类是由AIDL工具在编译时自动生成的，IActivityTaskManager.aidl的文件路径是frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;app&#x2F;IActivityTaskManager.aidl。要实现进程间通信，服务器端也就是ATMS只需要继承IActivityTaskManager.Stub类并实现相应的方法就可以了。</p><p>回到Instrumentation类的execStartActivity()方法中，从上面得知execStartActivity()最终调用的是ATMS的startActivity()方法。</p><h4 id="ATMS到ApplicationThread的调用过程"><a href="#ATMS到ApplicationThread的调用过程" class="headerlink" title="ATMS到ApplicationThread的调用过程"></a>ATMS到ApplicationThread的调用过程</h4><p><img src="https://s2.loli.net/2023/12/26/BetXHFSLwp5RONE.jpg"></p><p>Launcher请求ATMS之后，代码逻辑已经进入ATMS中，接着是ATMS到ApplicationThread的调用流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">startActivity</span><span class="hljs-params">(IApplicationThread caller, String callingPackage,</span><br><span class="hljs-params">        String callingFeatureId, Intent intent, String resolvedType, IBinder resultTo,</span><br><span class="hljs-params">        String resultWho, <span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> startFlags, ProfilerInfo profilerInfo,</span><br><span class="hljs-params">        Bundle bOptions)</span> &#123;<br>    <span class="hljs-keyword">return</span> startActivityAsUser(caller, callingPackage, callingFeatureId, intent, resolvedType,<br>            resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions,<br>            UserHandle.getCallingUserId());<br>&#125;<br></code></pre></td></tr></table></figure><p>在ATMS#startActivity()中返回了startActivityAsUser()方法，startActivityAsUser()比startActivity()多了一个参数UserHandle.getCallingUserId()，这个方法会获得调用者的UserId。ATMS根据这个UserId来确定调用者的权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">startActivityAsUser</span><span class="hljs-params">(IApplicationThread caller, String callingPackage,</span><br><span class="hljs-params">        String callingFeatureId, Intent intent, String resolvedType, IBinder resultTo,</span><br><span class="hljs-params">        String resultWho, <span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> startFlags, ProfilerInfo profilerInfo,</span><br><span class="hljs-params">        Bundle bOptions, <span class="hljs-type">int</span> userId)</span> &#123;<br>    <span class="hljs-keyword">return</span> startActivityAsUser(caller, callingPackage, callingFeatureId, intent, resolvedType,<br>            resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, userId,<br>            <span class="hljs-literal">true</span> <span class="hljs-comment">/*validateIncomingUser*/</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">startActivityAsUser</span><span class="hljs-params">(IApplicationThread caller, String callingPackage,</span><br><span class="hljs-params">        <span class="hljs-meta">@Nullable</span> String callingFeatureId, Intent intent, String resolvedType,</span><br><span class="hljs-params">        IBinder resultTo, String resultWho, <span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> startFlags,</span><br><span class="hljs-params">        ProfilerInfo profilerInfo, Bundle bOptions, <span class="hljs-type">int</span> userId, <span class="hljs-type">boolean</span> validateIncomingUser)</span> &#123;<br>   <br>    ...<br>    enforceNotIsolatedCaller(<span class="hljs-string">&quot;startActivityAsUser&quot;</span>);  <span class="hljs-comment">// 1</span><br><br>    ...<br><br>    userId = getActivityStartController().checkTargetUser(userId, validateIncomingUser,<br>            Binder.getCallingPid(), Binder.getCallingUid(), <span class="hljs-string">&quot;startActivityAsUser&quot;</span>);  <span class="hljs-comment">// 2</span><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Switch to user app stacks here.</span><br>    <span class="hljs-keyword">return</span> getActivityStartController().obtainStarter(intent, <span class="hljs-string">&quot;startActivityAsUser&quot;</span>)<br>            .setCaller(caller)<br>            .setCallingPackage(callingPackage)<br>            .setCallingFeatureId(callingFeatureId)<br>            .setResolvedType(resolvedType)<br>            .setResultTo(resultTo)<br>            .setResultWho(resultWho)<br>            .setRequestCode(requestCode)<br>            .setStartFlags(startFlags)<br>            .setProfilerInfo(profilerInfo)<br>            .setActivityOptions(opts)<br>            .setUserId(userId)<br>            .execute();  <span class="hljs-comment">// 3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处判断调用者进程是否被隔离，如果被隔离则抛出SecurityException异常；</p><p>注释2处检查调用者是否有权限，如果没有权限也会抛出SecurityException异常；</p><p>注释3处通过ActivityStartController来获取一个ActivityStarter，并且配置了一些参数。</p><p>ActivityStarter是加载Activity的控制类，会收集所有的逻辑来决定如何将Intent和Flags转换为Activity，并将Activity和Task相关联。execute()根据请求参数解析信息，executeRequest()执行一系列权限检查，对于合法的请求才继续。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java<br><span class="hljs-type">int</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    res = executeRequest(mRequest);<br>&#125;<br>    <br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">executeRequest</span><span class="hljs-params">(Request request)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">IApplicationThread</span> <span class="hljs-variable">caller</span> <span class="hljs-operator">=</span> request.caller;<br>    ...<br>    <span class="hljs-type">WindowProcessController</span> <span class="hljs-variable">callerApp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (caller != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 1</span><br>        callerApp = mService.getProcessController(caller);  <span class="hljs-comment">// 2</span><br>        <span class="hljs-keyword">if</span> (callerApp != <span class="hljs-literal">null</span>) &#123;<br>            callingPid = callerApp.getPid();<br>            callingUid = callerApp.mInfo.uid;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ...<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ActivityRecord</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityRecord</span>.Builder(mService)<br>            .setCaller(callerApp)<br>            .setLaunchedFromPid(callingPid)<br>            .setLaunchedFromUid(callingUid)<br>            .setLaunchedFromPackage(callingPackage)<br>            .setLaunchedFromFeature(callingFeatureId)<br>            .setIntent(intent)<br>            .setResolvedType(resolvedType)<br>            .setActivityInfo(aInfo)<br>            .setConfiguration(mService.getGlobalConfiguration())<br>            .setResultTo(resultRecord)<br>            .setResultWho(resultWho)<br>            .setRequestCode(requestCode)<br>            .setComponentSpecified(request.componentSpecified)<br>            .setRootVoiceInteraction(voiceSession != <span class="hljs-literal">null</span>)<br>            .setActivityOptions(checkedOptions)<br>            .setSourceRecord(sourceRecord)<br>            .build();<br><br>    mLastStartActivityRecord = r;<br>    ...<br>    mLastStartActivityResult = startActivityUnchecked(r, sourceRecord, voiceSession,<br>            request.voiceInteractor, startFlags, checkedOptions,<br>            inTask, inTaskFragment, balCode, intentGrants, realCallingUid);  <span class="hljs-comment">// 3</span><br>    ...<br>    <span class="hljs-keyword">return</span> mLastStartActivityResult;<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法中会执行一些初步的检查。</p><p>注释1处判断IApplicationThread类型的caller是否为null，caller指向的是Launcher所在的应用程序进程的ApplicationThread对象；</p><p>注释2处ActivityTaskManagerService#getProcessController()得到WindowProcessController对象，进一步获取Launcher进程的pid和uid；</p><p>接下来创建ActivityRecord，用于描述将要启动的Activity，然后注释3处调用startActivityUnchecked()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">startActivityUnchecked</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span><br><span class="hljs-params">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> startFlags, ActivityOptions options, Task inTask,</span><br><span class="hljs-params">        TaskFragment inTaskFragment, <span class="hljs-meta">@BalCode</span> <span class="hljs-type">int</span> balCode,</span><br><span class="hljs-params">        NeededUriGrants intentGrants, <span class="hljs-type">int</span> realCallingUid)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> START_CANCELED;<br>    <span class="hljs-keyword">final</span> Task startedActivityRootTask;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        result = startActivityInner(r, sourceRecord, voiceSession, voiceInteractor,<br>                startFlags, options, inTask, inTaskFragment, balCode,<br>                intentGrants, realCallingUid);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>    ...<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用startActivityUnchecked()时表示大部分初步的权限检查已经完成，执行Trace，以及异常处理。<br>接着调用startActivityInner()启动Activity，并更新全局的Task栈帧信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java<br><span class="hljs-type">int</span> <span class="hljs-title function_">startActivityInner</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span><br><span class="hljs-params">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> startFlags, ActivityOptions options, Task inTask,</span><br><span class="hljs-params">        TaskFragment inTaskFragment, <span class="hljs-meta">@BalCode</span> <span class="hljs-type">int</span> balCode,</span><br><span class="hljs-params">        NeededUriGrants intentGrants, <span class="hljs-type">int</span> realCallingUid)</span> &#123;<br>    <span class="hljs-comment">// 这里设置了一些属性，包括mDoResume</span><br>    setInitialState(r, options, inTask, inTaskFragment, startFlags, sourceRecord,<br>            voiceSession, voiceInteractor, balCode, realCallingUid);<br><br>    ...<br>        <br>    <span class="hljs-keyword">if</span> (mDoResume) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ActivityRecord</span> <span class="hljs-variable">topTaskActivity</span> <span class="hljs-operator">=</span> startedTask.topRunningActivityLocked();<br>        <span class="hljs-keyword">if</span> (!mTargetRootTask.isTopActivityFocusable()<br>                || (topTaskActivity != <span class="hljs-literal">null</span> &amp;&amp; topTaskActivity.isTaskOverlay()<br>                &amp;&amp; mStartActivity != topTaskActivity)) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!mAvoidMoveToFront &amp;&amp; mTargetRootTask.isTopActivityFocusable()<br>                    &amp;&amp; !mRootWindowContainer.isTopDisplayFocusedRootTask(mTargetRootTask)) &#123;<br>                mTargetRootTask.moveToFront(<span class="hljs-string">&quot;startActivityInner&quot;</span>);<br>            &#125;<br>            mRootWindowContainer.resumeFocusedTasksTopActivities(  <span class="hljs-comment">// 1</span><br>                    mTargetRootTask, mStartActivity, mOptions, mTransientLaunch);<br>        &#125;<br>    &#125;<br>    ...<br><br>    <span class="hljs-keyword">return</span> START_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>startActivityInner()用于启动 Activity，并更新全局的task栈帧信息，如处理singleTop、singleInstance问题，计算Intent Flag，以及栈顶复用问题等。接着调用RootWindowContainer#resumeFocusedTasksTopActivities()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/RootWindowContainer.java<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeFocusedTasksTopActivities</span><span class="hljs-params">(</span><br><span class="hljs-params">        Task targetRootTask, ActivityRecord target, ActivityOptions targetOptions,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> deferPause)</span> &#123;<br>    ...<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (targetRootTask != <span class="hljs-literal">null</span> &amp;&amp; (targetRootTask.isTopRootTaskInDisplayArea()<br>            || getTopDisplayFocusedRootTask() == targetRootTask)) &#123;<br>        result = targetRootTask.resumeTopActivityUncheckedLocked(target, targetOptions,<br>                deferPause);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">displayNdx</span> <span class="hljs-operator">=</span> getChildCount() - <span class="hljs-number">1</span>; displayNdx &gt;= <span class="hljs-number">0</span>; --displayNdx) &#123;<br>        ...<br>        <span class="hljs-keyword">if</span> (!resumedOnDisplay[<span class="hljs-number">0</span>]) &#123;<br>            ...<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Task</span> <span class="hljs-variable">focusedRoot</span> <span class="hljs-operator">=</span> display.getFocusedRootTask();<br>            <span class="hljs-keyword">if</span> (focusedRoot != <span class="hljs-literal">null</span>) &#123;<br>                result |= focusedRoot.resumeTopActivityUncheckedLocked(target, targetOptions);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (targetRootTask == <span class="hljs-literal">null</span>) &#123;<br>                result |= resumeHomeActivity(<span class="hljs-literal">null</span> <span class="hljs-comment">/* prev */</span>, <span class="hljs-string">&quot;no-focusable-task&quot;</span>,<br>                        display.getDefaultTaskDisplayArea());<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>resumeFocusedTasksTopActivities()将所有聚焦的Task的所有Activity恢复运行，因为有些刚加入的Activity是处于暂停状态的。resumeFocusedTasksTopActivities()中主要是判断传入的targetRootTask是否等于当前栈顶的 Task，不管是否相等，后续都是调用栈顶Task的resumeTopActivityUncheckedLocked()方法，启动栈顶Activity。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/Task.java<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeTopActivityUncheckedLocked</span><span class="hljs-params">(ActivityRecord prev, ActivityOptions options)</span> &#123;<br>    <span class="hljs-keyword">return</span> resumeTopActivityUncheckedLocked(prev, options, <span class="hljs-literal">false</span> <span class="hljs-comment">/* skipPause */</span>);<br>&#125;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeTopActivityUncheckedLocked</span><span class="hljs-params">(ActivityRecord prev, ActivityOptions options,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> deferPause)</span> &#123;<br>    <span class="hljs-keyword">if</span> (mInResumeTopActivity) &#123;<br>        <span class="hljs-comment">// Don&#x27;t even start recursing.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">someActivityResumed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 确保只有一个Activity执行该方法</span><br>        mInResumeTopActivity = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">if</span> (isLeafTask()) &#123;  <span class="hljs-comment">// 叶子节点</span><br>            <span class="hljs-keyword">if</span> (isFocusableAndVisible()) &#123;<br>                someActivityResumed = resumeTopActivityInnerLocked(prev, options, deferPause);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> mChildren.size() - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (idx &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">Task</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> (Task) getChildAt(idx--);<br>                ...<br>                someActivityResumed |= child.resumeTopActivityUncheckedLocked(prev, options,<br>                        deferPause);  <span class="hljs-comment">// 非叶子节点</span><br>                <span class="hljs-keyword">if</span> (idx &gt;= mChildren.size()) &#123;<br>                    idx = mChildren.size() - <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        ...<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        mInResumeTopActivity = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> someActivityResumed;<br>&#125;<br></code></pre></td></tr></table></figure><p>resumeTopActivityUncheckedLocked()对 Task 进行了一次判断，如果是非叶子结点，则对所有子结点递归调用本方法，递归结束（即到达叶子结点）后才继续实际流程，然后进入到 resumeTopActivityInnerLocked()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/Task.java<br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeTopActivityInnerLocked</span><span class="hljs-params">(ActivityRecord prev, ActivityOptions options,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> deferPause)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ActivityRecord</span> <span class="hljs-variable">topActivity</span> <span class="hljs-operator">=</span> topRunningActivity(<span class="hljs-literal">true</span> <span class="hljs-comment">/* focusableOnly */</span>);<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span>[] resumed = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">TaskFragment</span> <span class="hljs-variable">topFragment</span> <span class="hljs-operator">=</span> topActivity.getTaskFragment();<br>    resumed[<span class="hljs-number">0</span>] = topFragment.resumeTopActivity(prev, options, deferPause);<br>    forAllLeafTaskFragments(f -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (topFragment == f) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!f.canBeResumed(<span class="hljs-literal">null</span> <span class="hljs-comment">/* starting */</span>)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        resumed[<span class="hljs-number">0</span>] |= f.resumeTopActivity(prev, options, deferPause);<br>    &#125;, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> resumed[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>调用TaskFragment#resumeTopActivity()。该方法主要是寻找合适的 ActivityRecord、设置 resume 条件、准备启动目标 Activity。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/services/core/java/com/android/server/wm/TaskFragment.java<br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeTopActivity</span><span class="hljs-params">(ActivityRecord prev, ActivityOptions options,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> deferPause)</span> &#123;<br>    <span class="hljs-type">ActivityRecord</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> topRunningActivity(<span class="hljs-literal">true</span> <span class="hljs-comment">/* focusableOnly */</span>);<br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">null</span> || !next.canResumeByCompat()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    next.delayedResume = <span class="hljs-literal">false</span>;<br>    ...<br>   <span class="hljs-keyword">if</span> (next.attachedToProcess()) &#123;  <span class="hljs-comment">// Activity已经附加到进程，恢复页面并更新栈</span><br>        ...<br>        <span class="hljs-keyword">try</span> &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// Whoops, need to restart this activity!</span><br>            ...<br>            mTaskSupervisor.startSpecificActivity(next, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 栈顶Activity没有与已有的进程关联，需要启动目标Activity。</span><br>        <span class="hljs-comment">// Whoops, need to restart this activity!</span><br>        ...<br>        mTaskSupervisor.startSpecificActivity(next, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用 ActivityTaskSupervisor#startSpecificActivity()启动新进程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">startSpecificActivity</span><span class="hljs-params">(ActivityRecord r, <span class="hljs-type">boolean</span> andResume, <span class="hljs-type">boolean</span> checkConfig)</span> &#123;<br>    <span class="hljs-comment">// Is this activity&#x27;s application already running?</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">WindowProcessController</span> <span class="hljs-variable">wpc</span> <span class="hljs-operator">=</span><br>                mService.getProcessController(r.processName, r.info.applicationInfo.uid);<br>    ...<br>    <span class="hljs-keyword">if</span> (wpc != <span class="hljs-literal">null</span> &amp;&amp; wpc.hasThread()) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ...<br>            realStartActivityLocked(r, wpc, andResume, checkConfig);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>            ...<br>        &#125;<br>...<br>    &#125;<br>    ...<br>    mService.startProcessAsync(r, knownToBeDead, isTop,<br>            isTop ? HostingRecord.HOSTING_TYPE_TOP_ACTIVITY<br>                    : HostingRecord.HOSTING_TYPE_ACTIVITY);<br>&#125;<br></code></pre></td></tr></table></figure><p>进程已存在时执行realStartActivityLocked()，进程不存在时执行ActivityTaskManagerService#startProcessAsync()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">realStartActivityLocked</span><span class="hljs-params">(ActivityRecord r, WindowProcessController proc,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> andResume, <span class="hljs-type">boolean</span> checkConfig)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;      <br>        <span class="hljs-keyword">try</span> &#123;<br>            ...<br>            <span class="hljs-comment">// Create activity launch transaction.</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ClientTransaction</span> <span class="hljs-variable">clientTransaction</span> <span class="hljs-operator">=</span> ClientTransaction.obtain(<br>                    proc.getThread(), r.token);  <span class="hljs-comment">// 1</span><br><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isTransitionForward</span> <span class="hljs-operator">=</span> r.isTransitionForward();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">IBinder</span> <span class="hljs-variable">fragmentToken</span> <span class="hljs-operator">=</span> r.getTaskFragment().getFragmentToken();<br><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">deviceId</span> <span class="hljs-operator">=</span> getDeviceIdForDisplayId(r.getDisplayId());<br>            clientTransaction.addCallback(LaunchActivityItem.obtain(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(r.intent),<br>                    System.identityHashCode(r), r.info,<br>                    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Have this take the merged configuration instead of separate global</span><br>                    <span class="hljs-comment">// and override configs.</span><br>                    mergedConfiguration.getGlobalConfiguration(),<br>                    mergedConfiguration.getOverrideConfiguration(), deviceId,<br>                    r.getFilteredReferrer(r.launchedFromPackage), task.voiceInteractor,<br>                    proc.getReportedProcState(), r.getSavedState(), r.getPersistentSavedState(),<br>                    results, newIntents, r.takeOptions(), isTransitionForward,<br>                    proc.createProfilerInfoIfNeeded(), r.assistToken, activityClientController,<br>                    r.shareableActivityToken, r.getLaunchedFromBubble(), fragmentToken));  <span class="hljs-comment">// 2</span><br><br>            <span class="hljs-comment">// Set desired final state.</span><br>            <span class="hljs-keyword">final</span> ActivityLifecycleItem lifecycleItem;<br>            <span class="hljs-keyword">if</span> (andResume) &#123;<br>                lifecycleItem = ResumeActivityItem.obtain(isTransitionForward,<br>                        r.shouldSendCompatFakeFocus());  <span class="hljs-comment">// 3</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                lifecycleItem = PauseActivityItem.obtain();<br>            &#125;<br>            clientTransaction.setLifecycleStateRequest(lifecycleItem);<br><br>            <span class="hljs-comment">// Schedule transaction.</span><br>            mService.getLifecycleManager().scheduleTransaction(clientTransaction);  <span class="hljs-comment">// 4</span><br>            ...<br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>            ...<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处创建一个启动Activity事务；</p><p>注释2处添加Callback，这里创建的是LaunchActivityItem；</p><p>注释3处设置此次事务应该执行的最终状态，此次流程会设置为resume，表示Activity应该执行到onResume状态。设置ResumeActivityItem到clientTransaction中。</p><p>注释4处执行事务。</p><p>Activity的启动会通过事务来完成，事务通过目标App的IApplicationThread远程发送到目标App中，然后通过ClientLifecycleManager来执行。至此ATMS中执行的逻辑就结束了，剩下的就是目标App的ApplicationThread来执行目标Activity的各个生命周期方法了。</p><h4 id="ApplicationThread启动Activity的过程"><a href="#ApplicationThread启动Activity的过程" class="headerlink" title="ApplicationThread启动Activity的过程"></a>ApplicationThread启动Activity的过程</h4><p><img src="https://s2.loli.net/2023/12/26/potvWX975KZszad.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ClientLifecycleManager.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduleTransaction</span><span class="hljs-params">(ClientTransaction transaction)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">IApplicationThread</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> transaction.getClient();<br>    transaction.schedule();<br>    <span class="hljs-keyword">if</span> (!(client <span class="hljs-keyword">instanceof</span> Binder)) &#123;<br>        <span class="hljs-comment">// If client is not an instance of Binder - it&#x27;s a remote call and at this point it is</span><br>        <span class="hljs-comment">// safe to recycle the object. All objects used for local calls will be recycled after</span><br>        <span class="hljs-comment">// the transaction is executed on client in ActivityThread.</span><br>        transaction.recycle();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行ClientTransaction#schedule()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/servertransaction/ClientTransaction.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">schedule</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    mClient.scheduleTransaction(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行ApplicationThread#scheduleTransaction()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread$ApplicationThread<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduleTransaction</span><span class="hljs-params">(ClientTransaction transaction)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    ActivityThread.<span class="hljs-built_in">this</span>.scheduleTransaction(transaction);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用ActivityThread的scheduleTransaction()方法，ActivityThread继承自ClientTransactionHandler，实际调用的是ClientTransactionHandler的scheduleTransaction()方法，传入了创建好的transaction对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ClientTransactionHandler.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduleTransaction</span><span class="hljs-params">(ClientTransaction transaction)</span> &#123;<br>    transaction.preExecute(<span class="hljs-built_in">this</span>);<br>    sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用sendMessage()方法，这里通过Handler发送了一个EXECUTE_TRANSACTION消息，会交给ActivityThread的H类来处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br>    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">TransactionExecutor</span> <span class="hljs-variable">mTransactionExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionExecutor</span>(<span class="hljs-built_in">this</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">H</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br>    ...<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span> &#123;<br>        ...<br>        <span class="hljs-keyword">switch</span> (msg.what) &#123;<br>            ...<br>            <span class="hljs-keyword">case</span> EXECUTE_TRANSACTION:<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">ClientTransaction</span> <span class="hljs-variable">transaction</span> <span class="hljs-operator">=</span> (ClientTransaction) msg.obj;<br>                mTransactionExecutor.execute(transaction);<br>                <span class="hljs-keyword">if</span> (isSystem()) &#123;<br>                    <span class="hljs-comment">// Client transactions inside system process are recycled on the client side</span><br>                    <span class="hljs-comment">// instead of ClientLifecycleManager to avoid being cleared before this</span><br>                    <span class="hljs-comment">// message is handled.</span><br>                    transaction.recycle();<br>                &#125;<br>                <span class="hljs-comment">// TODO(lifecycler): Recycle locally scheduled transactions.</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在handleMessage()回调方法中执行EXECUTE_TRANSACTION对应的case。首先取出ClientTransaction对象，然后调用mTransactionExecutor的execute()方法，mTransactionExecutor是一个TransactionExecutor对象，是用来处理Transaction的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/servertransaction/TransactionExecutor.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(ClientTransaction transaction)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">IBinder</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> transaction.getActivityToken();<br>    ...<br>    executeCallbacks(transaction);<br><br>    executeLifecycleState(transaction);<br>    mPendingActions.clear();<br>    <span class="hljs-keyword">if</span> (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + <span class="hljs-string">&quot;End resolving transaction&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>顺序执行executeCallbacks()和executeLifecycleState()方法。</p><ol><li><p>executeCallbacks()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/servertransaction/TransactionExecutor.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeCallbacks</span><span class="hljs-params">(ClientTransaction transaction)</span> &#123;<br>    <span class="hljs-keyword">final</span> List&lt;ClientTransactionItem&gt; callbacks = transaction.getCallbacks();<br>    ...<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> callbacks.size();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ClientTransactionItem</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> callbacks.get(i);<br>        ...<br><br>        item.execute(mTransactionHandler, token, mPendingActions);<br>        item.postExecute(mTransactionHandler, token, mPendingActions);<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先从系统进程传来的ClientTransaction中得到mActivityCallbacks列表，里面保存了一个LaunchActivityItem。接着通过遍历取出这个LaunchActivityItem，接着调用它的execute()方法，传入的第一个参数是持有的ActivityThread对象，第二个参数token是从系统进程传来的activityToken。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/servertransaction/LaunchActivityItem.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(ClientTransactionHandler client, IBinder token,</span><br><span class="hljs-params">        PendingTransactionActions pendingActions)</span> &#123;<br>    ...<br>    <span class="hljs-type">ActivityClientRecord</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityClientRecord</span>(token, mIntent, mIdent, mInfo,<br>            mOverrideConfig, mReferrer, mVoiceInteractor, mState, mPersistentState,<br>            mPendingResults, mPendingNewIntents, mActivityOptions, mIsForward, mProfilerInfo,<br>            client, mAssistToken, mShareableActivityToken, mLaunchedFromBubble,<br>            mTaskFragmentToken);<br>    client.handleLaunchActivity(r, pendingActions, mDeviceId, <span class="hljs-literal">null</span> <span class="hljs-comment">/* customIntent */</span>);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>调用了ActivityThread类的handleLaunchActivity()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">public</span> Activity <span class="hljs-title function_">handleLaunchActivity</span><span class="hljs-params">(ActivityClientRecord r,</span><br><span class="hljs-params">        PendingTransactionActions pendingActions, <span class="hljs-type">int</span> deviceId, Intent customIntent)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Activity</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> performLaunchActivity(r, customIntent);<br><br>    <span class="hljs-keyword">if</span> (a != <span class="hljs-literal">null</span>) &#123;<br>        r.createdConfig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(mConfigurationController.getConfiguration());<br>        reportSizeConfigurations(r);<br>        <span class="hljs-keyword">if</span> (!r.activity.mFinished &amp;&amp; pendingActions != <span class="hljs-literal">null</span>) &#123;<br>            pendingActions.setOldState(r.state);<br>            pendingActions.setRestoreInstanceState(<span class="hljs-literal">true</span>);<br>            pendingActions.setCallOnPostCreate(<span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续调用performLaunchActivity()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> Activity <span class="hljs-title function_">performLaunchActivity</span><span class="hljs-params">(ActivityClientRecord r, Intent customIntent)</span> &#123;<br>    ...<br><br>    <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">appContext</span> <span class="hljs-operator">=</span> createBaseContextForActivity(r);<br>    <span class="hljs-type">Activity</span> <span class="hljs-variable">activity</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        java.lang.<span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> appContext.getClassLoader();<br>        activity = mInstrumentation.newActivity(<br>                cl, component.getClassName(), r.intent);  <span class="hljs-comment">// 1</span><br>        StrictMode.incrementExpectedActivityCount(activity.getClass());<br>        r.intent.setExtrasClassLoader(cl);<br>        r.intent.prepareToEnterProcess(isProtectedComponent(r.activityInfo),<br>                appContext.getAttributionSource());<br>        <span class="hljs-keyword">if</span> (r.state != <span class="hljs-literal">null</span>) &#123;<br>            r.state.setClassLoader(cl);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Application</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> r.packageInfo.makeApplicationInner(<span class="hljs-literal">false</span>, mInstrumentation);  <span class="hljs-comment">// 2</span><br>        ...<br>        <span class="hljs-keyword">if</span> (activity != <span class="hljs-literal">null</span>) &#123;<br>            ...<br>            activity.attach(appContext, <span class="hljs-built_in">this</span>, getInstrumentation(), r.token,<br>                    r.ident, app, r.intent, r.activityInfo, title, r.parent,<br>                    r.embeddedID, r.lastNonConfigurationInstances, config,<br>                    r.referrer, r.voiceInteractor, window, r.activityConfigCallback,<br>                    r.assistToken, r.shareableActivityToken);  <span class="hljs-comment">// 3</span><br>            ...<br>            <span class="hljs-comment">// 4</span><br>            <span class="hljs-keyword">if</span> (r.isPersistable()) &#123;<br>                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mInstrumentation.callActivityOnCreate(activity, r.state);<br>            &#125;<br>            ...<br>        &#125;<br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (SuperNotCalledException e) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> activity;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处创建Activity实例，这里的Activity指的是我们要启动的新的XXXActivity。调用了Instrumentation类的newActivity()方法；</p><p>注释2处尝试创建Application，r.packageInfo返回的是LoadedApk对象，调用了LoadApk的makeApplicationInner()方法。如果之前在bindApplication的时候已经创建了Application，这里直接返回之前创建的Application。</p><p>注释3处创建Activity的PhoneWindow，并将当前线程设置成主线程。我们在这个fork出来的新进程中还没有创建其他线程，这个Activity也是该App启动的第一个Activity，所以这个Activity就是在主线程中运行的。</p><p>注释4处调用了Instrumentation的callActivityOnCreate()，执行新Activity的onCreate生命周期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/Instrumentation.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callActivityOnCreate</span><span class="hljs-params">(Activity activity, Bundle icicle)</span> &#123;<br>    prePerformCreate(activity);<br>    activity.performCreate(icicle);<br>    postPerformCreate(activity);<br>&#125;<br><br>frameworks/base/core/java/android/app/Activity.java<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performCreate</span><span class="hljs-params">(Bundle icicle)</span> &#123;<br>    performCreate(icicle, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performCreate</span><span class="hljs-params">(Bundle icicle, PersistableBundle persistentState)</span> &#123;<br>    ...<br>    dispatchActivityPreCreated(icicle);<br>    mCanEnterPictureInPicture = <span class="hljs-literal">true</span>;<br>    ...<br>    restoreHasCurrentPermissionRequest(icicle);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> SystemClock.uptimeMillis();<br>    <span class="hljs-keyword">if</span> (persistentState != <span class="hljs-literal">null</span>) &#123;<br>        onCreate(icicle, persistentState);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        onCreate(icicle);<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>executeLifecycleState()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/servertransaction/TransactionExecutor.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeLifecycleState</span><span class="hljs-params">(ClientTransaction transaction)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ActivityLifecycleItem</span> <span class="hljs-variable">lifecycleItem</span> <span class="hljs-operator">=</span> transaction.getLifecycleStateRequest();  <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">if</span> (lifecycleItem == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No lifecycle request, return early.</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">IBinder</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> transaction.getActivityToken();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ActivityClientRecord</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> mTransactionHandler.getActivityClient(token);<br>    <span class="hljs-keyword">if</span> (DEBUG_RESOLVER) &#123;<br>        Slog.d(TAG, tId(transaction) + <span class="hljs-string">&quot;Resolving lifecycle state: &quot;</span><br>                + lifecycleItem + <span class="hljs-string">&quot; for activity: &quot;</span><br>                + getShortActivityName(token, mTransactionHandler));<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// Ignore requests for non-existent client records for now.</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Cycle to the state right before the final requested state.</span><br>    cycleToPath(r, lifecycleItem.getTargetState(), <span class="hljs-literal">true</span> <span class="hljs-comment">/* excludeLastState */</span>, transaction);  <span class="hljs-comment">// 2</span><br><br>    <span class="hljs-comment">// Execute the final transition with proper parameters.</span><br>    lifecycleItem.execute(mTransactionHandler, token, mPendingActions);  <span class="hljs-comment">// 3</span><br>    lifecycleItem.postExecute(mTransactionHandler, token, mPendingActions);<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处获取的是之前添加的ResumeActivityItem；</p><p>注释2处cycleToPath()非常重要，其中的lifecycleItem.getTargetState()返回值是ON_RESUME；</p><p>注释3处执行ResumeActivityItem的execute()。</p><ol start="2"><li><p>1 onStart()阶段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/servertransaction/TransactionExecutor.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cycleToPath</span><span class="hljs-params">(ActivityClientRecord r, <span class="hljs-type">int</span> finish, <span class="hljs-type">boolean</span> excludeLastState,</span><br><span class="hljs-params">        ClientTransaction transaction)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> r.getLifecycleState();  <span class="hljs-comment">// 1</span><br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">IntArray</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> mHelper.getLifecyclePath(start, finish, excludeLastState);  <span class="hljs-comment">// 2</span><br>    performLifecycleSequence(r, path, transaction);  <span class="hljs-comment">// 3</span><br>&#125;<br><br>frameworks/base/core/java/android/app/servertransaction/TransactionExecutorHelper.java<br><span class="hljs-keyword">public</span> IntArray <span class="hljs-title function_">getLifecyclePath</span><span class="hljs-params">(<span class="hljs-type">int</span> start, <span class="hljs-type">int</span> finish, <span class="hljs-type">boolean</span> excludeLastState)</span> &#123;<br>    <span class="hljs-keyword">if</span> (start == UNDEFINED || finish == UNDEFINED) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Can&#x27;t resolve lifecycle path for undefined state&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (start == ON_RESTART || finish == ON_RESTART) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<br>                <span class="hljs-string">&quot;Can&#x27;t start or finish in intermittent RESTART state&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (finish == PRE_ON_CREATE &amp;&amp; start != finish) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Can only start in pre-onCreate state&quot;</span>);<br>    &#125;<br><br>    mLifecycleSequence.clear();<br>    <span class="hljs-keyword">if</span> (finish &gt;= start) &#123;<br>        <span class="hljs-keyword">if</span> (start == ON_START &amp;&amp; finish == ON_STOP) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// just go there</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start + <span class="hljs-number">1</span>; i &lt;= finish; i++) &#123;  <span class="hljs-comment">// 4</span><br>                mLifecycleSequence.add(i);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// finish &lt; start, can&#x27;t just cycle down</span><br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">// Remove last transition in case we want to perform it with some specific params.</span><br>    <span class="hljs-keyword">if</span> (excludeLastState &amp;&amp; mLifecycleSequence.size() != <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 5</span><br>        mLifecycleSequence.remove(mLifecycleSequence.size() - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> mLifecycleSequence;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处的start是ON_CREATE；</p><p>注释2处finish是ON_RESUME，path是ON_START，这里是Activity执行onStart()函数的关键所在；</p><p>注释3处执行path中的相关的生命周期函数；</p><p>注释4处把ON_START和ON_RESUME添加到mLifecycleSequence中；</p><p>注释5处因为excludeLastState为true，所以删除掉ON_RESUME状态，只保留了ON_START。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/servertransaction/TransactionExecutor.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performLifecycleSequence</span><span class="hljs-params">(ActivityClientRecord r, IntArray path,</span><br><span class="hljs-params">        ClientTransaction transaction)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> path.size();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, state; i &lt; size; i++) &#123;<br>        state = path.get(i);<br>        <span class="hljs-keyword">if</span> (DEBUG_RESOLVER) &#123;<br>            Slog.d(TAG, tId(transaction) + <span class="hljs-string">&quot;Transitioning activity: &quot;</span><br>                    + getShortActivityName(r.token, mTransactionHandler)<br>                    + <span class="hljs-string">&quot; to state: &quot;</span> + getStateName(state));<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (state) &#123;<br>            <span class="hljs-keyword">case</span> ON_CREATE:<br>                mTransactionHandler.handleLaunchActivity(r, mPendingActions,<br>                        Context.DEVICE_ID_INVALID, <span class="hljs-literal">null</span> <span class="hljs-comment">/* customIntent */</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> ON_START:<br>                mTransactionHandler.handleStartActivity(r, mPendingActions,<br>                        <span class="hljs-literal">null</span> <span class="hljs-comment">/* activityOptions */</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> ON_RESUME:<br>                mTransactionHandler.handleResumeActivity(r, <span class="hljs-literal">false</span> <span class="hljs-comment">/* finalStateRequest */</span>,<br>                        r.isForward, <span class="hljs-literal">false</span> <span class="hljs-comment">/* shouldSendCompatFakeFocus */</span>,<br>                        <span class="hljs-string">&quot;LIFECYCLER_RESUME_ACTIVITY&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> ON_PAUSE:<br>                mTransactionHandler.handlePauseActivity(r, <span class="hljs-literal">false</span> <span class="hljs-comment">/* finished */</span>,<br>                        <span class="hljs-literal">false</span> <span class="hljs-comment">/* userLeaving */</span>, <span class="hljs-number">0</span> <span class="hljs-comment">/* configChanges */</span>,<br>                        <span class="hljs-literal">false</span> <span class="hljs-comment">/* autoEnteringPip */</span>, mPendingActions,<br>                        <span class="hljs-string">&quot;LIFECYCLER_PAUSE_ACTIVITY&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> ON_STOP:<br>                mTransactionHandler.handleStopActivity(r, <span class="hljs-number">0</span> <span class="hljs-comment">/* configChanges */</span>,<br>                        mPendingActions, <span class="hljs-literal">false</span> <span class="hljs-comment">/* finalStateRequest */</span>,<br>                        <span class="hljs-string">&quot;LIFECYCLER_STOP_ACTIVITY&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> ON_DESTROY:<br>                mTransactionHandler.handleDestroyActivity(r, <span class="hljs-literal">false</span> <span class="hljs-comment">/* finishing */</span>,<br>                        <span class="hljs-number">0</span> <span class="hljs-comment">/* configChanges */</span>, <span class="hljs-literal">false</span> <span class="hljs-comment">/* getNonConfigInstance */</span>,<br>                        <span class="hljs-string">&quot;performLifecycleSequence. cycling to:&quot;</span> + path.get(size - <span class="hljs-number">1</span>));<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> ON_RESTART:<br>                mTransactionHandler.performRestartActivity(r, <span class="hljs-literal">false</span> <span class="hljs-comment">/* start */</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unexpected lifecycle state: &quot;</span> + state);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>state为ON_START，执行ActivityThread#handleStartActivity()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleStartActivity</span><span class="hljs-params">(ActivityClientRecord r,</span><br><span class="hljs-params">        PendingTransactionActions pendingActions, ActivityOptions activityOptions)</span> &#123;<br>    ...<br>    <span class="hljs-comment">// Start</span><br>    activity.performStart(<span class="hljs-string">&quot;handleStartActivity&quot;</span>);<br>    r.setState(ON_START);<br>...<br>&#125;<br><br>frameworks/base/core/java/android/app/Activity.java<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performStart</span><span class="hljs-params">(String reason)</span> &#123;<br>    ...<br>    mInstrumentation.callActivityOnStart(<span class="hljs-built_in">this</span>);<br>    ...<br>&#125;<br><br>frameworks/base/core/java/android/app/Instrumentation.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callActivityOnStart</span><span class="hljs-params">(Activity activity)</span> &#123;<br>    activity.onStart();<br>&#125;<br></code></pre></td></tr></table></figure><p>最终调用了Acitvity#onStart()。</p><ol start="2"><li><p>2 onResume()阶段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/servertransaction/ResumeActivityItem.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(ClientTransactionHandler client, ActivityClientRecord r,</span><br><span class="hljs-params">        PendingTransactionActions pendingActions)</span> &#123;<br>    Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, <span class="hljs-string">&quot;activityResume&quot;</span>);<br>    client.handleResumeActivity(r, <span class="hljs-literal">true</span> <span class="hljs-comment">/* finalStateRequest */</span>, mIsForward,<br>            mShouldSendCompatFakeFocus, <span class="hljs-string">&quot;RESUME_ACTIVITY&quot;</span>);<br>    Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行ActivityThread#handleStartActivity()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleResumeActivity</span><span class="hljs-params">(ActivityClientRecord r, <span class="hljs-type">boolean</span> finalStateRequest,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> isForward, <span class="hljs-type">boolean</span> shouldSendCompatFakeFocus, String reason)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">if</span> (!performResumeActivity(r, finalStateRequest, reason)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    ...<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">performResumeActivity</span><span class="hljs-params">(ActivityClientRecord r, <span class="hljs-type">boolean</span> finalStateRequest,</span><br><span class="hljs-params">        String reason)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        r.activity.performResume(r.startsNotResumed, reason);<br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        ...<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>frameworks/base/core/java/android/app/Activity.java<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performResume</span><span class="hljs-params">(<span class="hljs-type">boolean</span> followedByPause, String reason)</span> &#123;<br>    ...<br>    mInstrumentation.callActivityOnResume(<span class="hljs-built_in">this</span>);<br>    ...<br>&#125;<br><br>frameworks/base/core/java/android/app/Instrumentation.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callActivityOnResume</span><span class="hljs-params">(Activity activity)</span> &#123;<br>    activity.mResumed = <span class="hljs-literal">true</span>;<br>    activity.onResume();<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>最终调用了Acitvity#onResume()。</p></li></ol></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Activity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>广播的注册过程</title>
    <link href="/2024/03/10/%E5%B9%BF%E6%92%AD%E7%9A%84%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/03/10/%E5%B9%BF%E6%92%AD%E7%9A%84%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>广播的注册通俗来讲就是广播接收者注册自己感兴趣的广播。想要动态注册广播，需要调用registerReceiver方法，它在ContextWrapper中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/content/ContextWrapper.java<br><span class="hljs-keyword">public</span> Intent <span class="hljs-title function_">registerReceiver</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> BroadcastReceiver receiver, IntentFilter filter)</span> &#123;<br>    <span class="hljs-keyword">return</span> mBase.registerReceiver(receiver, filter);<br>&#125;<br></code></pre></td></tr></table></figure><p>mBase具体指向就是ContextImpl，ContextImpl的registerReceiver()方法有很多重载的方法，最终会调用registerReceiverInternal()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ContextImpl.java<br><span class="hljs-keyword">private</span> Intent <span class="hljs-title function_">registerReceiverInternal</span><span class="hljs-params">(BroadcastReceiver receiver, <span class="hljs-type">int</span> userId,</span><br><span class="hljs-params">        IntentFilter filter, String broadcastPermission,</span><br><span class="hljs-params">        Handler scheduler, Context context, <span class="hljs-type">int</span> flags)</span> &#123;<br>    <span class="hljs-type">IIntentReceiver</span> <span class="hljs-variable">rd</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (receiver != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (mPackageInfo != <span class="hljs-literal">null</span> &amp;&amp; context != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 1</span><br>            <span class="hljs-keyword">if</span> (scheduler == <span class="hljs-literal">null</span>) &#123;<br>                scheduler = mMainThread.getHandler();<br>            &#125;<br>            rd = mPackageInfo.getReceiverDispatcher(<br>                receiver, context, scheduler,<br>                mMainThread.getInstrumentation(), <span class="hljs-literal">true</span>);  <span class="hljs-comment">// 2</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (scheduler == <span class="hljs-literal">null</span>) &#123;<br>                scheduler = mMainThread.getHandler();<br>            &#125;<br>            rd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadedApk</span>.ReceiverDispatcher(mMainThread.getApplicationThread(),<br>                    receiver, context, scheduler, <span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>).getIIntentReceiver();  <span class="hljs-comment">// 3</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> ActivityManager.getService().registerReceiverWithFeature(<br>                mMainThread.getApplicationThread(), mBasePackageName, getAttributionTag(),<br>                AppOpsManager.toReceiverId(receiver), rd, filter, broadcastPermission, userId,<br>                flags);  <span class="hljs-comment">// 4</span><br>        <span class="hljs-keyword">if</span> (intent != <span class="hljs-literal">null</span>) &#123;<br>            intent.setExtrasClassLoader(getClassLoader());<br>            <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> determine at registration time if caller is</span><br>            <span class="hljs-comment">// protecting themselves with signature permission</span><br>            intent.prepareToEnterProcess(ActivityThread.isProtectedBroadcast(intent),<br>                    getAttributionSource());<br>        &#125;<br>        <span class="hljs-keyword">return</span> intent;<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>        <span class="hljs-keyword">throw</span> e.rethrowFromSystemServer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处判断如果LoadedApk类型的mPackageInfo不等于null，并且context不等于null就调用注释2处的代码，通过mPackageInfo的getReceiverDispatcher()方法获取rd对象，否则就调用注释3处的代码来创建rd对象。注释2和注释3处的代码的目的都是要获取IIntentReceiver类型的rd对象，IIntentReceiver是一个Binder接口，用于广播的跨进程的通信，它在LoadedApk.ReceiverDispatcher.InnerReceiver中实现。</p><p>注释4处调用了IActivityManager的registerReceiverWithFeature()方法，最终会调用AMS的registerReceiverWithFeature()方法，并将IIntentReceiver类型的rd传进去，这里之所以不直接传入BroadcastReceiver而是传入IIntentReceiver，是因为注册广播是一个跨进程通信过程，需要具有跨进程通信能力的IIntentReceiver。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java<br><span class="hljs-keyword">public</span> Intent <span class="hljs-title function_">registerReceiver</span><span class="hljs-params">(IApplicationThread caller, String callerPackage,</span><br><span class="hljs-params">        IIntentReceiver receiver, IntentFilter filter, String permission, <span class="hljs-type">int</span> userId,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> flags)</span> &#123;<br>    <span class="hljs-keyword">return</span> registerReceiverWithFeature(caller, callerPackage, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>,<br>            receiver, filter, permission, userId, flags);<br>&#125;<br><br><span class="hljs-keyword">public</span> Intent <span class="hljs-title function_">registerReceiverWithFeature</span><span class="hljs-params">(IApplicationThread caller, String callerPackage,</span><br><span class="hljs-params">        String callerFeatureId, String receiverId, IIntentReceiver receiver,</span><br><span class="hljs-params">        IntentFilter filter, String permission, <span class="hljs-type">int</span> userId, <span class="hljs-type">int</span> flags)</span> &#123;<br>    ...<br>    ArrayList&lt;StickyBroadcast&gt; stickyBroadcasts = <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ProcessRecord</span> <span class="hljs-variable">callerApp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    ...<br><br>    <span class="hljs-type">int</span> callingUid;<br>    <span class="hljs-type">int</span> callingPid;<br>    <span class="hljs-type">boolean</span> instantApp;<br>    <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br>        callerApp = getRecordForAppLOSP(caller);  <span class="hljs-comment">// 1</span><br>        ...<br>        Iterator&lt;String&gt; actions = filter.actionsIterator();  <span class="hljs-comment">// 2</span><br>        <span class="hljs-keyword">if</span> (actions == <span class="hljs-literal">null</span>) &#123;<br>            ArrayList&lt;String&gt; noAction = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;(<span class="hljs-number">1</span>);<br>            noAction.add(<span class="hljs-literal">null</span>);<br>            actions = noAction.iterator();<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">onlyProtectedBroadcasts</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-comment">// Collect stickies of users and check if broadcast is only registered for protected</span><br>        <span class="hljs-comment">// broadcasts</span><br>        <span class="hljs-type">int</span>[] userIds = &#123; UserHandle.USER_ALL, UserHandle.getUserId(callingUid) &#125;;<br>        <span class="hljs-keyword">while</span> (actions.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> actions.next();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> id : userIds) &#123;<br>                ArrayMap&lt;String, ArrayList&lt;StickyBroadcast&gt;&gt; stickies =<br>                        mStickyBroadcasts.get(id);<br>                <span class="hljs-keyword">if</span> (stickies != <span class="hljs-literal">null</span>) &#123;<br>                    ArrayList&lt;StickyBroadcast&gt; broadcasts = stickies.get(action);<br>                    <span class="hljs-keyword">if</span> (broadcasts != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (stickyBroadcasts == <span class="hljs-literal">null</span>) &#123;<br>                            stickyBroadcasts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                        &#125;<br>                        stickyBroadcasts.addAll(broadcasts);  <span class="hljs-comment">// 3</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>            ...<br>        &#125;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">// Dynamic receivers are exported by default for versions prior to T</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">exported</span> <span class="hljs-operator">=</span> (flags &amp; Context.RECEIVER_EXPORTED) != <span class="hljs-number">0</span>;<br><br>    ArrayList&lt;StickyBroadcast&gt; allSticky = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (stickyBroadcasts != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ContentResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> mContext.getContentResolver();<br>        <span class="hljs-comment">// Look for any matching sticky broadcasts...</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, N = stickyBroadcasts.size(); i &lt; N; i++) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">StickyBroadcast</span> <span class="hljs-variable">broadcast</span> <span class="hljs-operator">=</span> stickyBroadcasts.get(i);<br>            <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> broadcast.intent;<br>            <span class="hljs-comment">// Don&#x27;t provided intents that aren&#x27;t available to instant apps.</span><br>            <span class="hljs-keyword">if</span> (instantApp &amp;&amp;<br>                    (intent.getFlags() &amp; Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS) == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">// If intent has scheme &quot;content&quot;, it will need to access</span><br>            <span class="hljs-comment">// provider that needs to lock mProviderMap in ActivityThread</span><br>            <span class="hljs-comment">// and also it may need to wait application response, so we</span><br>            <span class="hljs-comment">// cannot lock ActivityManagerService here.</span><br>            <span class="hljs-keyword">if</span> (filter.match(resolver, intent, <span class="hljs-literal">true</span>, TAG) &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (allSticky == <span class="hljs-literal">null</span>) &#123;<br>                    allSticky = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                &#125;<br>                allSticky.add(broadcast);  <span class="hljs-comment">// 4</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    ...<br><br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        ...<br>        <span class="hljs-type">ReceiverList</span> <span class="hljs-variable">rl</span> <span class="hljs-operator">=</span> mRegisteredReceivers.get(receiver.asBinder());  <span class="hljs-comment">// 5</span><br>        <span class="hljs-keyword">if</span> (rl == <span class="hljs-literal">null</span>) &#123;<br>            rl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReceiverList</span>(<span class="hljs-built_in">this</span>, callerApp, callingPid, callingUid,<br>                    userId, receiver);  <span class="hljs-comment">// 6</span><br>            <span class="hljs-keyword">if</span> (rl.app != <span class="hljs-literal">null</span>) &#123;<br>                ...<br>                rl.app.mReceivers.addReceiver(rl);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ...<br>            &#125;<br>            mRegisteredReceivers.put(receiver.asBinder(), rl);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rl.uid != callingUid) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rl.pid != callingPid) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rl.userId != userId) &#123;<br>            ...<br>        &#125;<br>        <span class="hljs-type">BroadcastFilter</span> <span class="hljs-variable">bf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastFilter</span>(filter, rl, callerPackage, callerFeatureId,<br>                receiverId, permission, callingUid, userId, instantApp, visibleToInstantApps,<br>                exported);  <span class="hljs-comment">// 7</span><br>        <span class="hljs-keyword">if</span> (rl.containsFilter(filter)) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            rl.add(bf);  <span class="hljs-comment">// 8</span><br>            ...<br>            mReceiverResolver.addFilter(getPackageManagerInternal().snapshot(), bf);  <span class="hljs-comment">// 9</span><br>        &#125;<br>        ...<br>        <span class="hljs-keyword">return</span> sticky;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处通过getRecordForAppLOSP()方法得到ProcessRecord类型的callerApp对象，它用于描述请求AMS注册广播接收者的Activity所在的应用程序进程。</p><p>在注释2处根据传入的IntentFilter类型filter得到actions列表，根据actions列表和userIds（userIds可以理解为应用程序的uid）得到所有的粘性广播的StickyBroadcast（StickyBroadcast里存了粘性广播的状态，包括Intent），并在注释3处传入到stickyBroadcasts中。接下来从stickyBroadcasts中找到匹配传入的参数filter的粘性广播的intent，在注释4处将这些intent存入到allSticky列表中，从这里可以看出粘性广播是存储在AMS中的。</p><p>注释5处获取ReceiverList列表，如果为空则在注释6处创建，ReceiverList继承自ArrayList，用来存储广播接收者。</p><p>在注释7处创建BroadcastFilter并传入此前创建的ReceiverList，BroadcastFilter用来描述注册的广播接收者，并在注释8处通过add()方法将自身添加到ReceiverList中。在注释9处将BroadcastFilter添加到IntentResolver类型的mReceiverResolver中，这样当AMS接收到广播时就可以从mReceiverResolver中找到对应的广播接收者了，从而达到了注册广播的目的。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>广播</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上下文Context</title>
    <link href="/2024/03/09/%E4%B8%8A%E4%B8%8B%E6%96%87Context/"/>
    <url>/2024/03/09/%E4%B8%8A%E4%B8%8B%E6%96%87Context/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>Context意为上下文，是一个应用程序环境信息的接口。它的使用场景总的来说分为两大类，分别是：</p><ul><li>使用Context调用方法，比如启动Activity、访问资源、调用系统服务等。</li><li>调用方法时传入Context，比如弹出Toast、创建Dialog等。</li></ul><p>Activity、Service和Application都间接地继承自Context，因此我们可以计算出一个应用程序进程中有多少个Context，这个数量等于Activity和Service的总个数加1，1指的是Application的数量。</p><p>Context是一个抽象类，它的内部定义了很多方法以及静态变量，它的具体实现类为ContextImpl。和Context相关联的类，除了ContextImpl，还有ContextWrapper、ContextThemeWrapper和Activity等。</p><img src="https://s2.loli.net/2024/01/03/Gubp61ZmkDIcVdY.jpg" style="zoom:50%;" /><p>ContextImpl和ContextWrapper继承自Context，ContextWrapper内部包含Context类型的mBase对象，mBase具体指向ContextImpl。ContextImpl提供了很多功能，但是外界需要使用并拓展ContextImpl的功能，因此设计上使用了装饰模式，ContextWrapper是装饰类，它对ContextImpl进行包装，ContextWrapper主要是起了方法传递的作用，ContextWrapper中几乎所有的方法都是调用ContextImpl的相应方法来实现的。ContextThemeWrapper、Service和Application都继承自ContextWrapper，这样它们都可以通过mBase来使用Context的方法，同时它们也是装饰类，在ContextWrapper的基础上又添加了不同的功能。ContextThemeWrapper中包含和主题相关的方法（比如getTheme方法），因此需要主题的Activity继承ContextThemeWrapper，而不需要主题的Service继承ContextWrapper。</p><p>Context的关联类采用了装饰模式，主要有以下的优点：</p><ul><li>使用者（比如Service）能够更方便地使用Context。</li><li>如果ContextImpl发生了变化，它的装饰者ContextWrapper不需要做任何修改。</li><li>ContextImpl的实现不会暴露给使用者，使用者也不必关心ContextImpl的实现。</li><li>通过组合而非继承的方式，拓展ContextImpl的功能，在运行时选择不同的装饰者，实现不同的功能。</li></ul><h4 id="Application-Context的创建过程"><a href="#Application-Context的创建过程" class="headerlink" title="Application Context的创建过程"></a>Application Context的创建过程</h4><p><img src="https://s2.loli.net/2024/01/03/78Io3ZtzYm5AdlF.jpg"></p><p>我们通过调用getApplicationContext来获取应用程序全局的Application Context，那么Application Context是如何创建的呢？在一个应用程序启动完成后，应用程序就会有一个全局的Application Context，那么我们就从应用程序启动过程开始着手。</p><p>从ActivityThread的performLaunchActivity()方法开始（前面的调用部分可以看《根Activity的启动过程》）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> Activity <span class="hljs-title function_">performLaunchActivity</span><span class="hljs-params">(ActivityClientRecord r, Intent customIntent)</span> &#123;<br>   ...<br><br>   <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">appContext</span> <span class="hljs-operator">=</span> createBaseContextForActivity(r);<br>   <span class="hljs-type">Activity</span> <span class="hljs-variable">activity</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>   <span class="hljs-keyword">try</span> &#123;<br>       java.lang.<span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> appContext.getClassLoader();<br>       activity = mInstrumentation.newActivity(<br>               cl, component.getClassName(), r.intent);  <span class="hljs-comment">// 1</span><br>       StrictMode.incrementExpectedActivityCount(activity.getClass());<br>       r.intent.setExtrasClassLoader(cl);<br>       r.intent.prepareToEnterProcess(isProtectedComponent(r.activityInfo),<br>               appContext.getAttributionSource());<br>       <span class="hljs-keyword">if</span> (r.state != <span class="hljs-literal">null</span>) &#123;<br>           r.state.setClassLoader(cl);<br>       &#125;<br>   &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>       ...<br>   &#125;<br><br>   <span class="hljs-keyword">try</span> &#123;<br>       <span class="hljs-type">Application</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> r.packageInfo.makeApplicationInner(<span class="hljs-literal">false</span>, mInstrumentation);  <span class="hljs-comment">// 2</span><br>       ...<br>       <span class="hljs-keyword">if</span> (activity != <span class="hljs-literal">null</span>) &#123;<br>           ...<br>           activity.attach(appContext, <span class="hljs-built_in">this</span>, getInstrumentation(), r.token,<br>                   r.ident, app, r.intent, r.activityInfo, title, r.parent,<br>                   r.embeddedID, r.lastNonConfigurationInstances, config,<br>                   r.referrer, r.voiceInteractor, window, r.activityConfigCallback,<br>                   r.assistToken, r.shareableActivityToken);  <span class="hljs-comment">// 3</span><br>           ...<br>           <span class="hljs-comment">// 4</span><br>           <span class="hljs-keyword">if</span> (r.isPersistable()) &#123;<br>               mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               mInstrumentation.callActivityOnCreate(activity, r.state);<br>           &#125;<br>           ...<br>       &#125;<br>       ...<br>   &#125; <span class="hljs-keyword">catch</span> (SuperNotCalledException e) &#123;<br>       ...<br>   &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>       ...<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> activity;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处创建Activity实例，这里的Activity指的是我们要启动的新的XXXActivity。调用了Instrumentation类的newActivity()方法；</p><p>注释2处尝试<strong>创建Application</strong>，r.packageInfo返回的是LoadedApk对象，调用了LoadedApk的makeApplicationInner()方法。</p><p>注释3处创建Activity的PhoneWindow，并将当前线程设置成主线程。我们在这个fork出来的新进程中还没有创建其他线程，这个Activity也是该App启动的第一个Activity，所以这个Activity就是在主线程中运行的。</p><p>注释4处调用了Instrumentation的callActivityOnCreate()，执行新Activity的onCreate生命周期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/LoadedApk.java<br><span class="hljs-keyword">public</span> Application <span class="hljs-title function_">makeApplicationInner</span><span class="hljs-params">(<span class="hljs-type">boolean</span> forceDefaultAppClass,</span><br><span class="hljs-params">        Instrumentation instrumentation)</span> &#123;<br>    <span class="hljs-keyword">return</span> makeApplicationInner(forceDefaultAppClass, instrumentation,<br>            <span class="hljs-comment">/* allowDuplicateInstances= */</span> <span class="hljs-literal">false</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> Application <span class="hljs-title function_">makeApplicationInner</span><span class="hljs-params">(<span class="hljs-type">boolean</span> forceDefaultAppClass,</span><br><span class="hljs-params">        Instrumentation instrumentation, <span class="hljs-type">boolean</span> allowDuplicateInstances)</span> &#123;<br>    <span class="hljs-keyword">if</span> (mApplication != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">return</span> mApplication;<br>    &#125;<br>    ...<br>    <span class="hljs-type">Application</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">appContext</span> <span class="hljs-operator">=</span> ContextImpl.createAppContext(mActivityThread, <span class="hljs-built_in">this</span>);  <span class="hljs-comment">// 2</span><br>        <span class="hljs-comment">// The network security config needs to be aware of multiple</span><br>        <span class="hljs-comment">// applications in the same process to handle discrepancies</span><br>        NetworkSecurityConfigProvider.handleNewApplication(appContext);<br>        app = mActivityThread.mInstrumentation.newApplication(<br>                cl, appClass, appContext);  <span class="hljs-comment">// 3</span><br>        appContext.setOuterContext(app);  <span class="hljs-comment">// 4</span><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        ...<br>    &#125;<br>    mActivityThread.mAllApplications.add(app);<br>    mApplication = app;  <span class="hljs-comment">// 5</span><br>    ...<br>    <span class="hljs-keyword">return</span> app;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处如果mApplication不为null则返回mApplication，这里假设是第一次启动应用程序，因此mApplication为null。</p><p>注释2处通过ContextImpl的createAppContext()方法来创建ContextImpl。</p><p>注释3处<strong>创建Application</strong>，在Instrumentation的newApplication()方法中传入了ClassLoader类型的对象以及注释2处创建的ContextImpl。</p><p>注释4处将Application赋值给ContextImpl的Context类型的成员变量mOuterContext，这样ContextImpl中也包含了Application的引用。</p><p>注释5处将Application赋值给LoadedApk的成员变量mApplication，这个mApplication是Application类型的对象，它用来代表Application Context。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/Instrumentation.java<br><span class="hljs-keyword">public</span> Application <span class="hljs-title function_">newApplication</span><span class="hljs-params">(ClassLoader cl, String className, Context context)</span><br>        <span class="hljs-keyword">throws</span> InstantiationException, IllegalAccessException, <br>        ClassNotFoundException &#123;<br>    <span class="hljs-type">Application</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> getFactory(context.getPackageName())<br>            .instantiateApplication(cl, className);  <span class="hljs-comment">// 1</span><br>    app.attach(context);  <span class="hljs-comment">// 2</span><br>    <span class="hljs-keyword">return</span> app;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处通过反射来创建Application，注释2处调用了Application的attach()方法，将ContextImpl传进去，最后返回该Application。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/Application.java<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Context context)</span> &#123;<br>    attachBaseContext(context);<br>    mLoadedApk = ContextImpl.getImpl(context).mPackageInfo;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用attachBaseContext()，它在Application的父类ContextWrapper中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/content/ContextWrapper.java<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachBaseContext</span><span class="hljs-params">(Context base)</span> &#123;<br>    <span class="hljs-keyword">if</span> (mBase != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Base context already set&quot;</span>);<br>    &#125;<br>    mBase = base;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个base一路传递过来指的是ContextImpl，它是Context的实现类，将ContextImpl赋值给ContextWrapper的Context类型的成员变量mBase，这样在ContextWrapper中就可以使用Context的方法，而Application继承自ContextWrapper，同样可以使用Context的方法。Application的attach()方法的作用就是使Application可以使用Context的方法，这样Application才可以用来代表Application Context。</p><h4 id="Application-Context的获取过程"><a href="#Application-Context的获取过程" class="headerlink" title="Application Context的获取过程"></a>Application Context的获取过程</h4><p>我们通过调用getApplicationContext()方法来获得Application Context，getApplicationContext()方法在ContextWrapper中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/content/ContextWrapper.java<br><span class="hljs-keyword">public</span> Context <span class="hljs-title function_">getApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> mBase.getApplicationContext();<br>&#125;<br></code></pre></td></tr></table></figure><p>mBase指的是ContextImpl。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ContextImpl.java<br><span class="hljs-keyword">public</span> Context <span class="hljs-title function_">getApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> (mPackageInfo != <span class="hljs-literal">null</span>) ?<br>            mPackageInfo.getApplication() : mMainThread.getApplication();<br>&#125;<br></code></pre></td></tr></table></figure><p>如果LoadedApk类型的mPackageInfo不为null，则调用LoadedApk的getApplication()方法，否则调用ActivityThread的getApplication()方法。由于应用程序这时已经启动，因此LoadedApk不会为null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/LoadedApk.java<br>Application <span class="hljs-title function_">getApplication</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> mApplication;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的mApplication在上文LoadedApk的makeApplication()方法的注释5处被赋值。这样我们通过getApplication()方法就获取到了Application Context。</p><h4 id="Activity的Context创建过程"><a href="#Activity的Context创建过程" class="headerlink" title="Activity的Context创建过程"></a>Activity的Context创建过程</h4><p><img src="https://s2.loli.net/2024/01/03/jfPZ8H7DeuUIdB6.jpg"></p><p>想要在Activity中使用Context提供的方法，务必要先创建Context。Activity的Context会在Activity的启动过程中被创建。</p><p>从ActivityThread的performLaunchActivity()方法开始（前面的调用部分可以看《根Activity的启动过程》）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> Activity <span class="hljs-title function_">performLaunchActivity</span><span class="hljs-params">(ActivityClientRecord r, Intent customIntent)</span> &#123;<br>   ...<br><br>   <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">appContext</span> <span class="hljs-operator">=</span> createBaseContextForActivity(r);  <span class="hljs-comment">// 1</span><br>   <span class="hljs-type">Activity</span> <span class="hljs-variable">activity</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>   <span class="hljs-keyword">try</span> &#123;<br>       java.lang.<span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> appContext.getClassLoader();<br>       activity = mInstrumentation.newActivity(<br>               cl, component.getClassName(), r.intent);  <span class="hljs-comment">// 2</span><br>       ...<br>   &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>       ...<br>   &#125;<br><br>   <span class="hljs-keyword">try</span> &#123;<br>       <br>       ...<br>       <span class="hljs-keyword">if</span> (activity != <span class="hljs-literal">null</span>) &#123;<br>           ...<br>           appContext.setOuterContext(activity);  <span class="hljs-comment">// 3</span><br>           activity.attach(appContext, <span class="hljs-built_in">this</span>, getInstrumentation(), r.token,<br>                   r.ident, app, r.intent, r.activityInfo, title, r.parent,<br>                   r.embeddedID, r.lastNonConfigurationInstances, config,<br>                   r.referrer, r.voiceInteractor, window, r.activityConfigCallback,<br>                   r.assistToken, r.shareableActivityToken);  <span class="hljs-comment">// 4</span><br>           ...<br>           <span class="hljs-comment">// 5</span><br>           <span class="hljs-keyword">if</span> (r.isPersistable()) &#123;<br>               mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               mInstrumentation.callActivityOnCreate(activity, r.state);<br>           &#125;<br>           ...<br>       &#125;<br>       ...<br>   &#125; <span class="hljs-keyword">catch</span> (SuperNotCalledException e) &#123;<br>       ...<br>   &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>       ...<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> activity;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释2处用来创建Activity的实例。</p><p>注释1处通过createBaseContextForActivity()方法来创建Activity的ContextImpl，并将ContextImpl传入注释4处的activity的attach()方法中。</p><p>注释3处调用了ContextImpl的setOuterContext()方法，将此前创建的Acitivity实例赋值给ContextImpl的成员变量mOuterContext，这样ContextImpl也可以访问Activity的变量和方法。</p><p>注释5处mInstrumentation的callActivityOnCreate()方法中会调用Activity的onCreate()方法。</p><ol><li><p>createBaseContextForActivity()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> ContextImpl <span class="hljs-title function_">createBaseContextForActivity</span><span class="hljs-params">(ActivityClientRecord r)</span> &#123;<br>    ...<br>    <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">appContext</span> <span class="hljs-operator">=</span> ContextImpl.createActivityContext(<br>            <span class="hljs-built_in">this</span>, r.packageInfo, r.activityInfo, r.token, displayId, r.overrideConfig);<br>    ...<br>    <span class="hljs-keyword">return</span> appContext;<br>&#125;<br></code></pre></td></tr></table></figure><p>在createBaseContextForActivity()中会调用ContextImpl的createActivityContext()方法来创建ContextImpl。</p></li><li><p>activity.attach()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/Activity.java<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Context context, ActivityThread aThread,</span><br><span class="hljs-params">        Instrumentation instr, IBinder token, <span class="hljs-type">int</span> ident,</span><br><span class="hljs-params">        Application application, Intent intent, ActivityInfo info,</span><br><span class="hljs-params">        CharSequence title, Activity parent, String id,</span><br><span class="hljs-params">        NonConfigurationInstances lastNonConfigurationInstances,</span><br><span class="hljs-params">        Configuration config, String referrer, IVoiceInteractor voiceInteractor,</span><br><span class="hljs-params">        Window window, ActivityConfigCallback activityConfigCallback, IBinder assistToken,</span><br><span class="hljs-params">        IBinder shareableActivityToken)</span> &#123;<br>    attachBaseContext(context);  <span class="hljs-comment">// 1</span><br><br>    mFragments.attachHost(<span class="hljs-literal">null</span> <span class="hljs-comment">/*parent*/</span>);<br>    mActivityInfo = info;<br><br>    mWindow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhoneWindow</span>(<span class="hljs-built_in">this</span>, window, activityConfigCallback);  <span class="hljs-comment">// 2</span><br>    mWindow.setWindowControllerCallback(mWindowControllerCallback);<br>    mWindow.setCallback(<span class="hljs-built_in">this</span>);  <span class="hljs-comment">// 3</span><br>    mWindow.setOnWindowDismissedCallback(<span class="hljs-built_in">this</span>);<br>    mWindow.getLayoutInflater().setPrivateFactory(<span class="hljs-built_in">this</span>);<br>    ...<br>    mWindow.setWindowManager(<br>            (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),<br>            mToken, mComponent.flattenToString(),<br>            (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class="hljs-number">0</span>);  <span class="hljs-comment">// 4</span><br>    <span class="hljs-keyword">if</span> (mParent != <span class="hljs-literal">null</span>) &#123;<br>        mWindow.setContainer(mParent.getWindow());<br>    &#125;<br>    mWindowManager = mWindow.getWindowManager();  <span class="hljs-comment">// 5</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在注释2处创建PhoneWindow，它代表应用程序窗口。PhoneWindow在运行中会间接触发很多事件，比如点击、菜单弹出、屏幕焦点变化等事件，这些事件需要转发给与PhoneWindow关联的Activity，转发操作通过Window.Callback接口实现，Activity实现了这个接口。在注释3处将当前Activity通过Window的setCallback()方法传递给PhoneWindow。在注释4处为PhoneWindow设置WindowManager，在注释5处获取WindowManager并赋值给Activity的成员变量mWindowManager，这样在Activity中就可以通过getWindowManager()方法来获取WindowManager。</p><p>注释1处的attachBaseContext()方法在ContextThemeWrapper中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/view/ContextThemeWrapper.java<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachBaseContext</span><span class="hljs-params">(Context newBase)</span> &#123;<br>    <span class="hljs-built_in">super</span>.attachBaseContext(newBase);<br>&#125;<br></code></pre></td></tr></table></figure><p>attachBaseContext()调用ContextThemeWrapper父类ContextWrapper的attachBaseContext()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/content/ContextWrapper.java<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachBaseContext</span><span class="hljs-params">(Context base)</span> &#123;<br>    <span class="hljs-keyword">if</span> (mBase != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Base context already set&quot;</span>);<br>    &#125;<br>    mBase = base;  <span class="hljs-comment">// 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处的base指的是一路传递过来的Activity的ContextImpl，将它赋值给ContextWrapper的成员变量mBase。这样ContextWrapper的功能就可以交由ContextImpl来处理。举个例子，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/content/ContextWrapper.java<br><span class="hljs-keyword">public</span> Resources.Theme <span class="hljs-title function_">getTheme</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> mBase.getTheme();<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们调用ContextWrapper的getTheme()方法时，其实就是调用了ContextImpl的getTheme()方法。</p><p>总结：在启动Activity的过程中创建ContextImpl，并赋值给ContextWrapper的成员变量mBase。Activity继承自ContextWrapper的子类ContextThemeWrapper，这样在Activity中就可以使用Context中定义的方法了。</p></li></ol><h4 id="Service的Context创建过程"><a href="#Service的Context创建过程" class="headerlink" title="Service的Context创建过程"></a>Service的Context创建过程</h4><p>Service的Context创建过程与Activity的Context创建过程类似，是在Service的启动过程中被创建的。</p><p>我们从ActivityThread的handleCreateService()开始分析。</p><p>handleMessage()方法根据消息类型为CREATE_SERVICE，会调用handleCreateService()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleCreateService</span><span class="hljs-params">(CreateServiceData data)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> ContextImpl.getImpl(service<br>                .createServiceBaseContext(<span class="hljs-built_in">this</span>, packageInfo));  <span class="hljs-comment">// 1</span><br>        ...<br>        context.setOuterContext(service);<br>        service.attach(context, <span class="hljs-built_in">this</span>, data.info.name, data.token, app,<br>                ActivityManager.getService());  <span class="hljs-comment">// 2</span><br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处通过ContextImpl的createServiceBaseContext()方法创建了ContextImpl，并将该ContextImpl传入注释2处service的attach()方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/Service.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(</span><br><span class="hljs-params">        Context context,</span><br><span class="hljs-params">        ActivityThread thread, String className, IBinder token,</span><br><span class="hljs-params">        Application application, Object activityManager)</span> &#123;<br>    attachBaseContext(context);  <span class="hljs-comment">// 1</span><br>    mThread = thread;           <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span>  unused - remove?</span><br>    mClassName = className;<br>    mToken = token;<br>    mApplication = application;<br>    mActivityManager = (IActivityManager)activityManager;<br>    mStartCompatibility = getApplicationInfo().targetSdkVersion<br>            &lt; Build.VERSION_CODES.ECLAIR;<br><br>    setContentCaptureOptions(application.getContentCaptureOptions());<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处调用了attachBaseContext()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/Service.java<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachBaseContext</span><span class="hljs-params">(Context newBase)</span> &#123;<br>    <span class="hljs-built_in">super</span>.attachBaseContext(newBase);  <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">if</span> (newBase != <span class="hljs-literal">null</span>) &#123;<br>        newBase.setContentCaptureOptions(getContentCaptureOptions());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处调用了ContextWrapper的attachBaseContext()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/content/ContextWrapper.java<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachBaseContext</span><span class="hljs-params">(Context base)</span> &#123;<br>    <span class="hljs-keyword">if</span> (mBase != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Base context already set&quot;</span>);<br>    &#125;<br>    mBase = base;  <span class="hljs-comment">// 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处的base指的是一路传递过来的Service的ContextImpl，将它赋值给ContextWrapper的成员变量mBase。这样在ContextWrapper中就可以使用Context的方法，而Service继承自ContextWrapper，同样可以使用Context的方法。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Context</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软重启功能调研</title>
    <link href="/2024/03/09/%E8%BD%AF%E9%87%8D%E5%90%AF%E5%8A%9F%E8%83%BD%E8%B0%83%E7%A0%94/"/>
    <url>/2024/03/09/%E8%BD%AF%E9%87%8D%E5%90%AF%E5%8A%9F%E8%83%BD%E8%B0%83%E7%A0%94/</url>
    
    <content type="html"><![CDATA[<h4 id="软重启作用"><a href="#软重启作用" class="headerlink" title="软重启作用"></a>软重启作用</h4><p>软重启即用户空间中进程的运行时重启。</p><ol><li>用于应用需要重启的更新（例如，对APEX包的更新），会重启用户空间。</li><li>可以清除临时错误，而无需删除任何数据或设置。如，冻结、性能缓慢和其他软件相关问题。</li></ol><h4 id="启用软重启功能"><a href="#启用软重启功能" class="headerlink" title="启用软重启功能"></a>启用软重启功能</h4><p>设置系统属性<code>init.userspace_reboot.is_supported=1</code></p><h4 id="判断系统是否支持软重启"><a href="#判断系统是否支持软重启" class="headerlink" title="判断系统是否支持软重启"></a>判断系统是否支持软重启</h4><ol><li><p><code>adb shell getprop | grep init.userspace_reboot.is_supported</code>判断系统属性值；</p></li><li><p>调用API：<code>PowerManager.isRebootingUserspace()</code>，最终也是判断系统属性值。</p></li></ol><h4 id="请求软重启"><a href="#请求软重启" class="headerlink" title="请求软重启"></a>请求软重启</h4><ol><li><p>调用<code>PowerManager.reboot(PowerManager.REBOOT_USERSPACE)</code></p></li><li><p><code>adb shell svc power reboot userspace</code></p></li><li><p><code>adb reboot userspace</code></p></li></ol><h4 id="判断软重启是否成功"><a href="#判断软重启是否成功" class="headerlink" title="判断软重启是否成功"></a>判断软重启是否成功</h4><p>软重启失败会回退到硬重启。硬重启成功会亮屏且听到一声通知提示音；软重启成功仅听到一声通知提示音，不会自动亮屏。</p><h4 id="重启时长"><a href="#重启时长" class="headerlink" title="重启时长"></a>重启时长</h4><p>以输入命令按下Enter或点击“重新启动”作为开始，以听到通知提示音为结束，计算时长。</p><p>该数据在M2381设备测得，仅作参考。</p><ol><li><code>adb shell svc power reboot userspace</code>，软重启，约13秒；</li><li><code>adb reboot userspace</code>，软重启，约20秒；</li><li>长按电源键，点击“重新启动”，硬重启，约22秒。</li></ol><h4 id="软重启流程"><a href="#软重启流程" class="headerlink" title="软重启流程"></a>软重启流程</h4><p>以<code>adb shell svc power reboot userspace</code>为例。</p><ul><li><p><code>init.cpp#SecondStageMain</code>中的死循环监听关机命令 -&gt;</p></li><li><p><code>reboot.cpp#HandlePowerctlMessage()</code> -&gt; </p></li><li><p><code>reboot.cpp#HandleUserspaceReboot()</code></p><ol><li><p>根据<code>init.userspace_reboot.is_supported</code>判断系统是否支持软重启</p></li><li><p>触发<code>userspace-reboot-requested</code>事件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">on userspace-reboot-requested<br>  setprop sys<span class="hljs-selector-class">.boot_completed</span> <span class="hljs-string">&quot;&quot;</span><br>  setprop dev<span class="hljs-selector-class">.bootcomplete</span> <span class="hljs-string">&quot;&quot;</span><br>  setprop sys<span class="hljs-selector-class">.init</span><span class="hljs-selector-class">.updatable_crashing</span> <span class="hljs-string">&quot;&quot;</span><br>  setprop sys<span class="hljs-selector-class">.init</span><span class="hljs-selector-class">.updatable_crashing_process_name</span> <span class="hljs-string">&quot;&quot;</span><br>  setprop sys<span class="hljs-selector-class">.user</span>.<span class="hljs-number">0</span><span class="hljs-selector-class">.ce_available</span> <span class="hljs-string">&quot;&quot;</span><br>  setprop sys<span class="hljs-selector-class">.shutdown</span><span class="hljs-selector-class">.requested</span> <span class="hljs-string">&quot;&quot;</span><br>  setprop service<span class="hljs-selector-class">.bootanim</span><span class="hljs-selector-class">.exit</span> <span class="hljs-string">&quot;&quot;</span><br>  setprop service<span class="hljs-selector-class">.bootanim</span><span class="hljs-selector-class">.progress</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><code>reboot.cpp#DoUserspaceReboot()</code></p><p>设置属性<code>sys.init.userspace_reboot.in_progress</code>为true，设置失败则软重启失败；</p><p>重置属性<code>sys.powerctl</code>为””，重置失败则软重启失败；</p><p>记录enabled状态的服务，重启时需要手动enable；</p><p>终止上一步记录的服务，超时则软重启失败；</p><p>卸载zram支持设备，卸载失败则软重启失败；</p><p>执行<code>/system/bin/vdc volume reset</code>命令，执行失败则软重启失败；</p><p>卸载apex包，否则它们可能阻止&#x2F;data的彻底卸载，卸载失败则软重启失败；</p><p>切换到bootstrap命名空间，切换失败则软重启失败；</p><p>移除apex中定义的服务；</p><p>重新enable服务；</p><p>触发<code>userspace-reboot-resume</code>(见备注1)</p></li></ol></li></ul><p>备注1：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">on</span> <span class="hljs-title">userspace-reboot-resume</span><br>    <span class="hljs-comment"># 启动vold进程，卸载/data镜像目录，播放动画</span><br>    <span class="hljs-comment"># 见备注2</span><br>    trigger userspace-reboot-fs-remount<br><br>    <span class="hljs-comment"># 挂载/data，创建/data下的目录，启动bootchart、tombstoned、apexd、logd、logd-reinit、odsign</span><br>    <span class="hljs-comment"># 执行derive_sdk、derive_classpath、apexd-snapshotde</span><br>    <span class="hljs-comment"># 见备注3</span><br>    trigger <span class="hljs-built_in">post</span>-fs-data<br><br>    <span class="hljs-comment"># 执行update_verifier_nonencrypted，启动statsd、netd、zygote、zygote_secondary</span><br>    <span class="hljs-comment"># 见备注4</span><br>    trigger zygote-<span class="hljs-built_in">start</span><br><br>    <span class="hljs-comment"># 见备注5</span><br>    trigger early-boot<br><br>    <span class="hljs-comment"># 对网络、内存管理、文件系统进行设置，启动class为hal和core的服务</span><br>    <span class="hljs-comment"># 见备注6</span><br>    trigger boot<br></code></pre></td></tr></table></figure><p>备注2：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">on</span> <span class="hljs-title">userspace-reboot-fs-remount</span><br>    <span class="hljs-comment"># vold是一个守护进程，用来管理Android中存储类的热插拔事件，其中包括设备开关机过程中存储设备各分区的挂卸载</span><br>    <span class="hljs-comment"># 预防重启过程中，vold因为一些原因没有正常运行</span><br>    <span class="hljs-built_in">start</span> vold<br>    exec - <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> <span class="hljs-comment">-- /system/bin/vdc checkpoint resetCheckpoint</span><br>    exec - <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> <span class="hljs-comment">-- /system/bin/vdc checkpoint markBootAttempt</span><br>    <span class="hljs-comment"># 卸载/data镜像目录</span><br>    umount /data_mirror/data_ce/<span class="hljs-literal">null</span>/<span class="hljs-number">0</span><br>    umount /data_mirror/data_ce/<span class="hljs-literal">null</span><br>    umount /data_mirror/data_de/<span class="hljs-literal">null</span><br>    umount /data_mirror/cur_profiles<br>    umount /data_mirror/ref_profiles<br>    umount /data_mirror<br>    remount_userdata<br>    <span class="hljs-comment"># 播放动画</span><br>    <span class="hljs-built_in">start</span> bootanim<br></code></pre></td></tr></table></figure><p>备注3：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs bash">on post-fs-data<br><br>    mark_post_data<br><br>    <span class="hljs-comment"># Start checkpoint before we touch data</span><br>    <span class="hljs-built_in">exec</span> - system system -- /system/bin/vdc checkpoint prepareCheckpoint<br><br>    <span class="hljs-comment"># We chown/chmod /data again so because mount is run as root + defaults</span><br>    <span class="hljs-built_in">chown</span> system system /data<br>    <span class="hljs-built_in">chmod</span> 0771 /data<br>    <span class="hljs-comment"># 恢复/data的安全上下文</span><br>    restorecon /data<br><br>    <span class="hljs-comment"># 创建DE密钥</span><br>    installkey /data<br><br>    <span class="hljs-comment"># 启动bootchart，bootchart是系统启动过程性能分析的工具</span><br>    <span class="hljs-built_in">mkdir</span> /data/bootchart 0755 shell shell encryption=Require<br>    bootchart start<br><br>    <span class="hljs-comment"># /dev/urandom是随机数设备。避免可预测的熵池，继承上次启动的熵</span><br>    copy /data/system/entropy.dat /dev/urandom<br><br>    <span class="hljs-built_in">mkdir</span> /data/vendor 0771 root root encryption=Require<br>    <span class="hljs-built_in">mkdir</span> /data/vendor_ce 0771 root root encryption=None<br>    <span class="hljs-built_in">mkdir</span> /data/vendor_de 0771 root root encryption=None<br>    <span class="hljs-built_in">mkdir</span> /data/vendor/hardware 0771 root root<br><br>    <span class="hljs-comment"># 启动tombstoned</span><br>    <span class="hljs-built_in">mkdir</span> /data/anr 0775 system system encryption=Require<br>    <span class="hljs-built_in">mkdir</span> /data/tombstones 0771 system system encryption=Require<br>    <span class="hljs-built_in">mkdir</span> /data/vendor/tombstones 0771 root root<br>    <span class="hljs-built_in">mkdir</span> /data/vendor/tombstones/wifi 0771 wifi wifi<br>    start tombstoned<br><br>    <span class="hljs-comment"># 设置默认的mount namespace</span><br>    enter_default_mount_ns<br><br>    <span class="hljs-comment"># 创建密钥库目录结构，为启动apexd做准备</span><br>    <span class="hljs-built_in">mkdir</span> /data/misc 01771 system misc encryption=Require<br>    <span class="hljs-built_in">mkdir</span> /data/misc/keystore 0700 keystore keystore<br>    <span class="hljs-comment"># work around b/183668221</span><br>    restorecon /data/misc /data/misc/keystore<br><br>    <span class="hljs-comment"># 设置odsign签名密钥的启动级别为MAX_BOOT_LEVEL=30</span><br>    setprop keystore.boot_level 30<br><br>    <span class="hljs-comment"># 现在/data已挂载并且我们已经创建了/data/misc/keystore</span><br>    <span class="hljs-comment"># 可以通知keystore停止允许使用early-boot密钥</span><br>    <span class="hljs-comment"># 并首次访问其数据库以支持MAX_BOOT_LEVEL密钥的创建和使用。</span><br>    <span class="hljs-built_in">exec</span> - system system -- /system/bin/vdc keymaster earlyBootEnded<br><br>    <span class="hljs-comment"># 在启动apexd前加载持久属性</span><br>    load_persist_props<br>    start logd<br>    start logd-reinit<br>   <br>    trigger load_persist_props_action<br><br>    <span class="hljs-comment"># 启动apexd，激活APEXes.</span><br>    <span class="hljs-built_in">mkdir</span> /data/apex 0755 root system encryption=None<br>    <span class="hljs-built_in">mkdir</span> /data/apex/active 0755 root system<br>    <span class="hljs-built_in">mkdir</span> /data/apex/backup 0700 root system<br>    <span class="hljs-built_in">mkdir</span> /data/apex/decompressed 0755 root system encryption=Require<br>    <span class="hljs-built_in">mkdir</span> /data/apex/hashtree 0700 root system<br>    <span class="hljs-built_in">mkdir</span> /data/apex/sessions 0700 root system<br>    <span class="hljs-built_in">mkdir</span> /data/app-staging 0751 system system encryption=DeleteIfNecessary<br>    <span class="hljs-built_in">mkdir</span> /data/apex/ota_reserved 0700 root system encryption=Require<br>    setprop apexd.status <span class="hljs-string">&quot;&quot;</span><br>    restart apexd<br><br>    <span class="hljs-comment"># 创建/data下剩余的目录</span><br>    ...<br><br>    exec_start derive_sdk<br><br><span class="hljs-comment"># 创建CE密钥</span><br>    init_user0<br><br>    <span class="hljs-comment"># 在升级或策略更新时设置 SELinux 安全上下文。</span><br>    restorecon --recursive --skip-ce /data<br><br>    <span class="hljs-comment"># 定义并导出*CLASSPATH变量。odsign依赖*CLASSPATH变量</span><br>    exec_start derive_classpath<br>    load_exports /data/system/environ/classpath<br><br>    <span class="hljs-comment"># on-device signing守护程序，在需要时生成ART工件</span><br>    start odsign<br><br>    <span class="hljs-comment"># 等待odsign使用完密钥</span><br>    wait_for_prop odsign.key.done 1<br><br>    <span class="hljs-comment"># fs-verity用于文件身份验证，锁定fs-verity密钥环，使无法添加更多密钥</span><br>    <span class="hljs-built_in">exec</span> -- /system/bin/fsverity_init --lock<br><br>    <span class="hljs-comment"># 将启动级别提升至1000000000；这会阻止进一步的on-device签名，用于关闭侦听进一步更新的线程。</span><br>    setprop keystore.boot_level 1000000000<br><br>    <span class="hljs-comment"># 允许apexd在回滚时快照并恢复设备加密的apex数据。这应该在加载DE_user数据密钥后立即完成。在完成此操作并且 apexd.status变为“就绪”之前，APEX不应访问此数据。</span><br>    exec_start apexd-snapshotde<br><br>    <span class="hljs-comment"># 检查/data中的时区数据是否比时区数据模块中的副本新，如果不是则删除</span><br>    <span class="hljs-built_in">exec</span> - system system -- /system/bin/tzdatacheck /apex/com.android.tzdata/etc/tz /data/misc/zoneinfo<br><br>    <span class="hljs-comment"># sys.memfd_use默认设置为false，这会使其保持禁用状态，直到确认应用程序和供应商进程不再对ashmem fds进行 IOCTL</span><br>    setprop sys.use_memfd <span class="hljs-literal">false</span><br><br>    <span class="hljs-built_in">chown</span> root system /dev/fscklogs/log<br>    <span class="hljs-built_in">chmod</span> 0770 /dev/fscklogs/log<br>    ...<br></code></pre></td></tr></table></figure><p><code>on post-fs-data</code>中触发了<code>load_persist_props_action</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$/<span class="hljs-keyword">system</span>/logging/logcat/logcatd.rc<br><span class="hljs-keyword">on</span> load_persist_props_action<br>    setprop logd.logpersistd.<span class="hljs-keyword">enable</span> <span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">$/<span class="hljs-keyword">system</span>/server_configurable_flags/disaster_recovery/flags_health_check.rc<br>on load_persist_props_action<br>    <span class="hljs-comment"># check server configurable flags(which is based on persistent properties) related</span><br>    <span class="hljs-comment"># disaster recovery</span><br>    <span class="hljs-keyword">mkdir</span> /data/server_configurable_flags <span class="hljs-number">0775</span> <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> encryption=Require<br>    <span class="hljs-keyword">exec</span> - <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> -- <span class="hljs-regexp">/system/</span>bin/flags_health_check BOOT_FAILURE<br></code></pre></td></tr></table></figure><p>备注4：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">on zygote-<span class="hljs-literal">start</span> &amp;&amp; <span class="hljs-keyword">property</span><span class="hljs-title"></span>:ro.crypto.<span class="hljs-attr">state=</span>...<br>    wait_for_prop odsign.verification.done <span class="hljs-number">1</span><br>    <span class="hljs-comment"># A/B update verifier that marks a successful boot.</span><br>    exec_start update_verifier_nonencrypted<br>    <span class="hljs-literal">start</span> statsd<br>    <span class="hljs-literal">start</span> netd<br>    <span class="hljs-literal">start</span> zygote<br>    <span class="hljs-literal">start</span> zygote_secondary<br></code></pre></td></tr></table></figure><p>备注5：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">$<span class="hljs-regexp">/frameworks/</span>native<span class="hljs-regexp">/cmds/i</span>nstalld/installd.rc<br>on early-boot<br>    mkdir <span class="hljs-regexp">/config/</span>sdcardfs<span class="hljs-regexp">/extensions/</span><span class="hljs-number">1055</span><br>    mkdir <span class="hljs-regexp">/config/</span>sdcardfs<span class="hljs-regexp">/extensions/</span><span class="hljs-number">1056</span><br>    mkdir <span class="hljs-regexp">/config/</span>sdcardfs<span class="hljs-regexp">/extensions/</span><span class="hljs-number">1057</span><br>    ...<br>    <span class="hljs-comment"># 在1055、1056、1057文件夹下又创建了一些文件夹</span><br></code></pre></td></tr></table></figure><p>&#x2F;device&#x2F;linaro&#x2F;dragonboard&#x2F;init.common.rc中也监听了early-boot，但是没有触发。</p><p>备注6：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs gams">on boot<br>    # 初始化网络<br>    # 启用lo回环网卡<br>    ifup lo<br>    hostname localhost<br>    domainname localdomain<br><br>    # IPsec SA默认expiration长度<br>    write /proc/sys/net/core/xfrm_acq_expires <span class="hljs-number">3600</span><br><br>    # 设置内存管理的参数<br>    write /proc/sys/vm/overcommit_memory <span class="hljs-number">1</span><br>    write /proc/sys/vm/min_free_order_shift <span class="hljs-number">4</span><br><br>    # <span class="hljs-keyword">System</span> server管理zram writeback<br>    # writeback功能，可以将zram中申请的物理页回写到真实的磁盘中，进一步释放内存<br>    chown root <span class="hljs-keyword">system</span> /sys/block/zram0/idle<br>    chmod <span class="hljs-number">0664</span> /sys/block/zram0/idle<br>    chown root <span class="hljs-keyword">system</span> /sys/block/zram0/writeback<br>    chmod <span class="hljs-number">0664</span> /sys/block/zram0/writeback<br><br>    # to access F2FS sysfs on dm-&lt;num&gt; directly<br>    mkdir /dev/sys/fs/by-name <span class="hljs-number">0755</span> <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span><br>    symlink /sys/fs/f2fs/<span class="hljs-symbol">$</span>&#123;dev.mnt.dev.data&#125; /dev/sys/fs/by-name/userdata<br><br>    # dev.mnt.dev.data=dm-N, dev.mnt.blk.data=sdaN/mmcblk0pN, dev.mnt.rootdisk.data=sda/mmcblk0, <span class="hljs-keyword">or</span><br>    # dev.mnt.dev.data=sdaN/mmcblk0pN, dev.mnt.blk.data=sdaN/mmcblk0pN, dev.mnt.rootdisk.data=sda/mmcblk0<br>    mkdir /dev/sys/block/by-name <span class="hljs-number">0755</span> <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span><br>    symlink /sys/class/block/<span class="hljs-symbol">$</span>&#123;dev.mnt.dev.data&#125; /dev/sys/block/by-name/userdata<br>    symlink /sys/class/block/<span class="hljs-symbol">$</span>&#123;dev.mnt.rootdisk.data&#125; /dev/sys/block/by-name/rootdisk<br><br>    # F2FS tuning. <span class="hljs-keyword">Set</span> cp_interval <span class="hljs-comment">larger than dirty_expire_centisecs, 30 secs,</span><br>    # to <span class="hljs-comment">avoid power consumption when system becomes mostly idle. Be careful</span><br>    # to <span class="hljs-comment">make it too large, since it may bring userdata loss, if they</span><br>    # are <span class="hljs-comment">not aware of using fsync()</span>/sync() to prepare sudden <span class="hljs-built_in">power</span>-cut.<br>    write /<span class="hljs-comment">dev</span>/sys/<span class="hljs-comment">fs</span>/by-name/<span class="hljs-comment">userdata</span>/cp_interval <span class="hljs-number">200</span><br>    write /<span class="hljs-comment">dev</span>/sys/<span class="hljs-comment">fs</span>/by-name/<span class="hljs-comment">userdata</span>/gc_urgent_sleep_time <span class="hljs-number">50</span><br>    write /<span class="hljs-comment">dev</span>/sys/<span class="hljs-comment">fs</span>/by-name/<span class="hljs-comment">userdata</span>/iostat_enable <span class="hljs-number">1</span><br><br>    # 为POSIX_FADV_SEQUENTIAL文件设置预读乘数readahead multiplier<br>    # 预读乘数会影响读性能，它控制在一个读请求之后，有多少连续数据块被保存到缓存里<br>    write /<span class="hljs-comment">dev</span>/sys/<span class="hljs-comment">fs</span>/by-name/<span class="hljs-comment">userdata</span>/seq_file_ra_mul <span class="hljs-number">16</span><br><br>    # 将丢弃大小限制为<span class="hljs-number">128</span>MB，以避免调整文件系统（dm或sda）时出现较长的IO延迟。<br>    # 这需要在供应商端启用sda/<span class="hljs-comment">mmcblk0</span> 的<span class="hljs-comment">selinux</span> 条目<br>    write /dev/<span class="hljs-comment">sys</span>/block/<span class="hljs-comment">by-name</span>/userdata/<span class="hljs-comment">queue</span>/discard_max_bytes <span class="hljs-number">134217728</span><br>    write /<span class="hljs-comment">dev</span>/sys/<span class="hljs-comment">block</span>/by-name/<span class="hljs-comment">rootdisk</span>/queue/<span class="hljs-comment">discard_max_bytes 134217728</span><br><br>    # 设置System <span class="hljs-comment">Server</span>和<span class="hljs-comment">daemons.</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">power</span>/autosleep<br><br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/devices/<span class="hljs-comment">system</span>/cpu/<span class="hljs-comment">cpufreq</span>/interactive/<span class="hljs-comment">timer_rate</span><br>    chmod <span class="hljs-comment">0660</span> /sys/<span class="hljs-comment">devices</span>/<span class="hljs-keyword">system</span>/<span class="hljs-comment">cpu</span>/cpufreq/<span class="hljs-comment">interactive</span>/timer_rate<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/devices/<span class="hljs-comment">system</span>/cpu/<span class="hljs-comment">cpufreq</span>/interactive/<span class="hljs-comment">timer_slack</span><br>    chmod <span class="hljs-comment">0660</span> /sys/<span class="hljs-comment">devices</span>/<span class="hljs-keyword">system</span>/<span class="hljs-comment">cpu</span>/cpufreq/<span class="hljs-comment">interactive</span>/timer_slack<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/devices/<span class="hljs-comment">system</span>/cpu/<span class="hljs-comment">cpufreq</span>/interactive/<span class="hljs-comment">min_sample_time</span><br>    chmod <span class="hljs-comment">0660</span> /sys/<span class="hljs-comment">devices</span>/<span class="hljs-keyword">system</span>/<span class="hljs-comment">cpu</span>/cpufreq/<span class="hljs-comment">interactive</span>/min_sample_time<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/devices/<span class="hljs-comment">system</span>/cpu/<span class="hljs-comment">cpufreq</span>/interactive/<span class="hljs-comment">hispeed_freq</span><br>    chmod <span class="hljs-comment">0660</span> /sys/<span class="hljs-comment">devices</span>/<span class="hljs-keyword">system</span>/<span class="hljs-comment">cpu</span>/cpufreq/<span class="hljs-comment">interactive</span>/hispeed_freq<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/devices/<span class="hljs-comment">system</span>/cpu/<span class="hljs-comment">cpufreq</span>/interactive/<span class="hljs-comment">target_loads</span><br>    chmod <span class="hljs-comment">0660</span> /sys/<span class="hljs-comment">devices</span>/<span class="hljs-keyword">system</span>/<span class="hljs-comment">cpu</span>/cpufreq/<span class="hljs-comment">interactive</span>/target_loads<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/devices/<span class="hljs-comment">system</span>/cpu/<span class="hljs-comment">cpufreq</span>/interactive/<span class="hljs-comment">go_hispeed_load</span><br>    chmod <span class="hljs-comment">0660</span> /sys/<span class="hljs-comment">devices</span>/<span class="hljs-keyword">system</span>/<span class="hljs-comment">cpu</span>/cpufreq/<span class="hljs-comment">interactive</span>/go_hispeed_load<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/devices/<span class="hljs-comment">system</span>/cpu/<span class="hljs-comment">cpufreq</span>/interactive/<span class="hljs-comment">above_hispeed_delay</span><br>    chmod <span class="hljs-comment">0660</span> /sys/<span class="hljs-comment">devices</span>/<span class="hljs-keyword">system</span>/<span class="hljs-comment">cpu</span>/cpufreq/<span class="hljs-comment">interactive</span>/above_hispeed_delay<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/devices/<span class="hljs-comment">system</span>/cpu/<span class="hljs-comment">cpufreq</span>/interactive/<span class="hljs-comment">boost</span><br>    chmod <span class="hljs-comment">0660</span> /sys/<span class="hljs-comment">devices</span>/<span class="hljs-keyword">system</span>/<span class="hljs-comment">cpu</span>/cpufreq/<span class="hljs-comment">interactive</span>/boost<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/devices/<span class="hljs-comment">system</span>/cpu/<span class="hljs-comment">cpufreq</span>/interactive/<span class="hljs-comment">boostpulse</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">devices</span>/<span class="hljs-keyword">system</span>/<span class="hljs-comment">cpu</span>/cpufreq/<span class="hljs-comment">interactive</span>/input_boost<br>    chmod <span class="hljs-number">0660</span> /<span class="hljs-comment">sys</span>/devices/<span class="hljs-comment">system</span>/cpu/<span class="hljs-comment">cpufreq</span>/interactive/<span class="hljs-comment">input_boost</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">devices</span>/<span class="hljs-keyword">system</span>/<span class="hljs-comment">cpu</span>/cpufreq/<span class="hljs-comment">interactive</span>/boostpulse_duration<br>    chmod <span class="hljs-number">0660</span> /<span class="hljs-comment">sys</span>/devices/<span class="hljs-comment">system</span>/cpu/<span class="hljs-comment">cpufreq</span>/interactive/<span class="hljs-comment">boostpulse_duration</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">devices</span>/<span class="hljs-keyword">system</span>/<span class="hljs-comment">cpu</span>/cpufreq/<span class="hljs-comment">interactive</span>/io_is_busy<br>    chmod <span class="hljs-number">0660</span> /<span class="hljs-comment">sys</span>/devices/<span class="hljs-comment">system</span>/cpu/<span class="hljs-comment">cpufreq</span>/interactive/<span class="hljs-comment">io_is_busy</span><br><br>    # 假设SMP对所有CPU使用共享cpufreq策略<br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">devices</span>/<span class="hljs-keyword">system</span>/<span class="hljs-comment">cpu</span>/cpu0/<span class="hljs-comment">cpufreq</span>/scaling_max_freq<br>    chmod <span class="hljs-number">0660</span> /<span class="hljs-comment">sys</span>/devices/<span class="hljs-comment">system</span>/cpu/<span class="hljs-comment">cpu0</span>/cpufreq/<span class="hljs-comment">scaling_max_freq</span><br><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">class</span>/leds/<span class="hljs-comment">vibrator</span>/trigger<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/class/<span class="hljs-comment">leds</span>/vibrator/<span class="hljs-comment">activate</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">class</span>/leds/<span class="hljs-comment">vibrator</span>/brightness<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/class/<span class="hljs-comment">leds</span>/vibrator/<span class="hljs-comment">duration</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">class</span>/leds/<span class="hljs-comment">vibrator</span>/state<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/class/<span class="hljs-comment">timed_output</span>/vibrator/<span class="hljs-comment">enable</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">class</span>/leds/<span class="hljs-comment">keyboard-backlight</span>/brightness<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/class/<span class="hljs-comment">leds</span>/lcd-backlight/<span class="hljs-comment">brightness</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">class</span>/leds/<span class="hljs-comment">button-backlight</span>/brightness<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/class/<span class="hljs-comment">leds</span>/jogball-backlight/<span class="hljs-comment">brightness</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">class</span>/leds/<span class="hljs-comment">red</span>/brightness<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/class/<span class="hljs-comment">leds</span>/green/<span class="hljs-comment">brightness</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">class</span>/leds/<span class="hljs-comment">blue</span>/brightness<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/class/<span class="hljs-comment">leds</span>/red/<span class="hljs-comment">device</span>/grpfreq<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/class/<span class="hljs-comment">leds</span>/red/<span class="hljs-comment">device</span>/grppwm<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/class/<span class="hljs-comment">leds</span>/red/<span class="hljs-comment">device</span>/blink<br>    chown <span class="hljs-keyword">system</span> <span class="hljs-keyword">system</span> /<span class="hljs-comment">sys</span>/module/<span class="hljs-comment">sco</span>/parameters/<span class="hljs-comment">disable_esco</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">kernel</span>/ipv4/<span class="hljs-comment">tcp_wmem_min</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">kernel</span>/ipv4/<span class="hljs-comment">tcp_wmem_def</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">kernel</span>/ipv4/<span class="hljs-comment">tcp_wmem_max</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">kernel</span>/ipv4/<span class="hljs-comment">tcp_rmem_min</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">kernel</span>/ipv4/<span class="hljs-comment">tcp_rmem_def</span><br>    chown <span class="hljs-comment">system system</span> /sys/<span class="hljs-comment">kernel</span>/ipv4/<span class="hljs-comment">tcp_rmem_max</span><br>    chown <span class="hljs-comment">root radio</span> /proc/<span class="hljs-comment">cmdline</span><br><br>    # 以段为单位定义默认初始接收窗口大小。<br>    setprop <span class="hljs-comment">net.tcp_def_init_rwnd 60</span><br><br>    #FLYME|dzh@meizu.com|lmk-opt: disable <span class="hljs-comment">rescue party temporarily</span><br>    setprop <span class="hljs-comment">persist.sys.disable_rescue true</span><br><br>    # 更新dm-verity状态并设置partition.*.verified属性<br>    verity_update_state<br><br>    # 启动class为hal的服务<br>    class_start <span class="hljs-comment">hal</span><br><br>    # 启动class为core的服务<br>    class_start <span class="hljs-comment">core</span><br></code></pre></td></tr></table></figure><p>class为hal的服务有：healthd、hidl_memory、vendor.contexthub-default、confirmationui-1-0、vendor.gatekeeper-1-0。</p><p>class为core的服务有：artd、audioserver、bootanim、shutdownanim、servicemanager、vndservicemanager、gpu、surfaceflinger、bufferhubd、performanced、virtual_touchpad、ueventd、console、adbd、apexd、lmkd、credstore、odsign、vold等。<br>车辆服务：carbugreportd、cartelemetryd_service、carwatchdogd、com.android.car.procfsinspector。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软重启</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息循环创建过程</title>
    <link href="/2024/03/09/%E6%B6%88%E6%81%AF%E5%BE%AA%E7%8E%AF%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/03/09/%E6%B6%88%E6%81%AF%E5%BE%AA%E7%8E%AF%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><p>应用程序进程启动后会创建消息循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    ...<br>    Looper.prepareMainLooper();  <span class="hljs-comment">// 1</span><br>...<br>    <span class="hljs-type">ActivityThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityThread</span>();  <span class="hljs-comment">// 2</span><br>    thread.attach(<span class="hljs-literal">false</span>, startSeq);<br><br>    <span class="hljs-keyword">if</span> (sMainThreadHandler == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 3</span><br>        sMainThreadHandler = thread.getHandler();  <span class="hljs-comment">// 4</span><br>    &#125;<br>...<br>    Looper.loop();  <span class="hljs-comment">// 5</span><br><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Main thread loop unexpectedly exited&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>ActivityThread类用于管理当前应用程序进程的主线程。</p><p>注释1处创建主线程的消息循环Looper；</p><p>注释2处创建ActivityThread；</p><p>注释3处判断Handler类型的sMainThreadHandler是否为null，如果为null，则在注释4处获取H类并赋值给sMainThreadHandler，这个H类继承自Handler，是ActivityThread的内部类，用于处理主线程的消息循环；</p><p>注释5处调用Looper#loop()，使得Looper开始处理消息。</p><p>可以看出，系统在应用程序进程启动完成后，就会创建一个消息循环，这样运行在应用程序进程中的应用程序可以方便地使用消息处理机制。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息循环</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>广播的发送和接收过程</title>
    <link href="/2024/03/09/%E5%B9%BF%E6%92%AD%E7%9A%84%E5%8F%91%E9%80%81%E5%92%8C%E6%8E%A5%E6%94%B6%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/03/09/%E5%B9%BF%E6%92%AD%E7%9A%84%E5%8F%91%E9%80%81%E5%92%8C%E6%8E%A5%E6%94%B6%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U，以无序广播为例</p></blockquote><p><img src="https://s2.loli.net/2023/12/28/tWEzY5mDZ97FsCq.jpg"></p><h4 id="ContextImpl到AMS的调用过程"><a href="#ContextImpl到AMS的调用过程" class="headerlink" title="ContextImpl到AMS的调用过程"></a>ContextImpl到AMS的调用过程</h4><p>发送无序广播需要调用sendBroadcast()方法，它在ContextWrapper中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/content/ContextWrapper.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendBroadcast</span><span class="hljs-params">(Intent intent)</span> &#123;<br>    mBase.sendBroadcast(intent);<br>&#125;<br></code></pre></td></tr></table></figure><p>mBase具体指向就是ContextImpl。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ContextImpl.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendBroadcast</span><span class="hljs-params">(Intent intent)</span> &#123;<br>    warnIfCallingFromSystemProcess();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resolvedType</span> <span class="hljs-operator">=</span> intent.resolveTypeIfNeeded(getContentResolver());<br>    <span class="hljs-keyword">try</span> &#123;<br>        intent.prepareToLeaveProcess(<span class="hljs-built_in">this</span>);<br>        ActivityManager.getService().broadcastIntentWithFeature(<br>                mMainThread.getApplicationThread(), getAttributionTag(), intent, resolvedType,<br>                <span class="hljs-literal">null</span>, Activity.RESULT_OK, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span> <span class="hljs-comment">/*excludedPermissions=*/</span>,<br>                <span class="hljs-literal">null</span>, AppOpsManager.OP_NONE, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, getUserId());<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>        <span class="hljs-keyword">throw</span> e.rethrowFromSystemServer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终会调用AMS的broadcastIntentWithFeature()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">broadcastIntentWithFeature</span><span class="hljs-params">(IApplicationThread caller, String callingFeatureId,</span><br><span class="hljs-params">        Intent intent, String resolvedType, IIntentReceiver resultTo,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> resultCode, String resultData, Bundle resultExtras,</span><br><span class="hljs-params">        String[] requiredPermissions, String[] excludedPermissions,</span><br><span class="hljs-params">        String[] excludedPackages, <span class="hljs-type">int</span> appOp, Bundle bOptions,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> serialized, <span class="hljs-type">boolean</span> sticky, <span class="hljs-type">int</span> userId)</span> &#123;<br>    enforceNotIsolatedCaller(<span class="hljs-string">&quot;broadcastIntent&quot;</span>);<br>    <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br>        intent = verifyBroadcastLocked(intent);  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ProcessRecord</span> <span class="hljs-variable">callerApp</span> <span class="hljs-operator">=</span> getRecordForAppLOSP(caller);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">callingPid</span> <span class="hljs-operator">=</span> Binder.getCallingPid();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">callingUid</span> <span class="hljs-operator">=</span> Binder.getCallingUid();<br><br>        <span class="hljs-comment">// We&#x27;re delivering the result to the caller</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ProcessRecord</span> <span class="hljs-variable">resultToApp</span> <span class="hljs-operator">=</span> callerApp;<br><br>        <span class="hljs-comment">// Permission regimes around sender-supplied broadcast options.</span><br>        enforceBroadcastOptionPermissionsInternal(bOptions, callingUid);<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">origId</span> <span class="hljs-operator">=</span> Binder.clearCallingIdentity();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> broadcastIntentLocked(callerApp,<br>                    callerApp != <span class="hljs-literal">null</span> ? callerApp.info.packageName : <span class="hljs-literal">null</span>, callingFeatureId,<br>                    intent, resolvedType, resultToApp, resultTo, resultCode, resultData,<br>                    resultExtras, requiredPermissions, excludedPermissions, excludedPackages,<br>                    appOp, bOptions, serialized, sticky, callingPid, callingUid, callingUid,<br>                    callingPid, userId, BackgroundStartPrivileges.NONE, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);  <span class="hljs-comment">// 2</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            Binder.restoreCallingIdentity(origId);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处验证广播是否合法；</p><p>注释2处调用broadcastIntentLocked()。</p><ol><li><p>verifyBroadcastLocked()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java<br><span class="hljs-keyword">final</span> Intent <span class="hljs-title function_">verifyBroadcastLocked</span><span class="hljs-params">(Intent intent)</span> &#123;<br>    <span class="hljs-comment">// Refuse possible leaked file descriptors</span><br>    <span class="hljs-keyword">if</span> (intent != <span class="hljs-literal">null</span> &amp;&amp; intent.hasFileDescriptors() == <span class="hljs-literal">true</span>) &#123;  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;File descriptors passed in Intent&quot;</span>);<br>    &#125;    <br><span class="hljs-type">int</span> <span class="hljs-variable">flags</span> <span class="hljs-operator">=</span> intent.getFlags();  <span class="hljs-comment">// 2</span><br><br>    <span class="hljs-keyword">if</span> (!mProcessesReady) &#123;<br>        <span class="hljs-comment">// if the caller really truly claims to know what they&#x27;re doing, go</span><br>        <span class="hljs-comment">// ahead and allow the broadcast without launching any receivers</span><br>        <span class="hljs-keyword">if</span> ((flags&amp;Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) != <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 3</span><br>            <span class="hljs-comment">// This will be turned into a FLAG_RECEIVER_REGISTERED_ONLY later on if needed.</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((flags&amp;Intent.FLAG_RECEIVER_REGISTERED_ONLY) == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 4</span><br>            Slog.e(TAG, <span class="hljs-string">&quot;Attempt to launch receivers of broadcast intent &quot;</span> + intent<br>                    + <span class="hljs-string">&quot; before boot completion&quot;</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Cannot broadcast before boot completed&quot;</span>);<br>        &#125;<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> intent;<br>&#125;<br></code></pre></td></tr></table></figure><p>verifyBroadcastLocked()方法主要验证广播是否合法，注释1处验证intent是否有文件描述符。注释2处获得intent中的flag。注释3处如果系统正在启动过程中，判断如果flag设置为FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT（启动检查时只接受动态注册的广播接收者）则不做处理，如果不是则在注释4处判断如果flag没有设置为FLAG_RECEIVER_REGISTERED_ONLY（只接受动态注册的广播接收者）则会抛出异常。</p></li><li><p>broadcastIntentLocked()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">broadcastIntentLocked</span><span class="hljs-params">(ProcessRecord callerApp, String callerPackage,</span><br><span class="hljs-params">        <span class="hljs-meta">@Nullable</span> String callerFeatureId, Intent intent, String resolvedType,</span><br><span class="hljs-params">        ProcessRecord resultToApp, IIntentReceiver resultTo, <span class="hljs-type">int</span> resultCode, String resultData,</span><br><span class="hljs-params">        Bundle resultExtras, String[] requiredPermissions,</span><br><span class="hljs-params">        String[] excludedPermissions, String[] excludedPackages, <span class="hljs-type">int</span> appOp, Bundle bOptions,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> ordered, <span class="hljs-type">boolean</span> sticky, <span class="hljs-type">int</span> callingPid, <span class="hljs-type">int</span> callingUid,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> realCallingUid, <span class="hljs-type">int</span> realCallingPid, <span class="hljs-type">int</span> userId,</span><br><span class="hljs-params">        BackgroundStartPrivileges backgroundStartPrivileges,</span><br><span class="hljs-params">        <span class="hljs-meta">@Nullable</span> <span class="hljs-type">int</span>[] broadcastAllowList,</span><br><span class="hljs-params">        <span class="hljs-meta">@Nullable</span> BiFunction&lt;Integer, Bundle, Bundle&gt; filterExtrasForReceiver)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> BroadcastQueue.traceBegin(<span class="hljs-string">&quot;broadcastIntentLockedTraced&quot;</span>);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> broadcastIntentLockedTraced(callerApp, callerPackage, callerFeatureId,<br>            intent, resolvedType, resultToApp, resultTo, resultCode, resultData, resultExtras,<br>            requiredPermissions, excludedPermissions, excludedPackages, appOp,<br>            BroadcastOptions.fromBundleNullable(bOptions), ordered, sticky,<br>            callingPid, callingUid, realCallingUid, realCallingPid, userId,<br>            backgroundStartPrivileges, broadcastAllowList, filterExtrasForReceiver);<br>    BroadcastQueue.traceEnd(cookie);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">broadcastIntentLockedTraced</span><span class="hljs-params">(ProcessRecord callerApp, String callerPackage,</span><br><span class="hljs-params">        <span class="hljs-meta">@Nullable</span> String callerFeatureId, Intent intent, String resolvedType,</span><br><span class="hljs-params">        ProcessRecord resultToApp, IIntentReceiver resultTo, <span class="hljs-type">int</span> resultCode, String resultData,</span><br><span class="hljs-params">        Bundle resultExtras, String[] requiredPermissions,</span><br><span class="hljs-params">        String[] excludedPermissions, String[] excludedPackages, <span class="hljs-type">int</span> appOp,</span><br><span class="hljs-params">        BroadcastOptions brOptions, <span class="hljs-type">boolean</span> ordered, <span class="hljs-type">boolean</span> sticky, <span class="hljs-type">int</span> callingPid,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> callingUid, <span class="hljs-type">int</span> realCallingUid, <span class="hljs-type">int</span> realCallingPid, <span class="hljs-type">int</span> userId,</span><br><span class="hljs-params">        BackgroundStartPrivileges backgroundStartPrivileges,</span><br><span class="hljs-params">        <span class="hljs-meta">@Nullable</span> <span class="hljs-type">int</span>[] broadcastAllowList,</span><br><span class="hljs-params">        <span class="hljs-meta">@Nullable</span> BiFunction&lt;Integer, Bundle, Bundle&gt; filterExtrasForReceiver)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">if</span> (!ordered &amp;&amp; NR &gt; <span class="hljs-number">0</span> &amp;&amp; !mEnableModernQueue) &#123;<br>        ...<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BroadcastQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> broadcastQueueForIntent(intent);<br>        <span class="hljs-type">BroadcastRecord</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastRecord</span>(queue, intent, callerApp, callerPackage,<br>                callerFeatureId, callingPid, callingUid, callerInstantApp, resolvedType,<br>                requiredPermissions, excludedPermissions, excludedPackages, appOp, brOptions,<br>                registeredReceivers, resultToApp, resultTo, resultCode, resultData,<br>                resultExtras, ordered, sticky, <span class="hljs-literal">false</span>, userId,<br>                backgroundStartPrivileges, timeoutExempt, filterExtrasForReceiver,<br>                callerAppProcessState);  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">if</span> (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, <span class="hljs-string">&quot;Enqueueing parallel broadcast &quot;</span> + r);<br>        queue.enqueueBroadcastLocked(r);  <span class="hljs-comment">// 2</span><br>        registeredReceivers = <span class="hljs-literal">null</span>;<br>        NR = <span class="hljs-number">0</span>;<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">if</span> ((receivers != <span class="hljs-literal">null</span> &amp;&amp; receivers.size() &gt; <span class="hljs-number">0</span>)<br>            || resultTo != <span class="hljs-literal">null</span>) &#123;<br>        ...<br>        <span class="hljs-type">BroadcastRecord</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastRecord</span>(queue, intent, callerApp, callerPackage,<br>                callerFeatureId, callingPid, callingUid, callerInstantApp, resolvedType,<br>                requiredPermissions, excludedPermissions, excludedPackages, appOp, brOptions,<br>                receivers, resultToApp, resultTo, resultCode, resultData, resultExtras,<br>                ordered, sticky, <span class="hljs-literal">false</span>, userId,<br>                backgroundStartPrivileges, timeoutExempt, filterExtrasForReceiver,<br>                callerAppProcessState);  <span class="hljs-comment">// 3</span><br><br>        <span class="hljs-keyword">if</span> (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, <span class="hljs-string">&quot;Enqueueing ordered broadcast &quot;</span> + r);<br>        queue.enqueueBroadcastLocked(r);  <span class="hljs-comment">// 4</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ActivityManager.BROADCAST_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>broadcastIntentLockedTraced代码较多，主要做了以下几件事情：</p><ol><li>设置intent，处理不同的action；</li><li>粘性广播的处理；</li><li>发送动态注册的无序广播列表（注释1、2）；</li><li>合并动态注册的有序广播列表和静态注册的广播列表，并发送（注释3、4）。</li></ol></li></ol><h4 id="AMS到BroadcastReceiver的调用过程"><a href="#AMS到BroadcastReceiver的调用过程" class="headerlink" title="AMS到BroadcastReceiver的调用过程"></a>AMS到BroadcastReceiver的调用过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/BroadcastQueueImpl.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueueBroadcastLocked</span><span class="hljs-params">(BroadcastRecord r)</span> &#123;<br>    ...<br>    <span class="hljs-comment">// Ordered broadcasts obviously need to be dispatched in serial order,</span><br>    <span class="hljs-comment">// but this implementation expects all manifest receivers to also be</span><br>    <span class="hljs-comment">// dispatched in a serial fashion</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">serialDispatch</span> <span class="hljs-operator">=</span> r.ordered;  <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">if</span> (!serialDispatch) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> (r.receivers != <span class="hljs-literal">null</span>) ? r.receivers.size() : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            <span class="hljs-keyword">if</span> (r.receivers.get(i) <span class="hljs-keyword">instanceof</span> ResolveInfo) &#123;<br>                serialDispatch = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 2</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (serialDispatch) &#123;  <span class="hljs-comment">// 3</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BroadcastRecord</span> <span class="hljs-variable">oldRecord</span> <span class="hljs-operator">=</span><br>                replacePending ? replaceOrderedBroadcastLocked(r) : <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (oldRecord != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// Replaced, fire the result-to receiver.</span><br>            <span class="hljs-keyword">if</span> (oldRecord.resultTo != <span class="hljs-literal">null</span>) &#123;<br>                ...<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            enqueueOrderedBroadcastLocked(r);  <span class="hljs-comment">// 4</span><br>            scheduleBroadcastsLocked();  <span class="hljs-comment">// 5</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">replaced</span> <span class="hljs-operator">=</span> replacePending<br>                &amp;&amp; (replaceParallelBroadcastLocked(r) != <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// Note: We assume resultTo is null for non-ordered broadcasts.</span><br>        <span class="hljs-keyword">if</span> (!replaced) &#123;<br>            enqueueParallelBroadcastLocked(r);  <span class="hljs-comment">// 6</span><br>            scheduleBroadcastsLocked();  <span class="hljs-comment">// 7</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处判断是否是有序发送；</p><p>注释2处如果是无序广播，但是是静态注册的广播接收者，serialDispatch会被设置为true，按照有序广播发送流程来发送；</p><p>注释3处有序发送，注释4处将BroadcastRecord添加到有序广播队列中，注释5处发送广播；</p><p>注释6处将BroadcastRecord添加到无序广播队列中，注释7处发送广播。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/BroadcastQueueImpl.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduleBroadcastsLocked</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    <span class="hljs-keyword">if</span> (mBroadcastsScheduled) &#123;  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    mHandler.sendMessage(mHandler.obtainMessage(BROADCAST_INTENT_MSG, <span class="hljs-built_in">this</span>));  <span class="hljs-comment">// 2</span><br>    mBroadcastsScheduled = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处如果已经处理过了，则返回；</p><p>注释2处向BroadcastHandler类型的mHandler对象发送了BROADCAST_INTENT_MSG类型的消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/BroadcastQueueImpl$BroadcastHandler<br>    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BroadcastHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BroadcastHandler</span><span class="hljs-params">(Looper looper)</span> &#123;<br>        <span class="hljs-built_in">super</span>(looper, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (msg.what) &#123;<br>            <span class="hljs-keyword">case</span> BROADCAST_INTENT_MSG: &#123;<br>                <span class="hljs-keyword">if</span> (DEBUG_BROADCAST) Slog.v(<br>                        TAG_BROADCAST, <span class="hljs-string">&quot;Received BROADCAST_INTENT_MSG [&quot;</span><br>                        + mQueueName + <span class="hljs-string">&quot;]&quot;</span>);<br>                processNextBroadcast(<span class="hljs-literal">true</span>);  <span class="hljs-comment">// 1</span><br>            &#125; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> BROADCAST_TIMEOUT_MSG: &#123;<br>                <span class="hljs-keyword">synchronized</span> (mService) &#123;<br>                    broadcastTimeoutLocked(<span class="hljs-literal">true</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处在handleMessage()方法中调用了processNextBroadcast()方法，方法对无序广播和有序广播分别进行处理，旨在将广播发送给广播接收者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/BroadcastQueueImpl.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processNextBroadcast</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fromMsg)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (mService) &#123;<br>        processNextBroadcastLocked(fromMsg, <span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processNextBroadcastLocked</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fromMsg, <span class="hljs-type">boolean</span> skipOomAdj)</span> &#123;<br>    BroadcastRecord r;<br>    ...<br>    <span class="hljs-keyword">if</span> (fromMsg) &#123;  <span class="hljs-comment">// 1</span><br>        mBroadcastsScheduled = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 2</span><br>    &#125;<br><br>    <span class="hljs-comment">// First, deliver any non-serialized broadcasts right away.</span><br>    <span class="hljs-keyword">while</span> (mParallelBroadcasts.size() &gt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 3</span><br>        r = mParallelBroadcasts.remove(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 4</span><br>        r.dispatchTime = SystemClock.uptimeMillis();<br>        r.dispatchRealTime = SystemClock.elapsedRealtime();<br>        r.dispatchClockTime = System.currentTimeMillis();<br>        r.mIsReceiverAppRunning = <span class="hljs-literal">true</span>;<br>        ...<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> r.receivers.size();<br>        ...<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> r.receivers.get(i);<br>            ....<br>            deliverToRegisteredReceiverLocked(r,<br>                    (BroadcastFilter) target, <span class="hljs-literal">false</span>, i);  <span class="hljs-comment">// 5</span><br>        &#125;<br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处，从前面BroadcastHandler#handleMessage()中我们得知传入的参数fromMsg的值为true，因此在注释2处将</p><p>mBroadcastsScheduled设置为false，表示对于此前发来的BROADCAST_INTENT_MSG类型的消息已经处理了。</p><p>注释3处的mParallelBroadcasts列表用来存储无序广播，通过while循环将mParallelBroadcasts列表中的无序广播发送给对应的广播接收者。在注释4处获取每一个mParallelBroadcasts列表中存储的BroadcastRecord类型的r对象。在注释5处将这些r对象描述的广播发送给对应的广播接收者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/BroadcastQueueImpl.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deliverToRegisteredReceiverLocked</span><span class="hljs-params">(BroadcastRecord r,</span><br><span class="hljs-params">        BroadcastFilter filter, <span class="hljs-type">boolean</span> ordered, <span class="hljs-type">int</span> index)</span> &#123;<br>    ...<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isInFullBackup</span> <span class="hljs-operator">=</span> (filter.receiverList.app != <span class="hljs-literal">null</span>)<br>                &amp;&amp; filter.receiverList.app.isInFullBackup();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isKilled</span> <span class="hljs-operator">=</span> (filter.receiverList.app != <span class="hljs-literal">null</span>)<br>                &amp;&amp; filter.receiverList.app.isKilled();<br>        <span class="hljs-keyword">if</span> (isInFullBackup || isKilled) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ...<br>            performReceiveLocked(r, filter.receiverList.app, filter.receiverList.receiver,<br>                    prepareReceiverIntent(r.intent, filteredExtras), r.resultCode, r.resultData,<br>                    r.resultExtras, r.ordered, r.initialSticky, r.shareIdentity, r.userId,<br>                    filter.receiverList.uid, r.callingUid, r.callerPackage,<br>                    r.dispatchTime - r.enqueueTime,<br>                    r.receiverTime - r.dispatchTime, filter.getPriority(),<br>                    filter.receiverList.app != <span class="hljs-literal">null</span><br>                            ? filter.receiverList.app.mState.getCurProcState()<br>                            : ActivityManager.PROCESS_STATE_UNKNOWN);  <span class="hljs-comment">// 1</span><br>            ...<br>        &#125;<br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处接着调用performReceiveLocked()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/BroadcastQueueImpl.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performReceiveLocked</span><span class="hljs-params">(BroadcastRecord r, ProcessRecord app, IIntentReceiver receiver,</span><br><span class="hljs-params">        Intent intent, <span class="hljs-type">int</span> resultCode, String data, Bundle extras,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> ordered, <span class="hljs-type">boolean</span> sticky, <span class="hljs-type">boolean</span> shareIdentity, <span class="hljs-type">int</span> sendingUser,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> receiverUid, <span class="hljs-type">int</span> callingUid, String callingPackage,</span><br><span class="hljs-params">        <span class="hljs-type">long</span> dispatchDelay, <span class="hljs-type">long</span> receiveDelay, <span class="hljs-type">int</span> priority,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> receiverProcessState)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    ...<br>    <span class="hljs-comment">// Send the intent to the receiver asynchronously using one-way binder calls.</span><br>    <span class="hljs-keyword">if</span> (app != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">IApplicationThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> app.getThread();<br>        <span class="hljs-keyword">if</span> (thread != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 2</span><br>            <span class="hljs-comment">// If we have an app thread, do the call through that so it is</span><br>            <span class="hljs-comment">// correctly ordered with other one-way calls.</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">assumeDelivered</span> <span class="hljs-operator">=</span> !ordered;<br>                thread.scheduleRegisteredReceiver(<br>                        receiver, intent, resultCode,<br>                        data, extras, ordered, sticky, assumeDelivered, sendingUser,<br>                        app.mState.getReportedProcState(),<br>                        shareIdentity ? callingUid : Process.INVALID_UID,<br>                        shareIdentity ? callingPackage : <span class="hljs-literal">null</span>);  <span class="hljs-comment">// 3</span><br>            &#125; <span class="hljs-keyword">catch</span> (RemoteException ex) &#123;<br>                ...<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ...<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1和注释2处的代码表示如果广播接收者所在的应用程序进程存在并且正在运行，则执行注释3处的代码，表示用广播接收者所在的应用程序进程来接收广播，这里thread指的是ApplicationThread。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread$ApplicationThread<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IApplicationThread</span>.Stub &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduleRegisteredReceiver</span><span class="hljs-params">(IIntentReceiver receiver, Intent intent,</span><br><span class="hljs-params">            <span class="hljs-type">int</span> resultCode, String dataStr, Bundle extras, <span class="hljs-type">boolean</span> ordered,</span><br><span class="hljs-params">            <span class="hljs-type">boolean</span> sticky, <span class="hljs-type">boolean</span> assumeDelivered, <span class="hljs-type">int</span> sendingUser, <span class="hljs-type">int</span> processState,</span><br><span class="hljs-params">            <span class="hljs-type">int</span> sendingUid, String sendingPackage)</span><br>            <span class="hljs-keyword">throws</span> RemoteException &#123;<br>        ...<br>        <span class="hljs-keyword">if</span> (receiver <span class="hljs-keyword">instanceof</span> LoadedApk.ReceiverDispatcher.InnerReceiver) &#123;<br>            ((LoadedApk.ReceiverDispatcher.InnerReceiver) receiver).performReceive(intent,<br>                    resultCode, dataStr, extras, ordered, sticky, assumeDelivered, sendingUser,<br>                    sendingUid, sendingPackage);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ...<br>            receiver.performReceive(intent, resultCode, dataStr, extras, ordered, sticky,<br>                    sendingUser);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用了IIntentReceiver类型的对象receiver的performReceive()方法。IIntentReceiver用于广播的跨进程通信。调用LoadedApk.ReceiverDispatcher.InnerReceiver的performReceive()继续发送广播。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/LoadedApk$ReceiverDispatcher.InnerReceiver<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiverDispatcher</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IIntentReceiver</span>.Stub &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performReceive</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> resultCode, String data,</span><br><span class="hljs-params">                Bundle extras, <span class="hljs-type">boolean</span> ordered, <span class="hljs-type">boolean</span> sticky, <span class="hljs-type">boolean</span> assumeDelivered,</span><br><span class="hljs-params">                <span class="hljs-type">int</span> sendingUser, <span class="hljs-type">int</span> sendingUid, String sendingPackage)</span> &#123;<br>            <span class="hljs-keyword">final</span> LoadedApk.ReceiverDispatcher rd;<br>            <span class="hljs-keyword">if</span> (intent == <span class="hljs-literal">null</span>) &#123;<br>                ...<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                rd = mDispatcher.get();<br>            &#125;<br>            ...<br>            <span class="hljs-keyword">if</span> (rd != <span class="hljs-literal">null</span>) &#123;<br>                rd.performReceive(intent, resultCode, data, extras,<br>                        ordered, sticky, assumeDelivered, sendingUser,<br>                        sendingUid, sendingPackage);  <span class="hljs-comment">// 1</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!assumeDelivered) &#123;<br>                ...<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>IIntentReceiver和IActivityManager一样，都使用了AIDL来实现进程间通信。InnerReceiver继承自IIntentReceiver.Stub，是Binder通信的服务器端，IIntentReceiver则是Binder通信的客户端、InnerReceiver在本地的代理，它的具体实现就是InnerReceiver。</p><p>注释1处调用了ReceiverDispatcher类型的rd对象的performReceive()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/LoadedApk$ReceiverDispatcher<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiverDispatcher</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performReceive</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> resultCode, String data,</span><br><span class="hljs-params">            Bundle extras, <span class="hljs-type">boolean</span> ordered, <span class="hljs-type">boolean</span> sticky, <span class="hljs-type">boolean</span> assumeDelivered,</span><br><span class="hljs-params">            <span class="hljs-type">int</span> sendingUser, <span class="hljs-type">int</span> sendingUid, String sendingPackage)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Args</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Args</span>(intent, resultCode, data, extras, ordered,<br>                sticky, assumeDelivered, sendingUser, sendingUid, sendingPackage);  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">if</span> (intent == <span class="hljs-literal">null</span>) &#123;<br>            Log.wtf(TAG, <span class="hljs-string">&quot;Null intent received&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (ActivityThread.DEBUG_BROADCAST) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">seq</span> <span class="hljs-operator">=</span> intent.getIntExtra(<span class="hljs-string">&quot;seq&quot;</span>, -<span class="hljs-number">1</span>);<br>                Slog.i(ActivityThread.TAG, <span class="hljs-string">&quot;Enqueueing broadcast &quot;</span> + intent.getAction()<br>                        + <span class="hljs-string">&quot; seq=&quot;</span> + seq + <span class="hljs-string">&quot; to &quot;</span> + mReceiver);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (intent == <span class="hljs-literal">null</span> || !mActivityThread.post(args.getRunnable())) &#123;  <span class="hljs-comment">// 2</span><br>            <span class="hljs-type">IActivityManager</span> <span class="hljs-variable">mgr</span> <span class="hljs-operator">=</span> ActivityManager.getService();<br>            <span class="hljs-keyword">if</span> (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,<br>                    <span class="hljs-string">&quot;Finishing sync broadcast to &quot;</span> + mReceiver);<br>            args.sendFinished(mgr);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处将广播的intent等信息封装为Args对象，注释2处调用mActivityThread的post()方法并传入了Args对象。这个mActivityThread是一个Handler对象，具体指向的就是H，注释2处的代码就是将Args对象的getRunnable()方法通过H发送到线程的消息队列中。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs scala">frameworks/base/core/java/android/app/<span class="hljs-type">LoadedApk</span>$<span class="hljs-type">ReceiverDispatcher</span>.<span class="hljs-type">Args</span><br>static <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReceiverDispatcher</span> </span>&#123;<br><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Args</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BroadcastReceiver</span>.<span class="hljs-title">PendingResult</span> </span>&#123;<br>public <span class="hljs-keyword">final</span> <span class="hljs-type">Runnable</span> getRunnable() &#123;<br>            <span class="hljs-keyword">return</span> () -&gt; &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">BroadcastReceiver</span> receiver = mReceiver;<br>                ...<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ClassLoader</span> cl = mReceiver.getClass().getClassLoader();<br>                    intent.setExtrasClassLoader(cl);<br>                    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> determine at registration time if caller is</span><br>                    <span class="hljs-comment">// protecting themselves with signature permission</span><br>                    intent.prepareToEnterProcess(<span class="hljs-type">ActivityThread</span>.isProtectedBroadcast(intent),<br>                            mContext.getAttributionSource());<br>                    setExtrasClassLoader(cl);<br>                    receiver.setPendingResult(<span class="hljs-keyword">this</span>);<br>                    receiver.onReceive(mContext, intent);  <span class="hljs-comment">// 1</span><br>                &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-type">Exception</span> e) &#123;<br>                    ...<br>                &#125;<br>                ...<br>            &#125;;<br>        &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处执行了BroadcastReceiver类型的receiver对象的onReceive()方法，这样注册的广播接收者就收到了广播并得到了intent。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>广播</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android启动流程</title>
    <link href="/2024/03/09/Android%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/03/09/Android%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Android启动流程"><a href="#Android启动流程" class="headerlink" title="Android启动流程"></a><center>Android启动流程</center></h1><p>从上电开始到系统服务启动完成。整个流程的可以简述为：BootLoader -&gt; Kernel -&gt; Native-&gt; Framework-&gt; App</p><p><img src="https://s2.loli.net/2023/08/20/PGQjbu91vAdHFRy.png"></p><h3 id="上电"><a href="#上电" class="headerlink" title="上电"></a>上电</h3><p>引导芯片从固化在ROM里预设的代码开始执行。它将引导加载程序加载到RAM中并开始执行。</p><h3 id="Bootloader"><a href="#Bootloader" class="headerlink" title="Bootloader"></a>Bootloader</h3><p>Bootloader的主要作用是准备硬件环境，引导Linux Kernel（Linux内核）的启动。<br>启动过程中，会区分本次要启动的系统是Android系统或Recovery模式还是Fastboot模式，完成引导加载程序后，它将执行跳转到Linux内核。</p><h3 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h3><p>Android系统底层基于Linux Kernel, Linux内核在Android上启动的方式与在其他系统上类似。在kernel进入c语言阶段后，会开始执行start_kernel函数，它将设置系统运行所需的一切：初始化中断控制器，设置内存保护，缓存和调度等。最后调用rest_init函数启动三个进程（idle、init、kthreadd），来开启操作系统的正式运行。</p><ul><li><u>swapper(idle)进程（pid&#x3D;0）</u>，这是系统初始化过程kernel创建的第一个进程，也是唯一一个没有通过fork产生的进程，运行在内核态。用于初始化进程管理、内存管理、加载Display、Camera、Binder等驱动，以及启动<u>init进程（pid&#x3D;1）</u>和<u>kthreadd进程（pid&#x3D;2）</u>；</li><li>init进程，是用户空间的第一个进程，也是<strong>用户进程的鼻祖</strong>。init进程由idle通过kernel_thread创建，在内和空间完成初始化后，加载init程序，并最终转变为用户空间的init进程，完成系统的初始化。在系统启动完成后，init将演变为守护进程监视系统的其他进程。</li><li>kthreadd进程，这是Linux系统的内核进程，是所有<strong>内核进程的鼻祖</strong>。kthreadd进程由idle通过kernel_thread创建，并始终运行在内核空间，负责所有内核线程的调度和管理。它的任务就是管理和调度其他内核线程kernel_thread，它会循环执行一个kthreadd的函数，该函数的作用就是运行kthread_create_list全局链表中维护的kthread，我们调用kernel_thread创建的内核线程会被加入到此链表中，因此所有的内核线程都是直接或者间接地以kthreadd为父进程。一旦内存管理单元和缓存被初始化，系统将能够使用虚拟内存并启动用户空间进程。 内核将在根文件系统中查找init进程入口(在Android目录的system&#x2F;core&#x2F;hw&#x2F;init下找到)，并将其作为初始用户空间进程启动。</li></ul><p>这层真正的大主管是kthreadd进程，会创建内核工作线程kworkder，软中断线程ksoftirqd，thermal等内核守护线程。</p><h3 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h3><p>进入用户空间。</p><ul><li>这层init进程是大主管。它负责孵化各种系统级服务、守护进程等。最重要的是孵化出Zygote进程。</li><li>Media Server进程：负责启动和管理整个C++ framework，包含AudioFlinger、Camera Service等服务。</li></ul><h3 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h3><p>在Native之上，也是用户空间，主要给app层提供api以及系统服务。</p><ul><li>这层大主管是Zygote进程。它负责注册Zygote Socket服务端套接字，加载虚拟机，preloadClasses和preloadResouces。</li><li>System Server进程：负责启动和管理整个Java framework，包含AMS、PMS、WMS等服务。</li></ul><h3 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h3><p>所有的App进程都是由Zygote进程fork生成的。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>启动流程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应用程序进程启动流程</title>
    <link href="/2024/03/09/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/03/09/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于Android U</p></blockquote><h4 id="ATMS发送启动应用程序进程请求"><a href="#ATMS发送启动应用程序进程请求" class="headerlink" title="ATMS发送启动应用程序进程请求"></a>ATMS发送启动应用程序进程请求</h4><h5 id="1-ATMS处理启动应用程序基本数据"><a href="#1-ATMS处理启动应用程序基本数据" class="headerlink" title="1. ATMS处理启动应用程序基本数据"></a>1. ATMS处理启动应用程序基本数据</h5><p><img src="https://s2.loli.net/2023/12/26/jUGaBbK5StdwWr2.jpg"></p><p>由根Activity启动流程可知，应用程序进程不存在时，会通过ActivityTaskManagerService#startProcessAsync()创建新进程。</p><p>ATMS想要启动应用程序进程，就需要向Zygote进程发送创建应用程序进程的请求，ATMS会通过调用startProcessLocked()向Zygote进程发送请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">startProcessAsync</span><span class="hljs-params">(ActivityRecord activity, <span class="hljs-type">boolean</span> knownToBeDead, <span class="hljs-type">boolean</span> isTop,</span><br><span class="hljs-params">        String hostingType)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Message</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> PooledLambda.obtainMessage(ActivityManagerInternal::startProcess,<br>                mAmInternal, activity.processName, activity.info.applicationInfo, knownToBeDead,<br>                isTop, hostingType, activity.intent.getComponent());<br>        mH.sendMessage(m);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ActivityManagerInternal::startProcess，”::”是Java8新增特性，相当于调用了ActivityManagerInternal的startProcess()方法。而ActivityManagerInternal是一个抽象类，它是Activity管理器本地服务接口，它的实现为AMS的内部类LocalService。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java$LocalService<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startProcess</span><span class="hljs-params">(String processName, ApplicationInfo info, <span class="hljs-type">boolean</span> knownToBeDead,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> isTop, String hostingType, ComponentName hostingName)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-keyword">synchronized</span> (ActivityManagerService.<span class="hljs-built_in">this</span>) &#123;<br>            startProcessLocked(processName, info, knownToBeDead, <span class="hljs-number">0</span> <span class="hljs-comment">/* intentFlags */</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HostingRecord</span>(hostingType, hostingName, isTop),<br>                    ZYGOTE_POLICY_FLAG_LATENCY_SENSITIVE, <span class="hljs-literal">false</span> <span class="hljs-comment">/* allowWhileBooting */</span>,<br>                    <span class="hljs-literal">false</span> <span class="hljs-comment">/* isolated */</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着调用AMS的startProcessLocked()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java<br><span class="hljs-keyword">final</span> ProcessRecord <span class="hljs-title function_">startProcessLocked</span><span class="hljs-params">(String processName,</span><br><span class="hljs-params">        ApplicationInfo info, <span class="hljs-type">boolean</span> knownToBeDead, <span class="hljs-type">int</span> intentFlags,</span><br><span class="hljs-params">        HostingRecord hostingRecord, <span class="hljs-type">int</span> zygotePolicyFlags, <span class="hljs-type">boolean</span> allowWhileBooting,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> isolated)</span> &#123;<br>    <span class="hljs-keyword">return</span> mProcessList.startProcessLocked(processName, info, knownToBeDead, intentFlags,<br>            hostingRecord, zygotePolicyFlags, allowWhileBooting, isolated, <span class="hljs-number">0</span> <span class="hljs-comment">/* isolatedUid */</span>,<br>            <span class="hljs-literal">false</span> <span class="hljs-comment">/* isSdkSandbox */</span>, <span class="hljs-number">0</span> <span class="hljs-comment">/* sdkSandboxClientAppUid */</span>,<br>            <span class="hljs-literal">null</span> <span class="hljs-comment">/* sdkSandboxClientAppPackage */</span>,<br>            <span class="hljs-literal">null</span> <span class="hljs-comment">/* ABI override */</span>, <span class="hljs-literal">null</span> <span class="hljs-comment">/* entryPoint */</span>,<br>            <span class="hljs-literal">null</span> <span class="hljs-comment">/* entryPointArgs */</span>, <span class="hljs-literal">null</span> <span class="hljs-comment">/* crashHandler */</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>将启动进程任务转发给mProcessList，mProcessList是一个ProcessList对象，ProcessList是处理Activity进程的管理类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ProcessList.java<br>ProcessRecord <span class="hljs-title function_">startProcessLocked</span><span class="hljs-params">(String processName, ApplicationInfo info,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> knownToBeDead, <span class="hljs-type">int</span> intentFlags, HostingRecord hostingRecord,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> zygotePolicyFlags, <span class="hljs-type">boolean</span> allowWhileBooting, <span class="hljs-type">boolean</span> isolated, <span class="hljs-type">int</span> isolatedUid,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> isSdkSandbox, <span class="hljs-type">int</span> sdkSandboxUid, String sdkSandboxClientAppPackage,</span><br><span class="hljs-params">        String abiOverride, String entryPoint, String[] entryPointArgs, Runnable crashHandler)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> SystemClock.uptimeMillis();<br>    ProcessRecord app;<br>    ...<br><br>    <span class="hljs-keyword">if</span> (app == <span class="hljs-literal">null</span>) &#123;<br>        checkSlow(startTime, <span class="hljs-string">&quot;startProcess: creating new process record&quot;</span>);<br>        app = newProcessRecordLocked(info, processName, isolated, isolatedUid, isSdkSandbox,<br>                sdkSandboxUid, sdkSandboxClientAppPackage, hostingRecord);  <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">if</span> (app == <span class="hljs-literal">null</span>) &#123;<br>            Slog.w(TAG, <span class="hljs-string">&quot;Failed making new process record for &quot;</span><br>                    + processName + <span class="hljs-string">&quot;/&quot;</span> + info.uid + <span class="hljs-string">&quot; isolated=&quot;</span> + isolated);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        app.mErrorState.setCrashHandler(crashHandler);<br>        app.setIsolatedEntryPoint(entryPoint);<br>        app.setIsolatedEntryPointArgs(entryPointArgs);<br>        <span class="hljs-keyword">if</span> (predecessor != <span class="hljs-literal">null</span>) &#123;<br>            app.mPredecessor = predecessor;<br>            predecessor.mSuccessor = app;<br>        &#125;<br>        checkSlow(startTime, <span class="hljs-string">&quot;startProcess: done creating new process record&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br><br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span><br>            startProcessLocked(app, hostingRecord, zygotePolicyFlags, abiOverride);<br>    checkSlow(startTime, <span class="hljs-string">&quot;startProcess: done starting proc!&quot;</span>);  <span class="hljs-comment">// 2</span><br>    <span class="hljs-keyword">return</span> success ? app : <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处创建了ProcessRecord对象，它保存了当前正在运行的特定进程的完整信息，也就是需要启动的应用程序进程。接着注释2处继续调用startProcessLocked()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ProcessList.java<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">startProcessLocked</span><span class="hljs-params">(ProcessRecord app, HostingRecord hostingRecord,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> zygotePolicyFlags, String abiOverride)</span> &#123;<br>    <span class="hljs-keyword">return</span> startProcessLocked(app, hostingRecord, zygotePolicyFlags,<br>            <span class="hljs-literal">false</span> <span class="hljs-comment">/* disableHiddenApiChecks */</span>, <span class="hljs-literal">false</span> <span class="hljs-comment">/* disableTestApiChecks */</span>,<br>            abiOverride);<br>&#125;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">startProcessLocked</span><span class="hljs-params">(ProcessRecord app, HostingRecord hostingRecord,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> zygotePolicyFlags, <span class="hljs-type">boolean</span> disableHiddenApiChecks, <span class="hljs-type">boolean</span> disableTestApiChecks,</span><br><span class="hljs-params">        String abiOverride)</span> &#123;<br>    ...<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-type">int</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> app.uid;  <span class="hljs-comment">// 1</span><br>        ...<br>        <span class="hljs-keyword">if</span> (!app.isolated) &#123;<br>            ...<br>            gids = computeGidsForProcess(mountExternal, uid, permGids, externalStorageAccess);  <span class="hljs-comment">// 2</span><br>        &#125;<br>        ...<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">entryPoint</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>;  <span class="hljs-comment">// 3</span><br><br>        <span class="hljs-keyword">return</span> startProcessLocked(hostingRecord, entryPoint, app, uid, gids,<br>                runtimeFlags, zygotePolicyFlags, mountExternal, seInfo, requiredAbi,<br>                instructionSet, invokeWith, startUptime, startElapsedTime);  <span class="hljs-comment">// 4</span><br>    &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处获取了应用程序的用户id；</p><p>注释2处获取了用户组id；</p><p>注释3处给entrypoint赋值为”android.app.ActivityThread”，这个值就是应用程序进程主线程的类名；</p><p>注释4处接着调用startProcessLocked()；</p><p>此外，还设置了App进程挂载外部空间的模式、RuntimeFlags、abi架构等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ProcessList.java<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">startProcessLocked</span><span class="hljs-params">(HostingRecord hostingRecord, String entryPoint, ProcessRecord app,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> uid, <span class="hljs-type">int</span>[] gids, <span class="hljs-type">int</span> runtimeFlags, <span class="hljs-type">int</span> zygotePolicyFlags, <span class="hljs-type">int</span> mountExternal,</span><br><span class="hljs-params">        String seInfo, String requiredAbi, String instructionSet, String invokeWith,</span><br><span class="hljs-params">        <span class="hljs-type">long</span> startUptime, <span class="hljs-type">long</span> startElapsedTime)</span> &#123;<br>    ...<br><br>    <span class="hljs-keyword">if</span> (mService.mConstants.FLAG_PROCESS_START_ASYNC) &#123;  <span class="hljs-comment">// 异步启动进程</span><br>        ...<br>        mService.mProcStartHandler.post(() -&gt; handleProcessStart(<br>                app, entryPoint, gids, runtimeFlags, zygotePolicyFlags, mountExternal,<br>                requiredAbi, instructionSet, invokeWith, startSeq));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> Process.<span class="hljs-type">ProcessStartResult</span> <span class="hljs-variable">startResult</span> <span class="hljs-operator">=</span> startProcess(hostingRecord,<br>                    entryPoint, app,<br>                    uid, gids, runtimeFlags, zygotePolicyFlags, mountExternal, seInfo,<br>                    requiredAbi, instructionSet, invokeWith, startUptime);<br>            handleProcessStartedLocked(app, startResult.pid, startResult.usingWrapper,<br>                    startSeq, <span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>            ...<br>        &#125;<br>        <span class="hljs-keyword">return</span> app.getPid() &gt; <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>针对AMS采用同步或者异步的启动方式做了一些工作，最终都会调用startProcess()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/services/core/java/com/android/server/am/ProcessList.java<br><span class="hljs-keyword">private</span> Process.ProcessStartResult <span class="hljs-title function_">startProcess</span><span class="hljs-params">(HostingRecord hostingRecord, String entryPoint,</span><br><span class="hljs-params">        ProcessRecord app, <span class="hljs-type">int</span> uid, <span class="hljs-type">int</span>[] gids, <span class="hljs-type">int</span> runtimeFlags, <span class="hljs-type">int</span> zygotePolicyFlags,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> mountExternal, String seInfo, String requiredAbi, String instructionSet,</span><br><span class="hljs-params">        String invokeWith, <span class="hljs-type">long</span> startTime)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-keyword">final</span> Process.ProcessStartResult startResult;<br>        ...<br>        <span class="hljs-keyword">if</span> (hostingRecord.usesWebviewZygote()) &#123;  <span class="hljs-comment">// 1</span><br>            startResult = startWebView(entryPoint,<br>                    app.processName, uid, uid, gids, runtimeFlags, mountExternal,<br>                    app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,<br>                    app.info.dataDir, <span class="hljs-literal">null</span>, app.info.packageName,<br>                    app.getDisabledCompatChanges(),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;PROC_START_SEQ_IDENT + app.getStartSeq()&#125;);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hostingRecord.usesAppZygote()) &#123;  <span class="hljs-comment">// 2</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">AppZygote</span> <span class="hljs-variable">appZygote</span> <span class="hljs-operator">=</span> createAppZygoteForProcessIfNeeded(app);<br><br>            <span class="hljs-comment">// We can&#x27;t isolate app data and storage data as parent zygote already did that.</span><br>            startResult = appZygote.getProcess().start(entryPoint,<br>                    app.processName, uid, uid, gids, runtimeFlags, mountExternal,<br>                    app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,<br>                    app.info.dataDir, <span class="hljs-literal">null</span>, app.info.packageName,<br>                    <span class="hljs-comment">/*zygotePolicyFlags=*/</span> ZYGOTE_POLICY_FLAG_EMPTY, isTopApp,<br>                    app.getDisabledCompatChanges(), pkgDataInfoMap, allowlistedAppDataInfoMap,<br>                    <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;PROC_START_SEQ_IDENT + app.getStartSeq()&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 3</span><br>            regularZygote = <span class="hljs-literal">true</span>;<br>            startResult = Process.start(entryPoint,<br>                    app.processName, uid, uid, gids, runtimeFlags, mountExternal,<br>                    app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,<br>                    app.info.dataDir, invokeWith, app.info.packageName, zygotePolicyFlags,<br>                    isTopApp, app.getDisabledCompatChanges(), pkgDataInfoMap,<br>                    allowlistedAppDataInfoMap, bindMountAppsData, bindMountAppStorageDirs,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;PROC_START_SEQ_IDENT + app.getStartSeq()&#125;);<br>            <span class="hljs-comment">// By now the process group should have been created by zygote.</span><br>            app.mProcessGroupCreated = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        ...<br>        <span class="hljs-keyword">return</span> startResult;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>startProcess()会判断由哪个Zygote来创建我们的App进程。一般情况下，不指定时，使用默认Zygote。</p><p>注释1处由WebviewZygote创建进程；</p><p>注释2处由AppZygote创建进程；</p><p>注释3处由默认的Zygote创建进程，调用Process类的start()方法，Process是用于管理操作系统进程的工具类。</p><h5 id="2-Process处理启动参数到Zygote进程"><a href="#2-Process处理启动参数到Zygote进程" class="headerlink" title="2. Process处理启动参数到Zygote进程"></a>2. Process处理启动参数到Zygote进程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/os/Process.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ZygoteProcess</span> <span class="hljs-variable">ZYGOTE_PROCESS</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteProcess</span>();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ProcessStartResult <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> String processClass,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@Nullable</span> <span class="hljs-keyword">final</span> String niceName,</span><br><span class="hljs-params">                                       <span class="hljs-type">int</span> uid, <span class="hljs-type">int</span> gid, <span class="hljs-meta">@Nullable</span> <span class="hljs-type">int</span>[] gids,</span><br><span class="hljs-params">                                       <span class="hljs-type">int</span> runtimeFlags,</span><br><span class="hljs-params">                                       <span class="hljs-type">int</span> mountExternal,</span><br><span class="hljs-params">                                       <span class="hljs-type">int</span> targetSdkVersion,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@Nullable</span> String seInfo,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@NonNull</span> String abi,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@Nullable</span> String instructionSet,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@Nullable</span> String appDataDir,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@Nullable</span> String invokeWith,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@Nullable</span> String packageName,</span><br><span class="hljs-params">                                       <span class="hljs-type">int</span> zygotePolicyFlags,</span><br><span class="hljs-params">                                       <span class="hljs-type">boolean</span> isTopApp,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@Nullable</span> <span class="hljs-type">long</span>[] disabledCompatChanges,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@Nullable</span> Map&lt;String, Pair&lt;String, Long&gt;&gt;</span><br><span class="hljs-params">                                               pkgDataInfoMap,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@Nullable</span> Map&lt;String, Pair&lt;String, Long&gt;&gt;</span><br><span class="hljs-params">                                               whitelistedDataInfoMap,</span><br><span class="hljs-params">                                       <span class="hljs-type">boolean</span> bindMountAppsData,</span><br><span class="hljs-params">                                       <span class="hljs-type">boolean</span> bindMountAppStorageDirs,</span><br><span class="hljs-params">                                       <span class="hljs-meta">@Nullable</span> String[] zygoteArgs)</span> &#123;<br>    <span class="hljs-keyword">return</span> ZYGOTE_PROCESS.start(processClass, niceName, uid, gid, gids,<br>                runtimeFlags, mountExternal, targetSdkVersion, seInfo,<br>                abi, instructionSet, appDataDir, invokeWith, packageName,<br>                zygotePolicyFlags, isTopApp, disabledCompatChanges,<br>                pkgDataInfoMap, whitelistedDataInfoMap, bindMountAppsData,<br>                bindMountAppStorageDirs, zygoteArgs)<br>&#125;<br></code></pre></td></tr></table></figure><p>Process#start()方法把进程的启动工作转发给了ZygoteProcess。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/os/ZygoteProcess.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Process.ProcessStartResult <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> String processClass,</span><br><span class="hljs-params">                                              <span class="hljs-keyword">final</span> String niceName,</span><br><span class="hljs-params">                                              <span class="hljs-type">int</span> uid, <span class="hljs-type">int</span> gid, <span class="hljs-meta">@Nullable</span> <span class="hljs-type">int</span>[] gids,</span><br><span class="hljs-params">                                              <span class="hljs-type">int</span> runtimeFlags, <span class="hljs-type">int</span> mountExternal,</span><br><span class="hljs-params">                                              <span class="hljs-type">int</span> targetSdkVersion,</span><br><span class="hljs-params">                                              <span class="hljs-meta">@Nullable</span> String seInfo,</span><br><span class="hljs-params">                                              <span class="hljs-meta">@NonNull</span> String abi,</span><br><span class="hljs-params">                                              <span class="hljs-meta">@Nullable</span> String instructionSet,</span><br><span class="hljs-params">                                              <span class="hljs-meta">@Nullable</span> String appDataDir,</span><br><span class="hljs-params">                                              <span class="hljs-meta">@Nullable</span> String invokeWith,</span><br><span class="hljs-params">                                              <span class="hljs-meta">@Nullable</span> String packageName,</span><br><span class="hljs-params">                                              <span class="hljs-type">int</span> zygotePolicyFlags,</span><br><span class="hljs-params">                                              <span class="hljs-type">boolean</span> isTopApp,</span><br><span class="hljs-params">                                              <span class="hljs-meta">@Nullable</span> <span class="hljs-type">long</span>[] disabledCompatChanges,</span><br><span class="hljs-params">                                              <span class="hljs-meta">@Nullable</span> Map&lt;String, Pair&lt;String, Long&gt;&gt;</span><br><span class="hljs-params">                                                      pkgDataInfoMap,</span><br><span class="hljs-params">                                              <span class="hljs-meta">@Nullable</span> Map&lt;String, Pair&lt;String, Long&gt;&gt;</span><br><span class="hljs-params">                                                      allowlistedDataInfoList,</span><br><span class="hljs-params">                                              <span class="hljs-type">boolean</span> bindMountAppsData,</span><br><span class="hljs-params">                                              <span class="hljs-type">boolean</span> bindMountAppStorageDirs,</span><br><span class="hljs-params">                                              <span class="hljs-meta">@Nullable</span> String[] zygoteArgs)</span> &#123;<br>    <span class="hljs-comment">// TODO (chriswailes): Is there a better place to check this value?</span><br>    <span class="hljs-keyword">if</span> (fetchUsapPoolEnabledPropWithMinInterval()) &#123;<br>        informZygotesOfUsapPoolStatus();<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> startViaZygote(processClass, niceName, uid, gid, gids,<br>                runtimeFlags, mountExternal, targetSdkVersion, seInfo,<br>                abi, instructionSet, appDataDir, invokeWith, <span class="hljs-comment">/*startChildZygote=*/</span> <span class="hljs-literal">false</span>,<br>                packageName, zygotePolicyFlags, isTopApp, disabledCompatChanges,<br>                pkgDataInfoMap, allowlistedDataInfoList, bindMountAppsData,<br>                bindMountAppStorageDirs, zygoteArgs);<br>    &#125; <span class="hljs-keyword">catch</span> (ZygoteStartFailedEx ex) &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ZygoteProcess#start()又调用了startViaZygote()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/os/ZygoteProcess.java<br><span class="hljs-keyword">private</span> Process.ProcessStartResult <span class="hljs-title function_">startViaZygote</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> String processClass,</span><br><span class="hljs-params">                                                  <span class="hljs-meta">@Nullable</span> <span class="hljs-keyword">final</span> String niceName,</span><br><span class="hljs-params">                                                  <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> uid, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> gid,</span><br><span class="hljs-params">                                                  <span class="hljs-meta">@Nullable</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] gids,</span><br><span class="hljs-params">                                                  <span class="hljs-type">int</span> runtimeFlags, <span class="hljs-type">int</span> mountExternal,</span><br><span class="hljs-params">                                                  <span class="hljs-type">int</span> targetSdkVersion,</span><br><span class="hljs-params">                                                  <span class="hljs-meta">@Nullable</span> String seInfo,</span><br><span class="hljs-params">                                                  <span class="hljs-meta">@NonNull</span> String abi,</span><br><span class="hljs-params">                                                  <span class="hljs-meta">@Nullable</span> String instructionSet,</span><br><span class="hljs-params">                                                  <span class="hljs-meta">@Nullable</span> String appDataDir,</span><br><span class="hljs-params">                                                  <span class="hljs-meta">@Nullable</span> String invokeWith,</span><br><span class="hljs-params">                                                  <span class="hljs-type">boolean</span> startChildZygote,</span><br><span class="hljs-params">                                                  <span class="hljs-meta">@Nullable</span> String packageName,</span><br><span class="hljs-params">                                                  <span class="hljs-type">int</span> zygotePolicyFlags,</span><br><span class="hljs-params">                                                  <span class="hljs-type">boolean</span> isTopApp,</span><br><span class="hljs-params">                                                  <span class="hljs-meta">@Nullable</span> <span class="hljs-type">long</span>[] disabledCompatChanges,</span><br><span class="hljs-params">                                                  <span class="hljs-meta">@Nullable</span> Map&lt;String, Pair&lt;String, Long&gt;&gt;</span><br><span class="hljs-params">                                                          pkgDataInfoMap,</span><br><span class="hljs-params">                                                  <span class="hljs-meta">@Nullable</span> Map&lt;String, Pair&lt;String, Long&gt;&gt;</span><br><span class="hljs-params">                                                          allowlistedDataInfoList,</span><br><span class="hljs-params">                                                  <span class="hljs-type">boolean</span> bindMountAppsData,</span><br><span class="hljs-params">                                                  <span class="hljs-type">boolean</span> bindMountAppStorageDirs,</span><br><span class="hljs-params">                                                  <span class="hljs-meta">@Nullable</span> String[] extraArgs)</span><br>                                                  <span class="hljs-keyword">throws</span> ZygoteStartFailedEx &#123;<br>    ArrayList&lt;String&gt; argsForZygote = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    argsForZygote.add(<span class="hljs-string">&quot;--runtime-args&quot;</span>);<br>    argsForZygote.add(<span class="hljs-string">&quot;--setuid=&quot;</span> + uid);<br>    argsForZygote.add(<span class="hljs-string">&quot;--setgid=&quot;</span> + gid);<br>    argsForZygote.add(<span class="hljs-string">&quot;--runtime-flags=&quot;</span> + runtimeFlags);<br>    ...  <span class="hljs-comment">// 设置一系列参数</span><br><br>    <span class="hljs-keyword">synchronized</span>(mLock) &#123;<br>        <span class="hljs-comment">// The USAP pool can not be used if the application will not use the systems graphics</span><br>        <span class="hljs-comment">// driver.  If that driver is requested use the Zygote application start path.</span><br>        <span class="hljs-keyword">return</span> zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi),<br>                                          zygotePolicyFlags,<br>                                          argsForZygote);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设置启动参数，然后调用zygoteSendArgsAndGetResult()，该方法的第一个参数又调用了openZygoteSocketIfNeeded()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/os/ZygoteProcess.java<br><span class="hljs-keyword">private</span> ZygoteState <span class="hljs-title function_">openZygoteSocketIfNeeded</span><span class="hljs-params">(String abi)</span> <span class="hljs-keyword">throws</span> ZygoteStartFailedEx &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        attemptConnectionToPrimaryZygote();  <span class="hljs-comment">// 1</span><br><br>        <span class="hljs-keyword">if</span> (primaryZygoteState.matches(abi)) &#123;<br>            <span class="hljs-keyword">return</span> primaryZygoteState;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (mZygoteSecondarySocketAddress != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// The primary zygote didn&#x27;t match. Try the secondary.</span><br>            attemptConnectionToSecondaryZygote();  <span class="hljs-comment">// 2</span><br><br>            <span class="hljs-keyword">if</span> (secondaryZygoteState.matches(abi)) &#123;<br>                <span class="hljs-keyword">return</span> secondaryZygoteState;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteStartFailedEx</span>(<span class="hljs-string">&quot;Error connecting to zygote&quot;</span>, ioe);<br>    &#125;<br><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteStartFailedEx</span>(<span class="hljs-string">&quot;Unsupported zygote ABI: &quot;</span> + abi);<br>&#125;<br><br><span class="hljs-keyword">private</span> Process.ProcessStartResult <span class="hljs-title function_">zygoteSendArgsAndGetResult</span><span class="hljs-params">(</span><br><span class="hljs-params">        ZygoteState zygoteState, <span class="hljs-type">int</span> zygotePolicyFlags, <span class="hljs-meta">@NonNull</span> ArrayList&lt;String&gt; args)</span><br>        <span class="hljs-keyword">throws</span> ZygoteStartFailedEx &#123;<br>    ...<br><br>    <span class="hljs-keyword">if</span> (shouldAttemptUsapLaunch(zygotePolicyFlags, args)) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> attemptUsapSendArgsAndGetResult(zygoteState, msgStr);  <span class="hljs-comment">// 3</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>            ...<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> attemptZygoteSendArgsAndGetResult(zygoteState, msgStr);  <span class="hljs-comment">// 4</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注释1和注释2处，如果连接Zygote主模式返回的ZygoteState与启动应用程序所需的abi不匹配，则连接Zygote辅模式。两个方法逻辑基本相同。</p><p>注释3和注释4处都传入了zygoteState，ZygoteState是ZygoteProcess的静态内部类，保存了与Zygote进行通信的状态，而它的返回是由openZygoteSocketIfNeeded()处理的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/os/ZygoteProcess.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attemptConnectionToPrimaryZygote</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span> (primaryZygoteState == <span class="hljs-literal">null</span> || primaryZygoteState.isClosed()) &#123;<br>        primaryZygoteState =<br>                ZygoteState.connect(mZygoteSocketAddress, mUsapPoolSocketAddress);  <span class="hljs-comment">// 1</span><br><br>        maybeSetApiDenylistExemptions(primaryZygoteState, <span class="hljs-literal">false</span>);<br>        maybeSetHiddenApiAccessLogSampleRate(primaryZygoteState);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> Process.ProcessStartResult <span class="hljs-title function_">attemptZygoteSendArgsAndGetResult</span><span class="hljs-params">(</span><br><span class="hljs-params">        ZygoteState zygoteState, String msgStr)</span> <span class="hljs-keyword">throws</span> ZygoteStartFailedEx &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取服务端（Zygote）输出流</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">zygoteWriter</span> <span class="hljs-operator">=</span> zygoteState.mZygoteOutputWriter;<br>        <span class="hljs-comment">// 获取服务端（Zygote）输入流</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">zygoteInputStream</span> <span class="hljs-operator">=</span> zygoteState.mZygoteInputStream;<br><br>        <span class="hljs-comment">// 将参数写入Zygote</span><br>        zygoteWriter.write(msgStr);<br>        zygoteWriter.flush();<br><br>        <span class="hljs-comment">// Always read the entire result from the input stream to avoid leaving</span><br>        <span class="hljs-comment">// bytes in the stream for future process starts to accidentally stumble</span><br>        <span class="hljs-comment">// upon.</span><br>        Process.<span class="hljs-type">ProcessStartResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Process</span>.ProcessStartResult();<br>        <span class="hljs-comment">// 获取Zygote返回的结果</span><br>        result.pid = zygoteInputStream.readInt();<br>        result.usingWrapper = zygoteInputStream.readBoolean();<br><br>        <span class="hljs-keyword">if</span> (result.pid &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteStartFailedEx</span>(<span class="hljs-string">&quot;fork() failed&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>        zygoteState.close();<br>        Log.e(LOG_TAG, <span class="hljs-string">&quot;IO Exception while communicating with Zygote - &quot;</span><br>                + ex.toString());<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteStartFailedEx</span>(ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处调用ZygoteState的connect()方法打开Socket连接，mZygoteSocketAddress是名称为zygote的Socket服务。</p><p>attemptZygoteSendArgsAndGetResult()主要是通过socket通道向Zygote进程发送一个参数列表，然后进入阻塞等待状态，直到远端的socket服务端发送回来新创建的进程pid才返回。</p><h4 id="Zygote接收请求并创建应用程序进程"><a href="#Zygote接收请求并创建应用程序进程" class="headerlink" title="Zygote接收请求并创建应用程序进程"></a>Zygote接收请求并创建应用程序进程</h4><p><img src="https://s2.loli.net/2023/12/26/atMdRcDh6j5SHEJ.jpg"></p><h5 id="1-Zygote接收请求"><a href="#1-Zygote接收请求" class="headerlink" title="1. Zygote接收请求"></a>1. Zygote接收请求</h5><p>Zygote是通过fork自身来创建其他进程的。在ZygoteInit#main()中根据传递进来的参数，判断是启动什么类型的进程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/com/android/internal/os/ZygoteInit.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argv)</span> &#123;<br>    <span class="hljs-type">ZygoteServer</span> <span class="hljs-variable">zygoteServer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    ...<br>    Runnable caller;  <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">startSystemServer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 2</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">zygoteSocketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zygote&quot;</span>;  <span class="hljs-comment">// 3</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">abiList</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">enableLazyPreload</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; argv.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;start-system-server&quot;</span>.equals(argv[i])) &#123;  <span class="hljs-comment">// 4</span><br>                startSystemServer = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;--enable-lazy-preload&quot;</span>.equals(argv[i])) &#123;<br>                enableLazyPreload = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (argv[i].startsWith(ABI_LIST_ARG)) &#123;<br>                abiList = argv[i].substring(ABI_LIST_ARG.length());<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (argv[i].startsWith(SOCKET_NAME_ARG)) &#123;<br>                zygoteSocketName = argv[i].substring(SOCKET_NAME_ARG.length());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Unknown command line argument: &quot;</span> + argv[i]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isPrimaryZygote</span> <span class="hljs-operator">=</span> zygoteSocketName.equals(Zygote.PRIMARY_SOCKET_NAME);<br>        ...<br><br>        Zygote.initNativeState(isPrimaryZygote);  <span class="hljs-comment">// 5</span><br><br>        ...<br><br>        zygoteServer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteServer</span>(isPrimaryZygote);  <span class="hljs-comment">// 6</span><br><br>        <span class="hljs-keyword">if</span> (startSystemServer) &#123;<br>            <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> forkSystemServer(abiList, zygoteSocketName, zygoteServer);  <span class="hljs-comment">// 7</span><br><br>            <span class="hljs-comment">// &#123;@code r == null&#125; in the parent (zygote) process, and &#123;@code r != null&#125; in the</span><br>            <span class="hljs-comment">// child (system_server) process.</span><br>            <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>) &#123;<br>                r.run();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        Log.i(TAG, <span class="hljs-string">&quot;Accepting command socket connections&quot;</span>);<br><br>        <span class="hljs-comment">// The select loop returns early in the child process after a fork and</span><br>        <span class="hljs-comment">// loops forever in the zygote.</span><br>        caller = zygoteServer.runSelectLoop(abiList);  <span class="hljs-comment">// 8</span><br>    &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;System zygote died with fatal exception&quot;</span>, ex);<br>        <span class="hljs-keyword">throw</span> ex;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (zygoteServer != <span class="hljs-literal">null</span>) &#123;<br>            zygoteServer.closeServerSocket();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// We&#x27;re in the child process and have exited the select loop. Proceed to execute the</span><br>    <span class="hljs-comment">// command.</span><br>    <span class="hljs-keyword">if</span> (caller != <span class="hljs-literal">null</span>) &#123;<br>        caller.run();  <span class="hljs-comment">// 9</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处创建了一个Runnable类型的请求对象代表此次请求Zygote获取应用进程的对象；</p><p>注释2、4、7处如果是SystemServer进程，就启动SystemServer，如果不是就启动其他应用程序进程；</p><p>注释3处设置Socket连接名称为zygote；</p><p>注释5处初始化Zygote的状态环境，包括支持套接字的环境、安全环境等；</p><p>注释6处创建了ZygoteServer对象，它可以理解为Zygote支持Socket进程通信的服务端；</p><p>注释8处的runSelectLoop()是Zygote进程等待接收AMS请求启动应用程序进程的关键方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/com/android/internal/os/ZygoteServer.java<br>Runnable <span class="hljs-title function_">runSelectLoop</span><span class="hljs-params">(String abiList)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        ...<br>        <span class="hljs-keyword">if</span> (pollReturnValue == <span class="hljs-number">0</span>) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ...<br>            <span class="hljs-keyword">while</span> (--pollIndex &gt;= <span class="hljs-number">0</span>) &#123;<br>                ...<br>                <span class="hljs-keyword">if</span> (pollIndex == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// Zygote server socket</span><br>                    <span class="hljs-type">ZygoteConnection</span> <span class="hljs-variable">newPeer</span> <span class="hljs-operator">=</span> acceptCommandPeer(abiList);<br>                    peers.add(newPeer);<br>                    socketFDs.add(newPeer.getFileDescriptor());<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pollIndex &lt; usapPoolEventFDIndex) &#123;<br>                    <span class="hljs-comment">// Session socket accepted from the Zygote server socket</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">ZygoteConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> peers.get(pollIndex);<br>                        <span class="hljs-type">boolean</span> <span class="hljs-variable">multipleForksOK</span> <span class="hljs-operator">=</span> !isUsapPoolEnabled()<br>                                &amp;&amp; ZygoteHooks.isIndefiniteThreadSuspensionSafe();<br>                        <span class="hljs-keyword">final</span> <span class="hljs-type">Runnable</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span><br>                                connection.processCommand(<span class="hljs-built_in">this</span>, multipleForksOK);  <span class="hljs-comment">// 1</span><br>                        ...<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        ...<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        ...<br>                    &#125;<br><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    ...<br>                &#125;<br>            &#125;<br>            ...<br>        &#125;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当有AMS的请求数据到来时，会调用注释1处的代码，即调用ZygoteConnection#processCommand()。</p><h5 id="2-获取应用程序进程"><a href="#2-获取应用程序进程" class="headerlink" title="2. 获取应用程序进程"></a>2. 获取应用程序进程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java<br>Runnable <span class="hljs-title function_">processCommand</span><span class="hljs-params">(ZygoteServer zygoteServer, <span class="hljs-type">boolean</span> multipleOK)</span> &#123;<br>    ZygoteArguments parsedArgs;<br><br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">ZygoteCommandBuffer</span> <span class="hljs-variable">argBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteCommandBuffer</span>(mSocket)) &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                parsedArgs = ZygoteArguments.getInstance(argBuffer);<br>                <span class="hljs-comment">// Keep argBuffer around, since we need it to fork.</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;IOException on command socket&quot;</span>, ex);<br>            &#125;<br>            ...<br><br>            <span class="hljs-keyword">if</span> (parsedArgs.mInvokeWith != <span class="hljs-literal">null</span> || parsedArgs.mStartChildZygote<br>                    || !multipleOK || peer.getUid() != Process.SYSTEM_UID) &#123;<br>                <span class="hljs-comment">// Continue using old code for now. <span class="hljs-doctag">TODO:</span> Handle these cases in the other path.</span><br>                pid = Zygote.forkAndSpecialize(parsedArgs.mUid, parsedArgs.mGid,<br>                        parsedArgs.mGids, parsedArgs.mRuntimeFlags, rlimits,<br>                        parsedArgs.mMountExternal, parsedArgs.mSeInfo, parsedArgs.mNiceName,<br>                        fdsToClose, fdsToIgnore, parsedArgs.mStartChildZygote,<br>                        parsedArgs.mInstructionSet, parsedArgs.mAppDataDir,<br>                        parsedArgs.mIsTopApp, parsedArgs.mPkgDataInfoList,<br>                        parsedArgs.mAllowlistedDataInfoList, parsedArgs.mBindMountAppDataDirs,<br>                        parsedArgs.mBindMountAppStorageDirs);  <span class="hljs-comment">// 1</span><br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-comment">// in child</span><br>                        zygoteServer.setForkChild();<br><br>                        zygoteServer.closeServerSocket();<br>                        IoUtils.closeQuietly(serverPipeFd);<br>                        serverPipeFd = <span class="hljs-literal">null</span>;<br><br>                        <span class="hljs-keyword">return</span> handleChildProc(parsedArgs, childPipeFd,<br>                                parsedArgs.mStartChildZygote);  <span class="hljs-comment">// 2</span><br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        ...<br>                    &#125;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    ...<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ...<br>            &#125;<br>        &#125;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处fork子进程，参数为parsedArgs中存储的应用进程启动参数，返回值为pid。如果pid为0，说明当前代码逻辑运行在新创建的子进程（应用程序进程）中，这时就会调用注释2处handleChildProc()方法来处理应用程序进程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/com/android/internal/os/Zygote.java<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">forkAndSpecialize</span><span class="hljs-params">(<span class="hljs-type">int</span> uid, <span class="hljs-type">int</span> gid, <span class="hljs-type">int</span>[] gids, <span class="hljs-type">int</span> runtimeFlags,</span><br><span class="hljs-params">        <span class="hljs-type">int</span>[][] rlimits, <span class="hljs-type">int</span> mountExternal, String seInfo, String niceName, <span class="hljs-type">int</span>[] fdsToClose,</span><br><span class="hljs-params">        <span class="hljs-type">int</span>[] fdsToIgnore, <span class="hljs-type">boolean</span> startChildZygote, String instructionSet, String appDataDir,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> isTopApp, String[] pkgDataInfoList, String[] allowlistedDataInfoList,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> bindMountAppDataDirs, <span class="hljs-type">boolean</span> bindMountAppStorageDirs)</span> &#123;<br>    ...<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> nativeForkAndSpecialize(<br>            uid, gid, gids, runtimeFlags, rlimits, mountExternal, seInfo, niceName, fdsToClose,<br>            fdsToIgnore, startChildZygote, instructionSet, appDataDir, isTopApp,<br>            pkgDataInfoList, allowlistedDataInfoList, bindMountAppDataDirs,<br>            bindMountAppStorageDirs);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java<br><span class="hljs-keyword">private</span> Runnable <span class="hljs-title function_">handleChildProc</span><span class="hljs-params">(ZygoteArguments parsedArgs,</span><br><span class="hljs-params">        FileDescriptor pipeFd, <span class="hljs-type">boolean</span> isZygote)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">if</span> (parsedArgs.mInvokeWith != <span class="hljs-literal">null</span>) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (!isZygote) &#123;<br>            <span class="hljs-keyword">return</span> ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,<br>                    parsedArgs.mDisabledCompatChanges,<br>                    parsedArgs.mRemainingArgs, <span class="hljs-literal">null</span> <span class="hljs-comment">/* classLoader */</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> ZygoteInit.childZygoteInit(<br>                    parsedArgs.mRemainingArgs  <span class="hljs-comment">/* classLoader */</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>forkAndSpecialize()会通过native方法nativeForkAndSpecialize()与底层通信fork应用程序进程。</p><p>handleChildProc()继续调用ZygoteInit#zygoteInit()方法。</p><h5 id="3-创建应用程序的ActivityThread"><a href="#3-创建应用程序的ActivityThread" class="headerlink" title="3. 创建应用程序的ActivityThread"></a>3. 创建应用程序的ActivityThread</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/com/android/internal/os/ZygoteInit.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runnable <span class="hljs-title function_">zygoteInit</span><span class="hljs-params">(<span class="hljs-type">int</span> targetSdkVersion, <span class="hljs-type">long</span>[] disabledCompatChanges,</span><br><span class="hljs-params">        String[] argv, ClassLoader classLoader)</span> &#123;<br>    ...<br>    ZygoteInit.nativeZygoteInit();  <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">return</span> RuntimeInit.applicationInit(targetSdkVersion, disabledCompatChanges, argv,<br>            classLoader);  <span class="hljs-comment">// 2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处会在新创建的应用程序进程中创建Binder线程池，当前应用程序就拥有了Binder通信的能力；</p><p>注释2处调用了RuntimeInit#applicationInit()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/com/android/internal/os/RuntimeInit.java<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Runnable <span class="hljs-title function_">applicationInit</span><span class="hljs-params">(<span class="hljs-type">int</span> targetSdkVersion, <span class="hljs-type">long</span>[] disabledCompatChanges,</span><br><span class="hljs-params">        String[] argv, ClassLoader classLoader)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">return</span> findStaticMain(args.startClass, args.startArgs, classLoader);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用findStaticMain()，其中的args.startClass是android.app.ActivityThread。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/com/android/internal/os/RuntimeInit.java<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Runnable <span class="hljs-title function_">findStaticMain</span><span class="hljs-params">(String className, String[] argv,</span><br><span class="hljs-params">        ClassLoader classLoader)</span> &#123;<br>    Class&lt;?&gt; cl;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        cl = Class.forName(className, <span class="hljs-literal">true</span>, classLoader);  <span class="hljs-comment">// 1</span><br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;<br>        ...<br>    &#125;<br><br>    Method m;<br>    <span class="hljs-keyword">try</span> &#123;<br>        m = cl.getMethod(<span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String[].class &#125;);  <span class="hljs-comment">// 2</span><br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException ex) &#123;<br>        ...<br>    &#125;<br><br>    ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodAndArgsCaller</span>(m, argv);  <span class="hljs-comment">// 3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注释1处通过反射获得了android.app.ActivityThread类；</p><p>注释2处获得了ActivityThread的main()方法，并将main()方法传入注释3处的MethodAndArgsCaller类的构造方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/com/android/internal/os/RuntimeInit.java<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodAndArgsCaller</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">/** method to call */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Method mMethod;<br><br>    <span class="hljs-comment">/** argument array */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] mArgs;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MethodAndArgsCaller</span><span class="hljs-params">(Method method, String[] args)</span> &#123;<br>        mMethod = method;<br>        mArgs = args;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            mMethod.invoke(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; mArgs &#125;);  <span class="hljs-comment">// 1</span><br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException ex) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该Runnable一路返回到本小节开头的注释9：<code>caller.run()</code>。caller.run()调用Method#invoke()，也就是ActivityThread#main()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">frameworks/base/core/java/android/app/ActivityThread.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    ...<br>    Looper.prepareMainLooper();<br>...<br>    <span class="hljs-type">ActivityThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityThread</span>();<br>    thread.attach(<span class="hljs-literal">false</span>, startSeq);<br><br>    <span class="hljs-keyword">if</span> (sMainThreadHandler == <span class="hljs-literal">null</span>) &#123;<br>        sMainThreadHandler = thread.getHandler();<br>    &#125;<br>...<br>    Looper.loop();<br><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Main thread loop unexpectedly exited&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>ActivityThread是每个应用程序主线程的管理类。main()中创建了ActivityThread进程，并启动了消息循环队列，代表着当前进程的主线程已启动。</p><p>到此，应用程序进程启动完成。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>启动流程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
